<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com</title><link>https://www.tartley.com/</link><description>Creating a website devoted to oneself has been described as the greatest act of hubris. Welcome aboard!</description><atom:link href="https://www.tartley.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:tartley @ the domain tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Fri, 14 May 2021 19:37:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TIL: Energy use per transaction for cryptocurrencies vs Visa</title><link>https://www.tartley.com/posts/til-cryptocurrency-per-transaction-energy-use/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;For my own calibration, approximate current energy use for a single transaction
in various cryptocurrencies, compared with using Visa:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Currency &lt;/th&gt;
&lt;th&gt;Symbol &lt;/th&gt;
&lt;th align="right"&gt;Energy use&lt;br&gt;per txn(Wh) &lt;/th&gt;
&lt;th&gt;Equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bitcoin&lt;/td&gt;
&lt;td&gt;BTC&lt;/td&gt;
&lt;td align="right"&gt;1,000,000 &lt;/td&gt;
&lt;td&gt;Hot tub, 150 hours&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ethereum&lt;/td&gt;
&lt;td&gt;ETH&lt;/td&gt;
&lt;td align="right"&gt;62,000 &lt;/td&gt;
&lt;td&gt;Nissan Leaf, 1.5 charges&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Litecoin&lt;/td&gt;
&lt;td&gt;LTC&lt;/td&gt;
&lt;td align="right"&gt;19,000 &lt;/td&gt;
&lt;td&gt;Clothes washer, 8 loads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chia&lt;/td&gt;
&lt;td&gt;XCH&lt;/td&gt;
&lt;td align="right"&gt;2,000 &lt;/td&gt;
&lt;td&gt;Dishwasher, 1 hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cardano&lt;/td&gt;
&lt;td&gt;ADA&lt;/td&gt;
&lt;td align="right"&gt;500 &lt;/td&gt;
&lt;td&gt;Computer &amp;amp; monitor, 1 hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dogecoin&lt;/td&gt;
&lt;td&gt;DOGE&lt;/td&gt;
&lt;td align="right"&gt;120 &lt;/td&gt;
&lt;td&gt;Humidifier, 1 hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ripple&lt;/td&gt;
&lt;td&gt;XRP&lt;/td&gt;
&lt;td align="right"&gt;79 &lt;/td&gt;
&lt;td&gt;Amazon echo telling 2 jokes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visa&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;1 &lt;/td&gt;
&lt;td&gt;One Visa card purchase&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;
Sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I got most crypto energy use from &lt;a href="https://www.benzinga.com/markets/cryptocurrency/21/05/21098323/elon-musk-says-tesla-looking-at-other-cryptos-who-use-less-than-1-of-bitcoins-energy-which"&gt;this roundup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Visa, I used the figures from &lt;a href="https://digiconomist.net/bitcoin-energy-consumption"&gt;this breakdown&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Bitcoin, I took a rounded figure roughly between those quoted on the above two sources
  (710kWh and 1,123kWh). A single figure precision is probably most appropriate anyhow.&lt;/li&gt;
&lt;li&gt;For Chia, I did my own hacky calculation.
  &lt;a href="https://chiapower.org/"&gt;Chia Power estimates 6MW&lt;/a&gt;
  in total is used by the Chia network, at current size of 4EiB.
  Meanwhile, &lt;a href="https://www.chiaexplorer.com/charts/transaction-volume"&gt;Chia Explorer shows a hard-to-read graph&lt;/a&gt;
  which I'm eyeballing to get a rough average of 3,000 transactions per hour.
  6 Megawatts divided by 3k per hour gives an energy use per transaction
  of 2kW.&lt;/li&gt;
&lt;li&gt;For equivalent household energy uses, I used &lt;a href="https://electricityplans.com/kwh-kilowatt-hour-can-power/"&gt;this&lt;/a&gt; and &lt;a href="http://www.wrecc.com/what-uses-watts-in-your-home/"&gt;this&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Something's not quite right here though. The Chia whitepaper estimates 10,000
times better energy efficiency than Bitcoin. They probably know how to
calculate that better than I do. So my figure for Chia is perhaps high? I hear
the value per transaction will come down as Chia starts handling more
transactions, which seems reasonable. Perhaps the white paper was referring to
that future hypothetical efficiency?&lt;/p&gt;
&lt;p&gt;On the other hand, many of the other cryptocurrencies listed above will
become more efficient in the future too (e.g. Bitcoin is in the process
of deploying its lightning network, which will reduce per transaction
energy use.)  So I think it's fair to leave the above figures as they are,
as a snapshot of current reality.&lt;/p&gt;&lt;/div&gt;</description><category>chia</category><category>crypto</category><guid>https://www.tartley.com/posts/til-cryptocurrency-per-transaction-energy-use/</guid><pubDate>Thu, 13 May 2021 21:09:33 GMT</pubDate></item><item><title>TIL: Create mp3 from YouTube video</title><link>https://www.tartley.com/posts/til-create-mp3-from-youtube-video/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;Install &lt;code&gt;youtube-dl&lt;/code&gt;, a tool to download YouTube videos. Using &lt;code&gt;apt&lt;/code&gt; installs a
version that's too old to work, so:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;pipsi install youtube-dl
&lt;/pre&gt;
&lt;p&gt;Download the video from YouTube:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;youtube-dl https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;nyU1Pt2IXyE
&lt;/pre&gt;
&lt;p&gt;This results in a webm file. I have no idea what that is, and am relieved
to discover that converting it into an mp3 requires just:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;ffmpeg -I MyVideoFile.webm -vn MyAudioFile.mp3
&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;-vn&lt;/code&gt; disables video in the output.&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>music</category><category>til</category><guid>https://www.tartley.com/posts/til-create-mp3-from-youtube-video/</guid><pubDate>Thu, 13 May 2021 16:18:33 GMT</pubDate></item><item><title>TIL: Git Annotated Tags</title><link>https://www.tartley.com/posts/til-git-annotated-tags/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;I've previously only ever used git's regular &lt;em&gt;lightweight&lt;/em&gt; tags, created with
&lt;code&gt;git tag TAGNAME&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Today I learned about &lt;em&gt;annotated&lt;/em&gt; tags, created with &lt;code&gt;git tag -a -m "MESSAGE"
TAGNAME&lt;/code&gt;. If you don't specify &lt;code&gt;-m MESSAGE&lt;/code&gt;, git annoyingly prompts you for
one, but it will accept &lt;code&gt;-m ""&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Annotated tags store the creator, created timestamp, and the message. This
might occasionally be useful for understanding what happened. A release tagged
this way shows us who created the release, and when, which might differ from
when the commit was created.&lt;/p&gt;
&lt;p&gt;But more importantly is the different handling of lightweight versus
annotated tags when pushing to the server.&lt;/p&gt;
&lt;p&gt;Habitually, I've been using:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;git push --tags
&lt;/pre&gt;
&lt;p&gt;This is slightly broken, in that it pushes &lt;em&gt;all&lt;/em&gt; tags. Some tags might be
intended as my private local development state. Some of them might be
unreachable in the origin repo.&lt;/p&gt;
&lt;p&gt;To fix this, git push introduced: &lt;code&gt;--follow-tags&lt;/code&gt;, which aims to address these
issues by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only pushing annotated tags (hence, lightweight tags can be used as local,
  private state)&lt;/li&gt;
&lt;li&gt;Only pushing tags that are on an ancestor of the commit being pushed. Hence
  no unreachable tags are created on the origin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or alternatively, just push the tag name directly:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;git push TAGAME
&lt;/pre&gt;
&lt;p&gt;Upshot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For private local state, use regular lightweight tags.
  Never push them. Hence never use &lt;code&gt;git push --tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For public shared tagging, such as releases, use annotated tags,
  pushed either individually by name, or by using &lt;code&gt;--follow-tags&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>git</category><category>tags</category><category>til</category><category>version-control</category><guid>https://www.tartley.com/posts/til-git-annotated-tags/</guid><pubDate>Sat, 17 Oct 2020 05:40:24 GMT</pubDate></item><item><title>TIL: ‰ is per mille</title><link>https://www.tartley.com/posts/til-per-mille/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;‰ or &lt;em&gt;'per mille'&lt;/em&gt; means parts per thousand.&lt;/p&gt;
&lt;p&gt;I wasn't aware of it until today when I idly Googled "permil", my imagined
variation on "percent", to find that this is one of the many spellings of
a real thing. Rarely used in English, but more common in other European
languages.&lt;/p&gt;
&lt;p&gt;Now that I see the symbol, I remember seeing it as a child, on an old
typewriter that my Grandfather used. What's old is new.&lt;/p&gt;&lt;/div&gt;</description><category>til</category><guid>https://www.tartley.com/posts/til-per-mille/</guid><pubDate>Sat, 17 Oct 2020 05:25:45 GMT</pubDate></item><item><title>The Structure of Scientific Revolutions</title><link>https://www.tartley.com/posts/the-structure-of-scientific-revolutions/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;This post rescues content from a series of tweets I wrote in 2018.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I loved &lt;em&gt;The Structure of Scientfic Revolutions&lt;/em&gt;, a 1962 book by Thomas S.
Kuhn. It was recommended to me as having similar impact to undergraduate
classics like &lt;em&gt;Godel, Escher, Bach&lt;/em&gt;, or &lt;em&gt;The Blind Watchmaker.&lt;/em&gt; I'm going
to just summarize the content here, so: Spoilers.&lt;/p&gt;
&lt;p&gt;It begins by observing that discredited scientific theories, even those
which seem laughable today, such as phrenology, or the Ptolemaic model of the
heavens, were not crackpot theories with shaky evidence. Earnest, hardworking
practitioners refined them using sensible processes, which by the 17th century
were converging on the modern scientific method.&lt;/p&gt;
&lt;p&gt;This process of "normal" science excels at the incremental refinement of
established scientific theories. But in practice, is unable to perform the
revolutionary transitions required to overcome outmoded theories and replace
them with others, no matter how bizarre and wrongheaded the initial theory
looks to us now with hindsight.&lt;/p&gt;
&lt;p&gt;So what is the unarticulated process that is responsible for these
transitions, i.e. how do scientific revolutions happen? We have intuitive
visions of this occurring overnight. An individual experiment yields unexpected
results, contradicting conventional theory, while irrefutably supporting an
alternate theory to take its place. But in practice, this &lt;em&gt;never&lt;/em&gt; happens.&lt;/p&gt;
&lt;p&gt;At first, and often for years or centuries, no discrepancy between theory and
experiment is noticed, because the prevailing theories of the time have a
massive shaping effect on what questions it is valid to ask, what experiments
are deemed useful to do.&lt;/p&gt;
&lt;p&gt;For practitioners to turn their backs on an established theory in such a time
is never productive. They are shunned for turning their backs on science
itself.&lt;/p&gt;
&lt;p&gt;We see this vividly today with homeopaths (my own example, not the book's).
Often, and incorrectly, homeopathy is mocked because the theories sound
ridiculous to one steeped in a conventional understanding of chemistry.
People will jeer at how total dilution can 'obviously' have no effect,
or at the idea of water exhibiting some sort of 'memory'. But such jeering is
as scientifically illiterate as the quacks it contends with. The argument from
personal incredulity has no place in determining scientific truth. No newer
theory makes sense in the light of the more limited, and often contradictory,
paradigm that it eventually replaces. The only useful criteria is to try it
out. &lt;em&gt;Does it actually work?&lt;/em&gt; This is the axis upon which homeopathy should be
judged. (and upon which it has decisively been found wanting.)&lt;/p&gt;
&lt;p&gt;All contradictions to conventional science suffer a similar ignominious
treatment, regardless of how right they might later turn out to be. Before any
revolution of theory can overturn conventional understanding, the stage
must be set, the community prepared.&lt;/p&gt;
&lt;p&gt;The process begins as the incremental advances of "normal" science gradually
increase the scope and precision of accepted theories. Until this point,
measurements in which experiment does not conform to theory are either ignored
as erroneous artifacts, or are dismissed as indicative of some separate,
unknown phenomena. They are never interpreted to mean prevailing theory is
wrong.&lt;/p&gt;
&lt;p&gt;However the growing scope &amp;amp; precision of theory and measurement gradually
uncovers more of these discrepancies, or reveals them in finer detail.
Eventually they become too prominent to ignore, and a kind of phase transition
occurs.&lt;/p&gt;
&lt;p&gt;Eventually, the discrepancies become so prominent and concerning that they
are judged to be a valid area of study in themselves, rather than just annoying
aberrations. Leading practitioners devote themselves to the task. Foundations
of the specialisation that were once accepted without question now come under
scrutiny.&lt;/p&gt;
&lt;p&gt;To partially explain the discrepancies, people introduce many incompatible
variations on current theories. The once unified field divides into cliques,
supporting different theoretical variations. The field, formerly a united mass,
calves into fragments.&lt;/p&gt;
&lt;p&gt;If one of these variations on existing theory manages to explain all
observations, then this gradually gains mindshare, until the whole community
has migrated to this new, incrementally improved theory.&lt;/p&gt;
&lt;p&gt;However, in cases where a truly revolutionary change is required, such
incrementalism is insufficient, and none of the theoretical variations are
fully successful in explaining all observations. The factions' differing
underlying assumptions give them no common ground upon which to arbitrate their
differences, so their debates are irreconcilable. The fragments are melting,
into a churning liquid of disagreement.&lt;/p&gt;
&lt;p&gt;This state is notably similar to the state of a nascent field before any
established scientific theories have taken hold.&lt;/p&gt;
&lt;p&gt;All is chaos, with different groups supporting different ideas, agreeing on
nothing. The field is in turmoil, its practitioners in genuine emotional
distress. Their personal identities are undermined. What does it mean to be a
practitioner when nobody can agree on what the field even is? Is what we do
even &lt;em&gt;science&lt;/em&gt; at all? A crisis has arrived. We are at boiling point.&lt;/p&gt;
&lt;p&gt;Kuhn compares this to individuals in psychological experiments, given cunningly
contradictory sensual stimuli. At first they don't notice anything wrong about
a brief glimpse of a playing card showing a red king of clubs. As the length of
their glimpse expands, and the stimulation becomes more intrusive, the subject
starts to hesitate, and stumble on words. Suddenly it impinges on their
consciousness, and they cry out, distressed, uncertain of even basic facts. "My
God! What did I see? Are clubs always red? What's happening here?"&lt;/p&gt;
&lt;p&gt;Kuhn also compares scientific revolutions to their social and political
counterparts, in a chillingly familiar passage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Political revolutions aim to change political institutions in ways that
those institutions themselves prohibit. Their success therefore necessitates
the partial relinquishment of one set of institutions in favor of another, and
in the interim society is not fully governed by institutions at all.&lt;/p&gt;
&lt;p&gt;Initially it is crisis alone that attenuates the role of political
institutions [...] In increasing numbers, individuals become increasingly
estranged from political life, and behave more &amp;amp; more eccentrically within
it.&lt;/p&gt;
&lt;p&gt;Then, as the crisis deepens, many individuals commit themselves to [...] some
new institutional framework. At that point, society is divided into competing
camps or parties, one seeking to defend the old institutional constellation,
others seeking to institute some new one.&lt;/p&gt;
&lt;p&gt;Once that polarization has occurred, &lt;em&gt;political recourse fails&lt;/em&gt;. Because
they differ about the political matrix within which political change is to be
achieved and evaluated, and acknowledge no common supra-institutional framework
for adjudication of differences, the parties to a revolutionary conflict must
finally resort to the techniques of mass persuasion, often including force."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At any point, the &lt;em&gt;boldest&lt;/em&gt; practitioners, often those with least invested in
the previous status quo, such as the relatively young, or those entering from
adjacent fields, will introduce strikingly different sets of theories. But only
now that the stage is set, amongst such distressing chaos, is the community
ready to entertain truly revolutionary ideas.&lt;/p&gt;
&lt;p&gt;Occasionally, one of these new ideas will succeed in explaining all the
observations, but in order to do so, it requires incommensurable changes in the
underlying philosophy of the field, from the axiomatic definitions, to the set
of questions that are valid to ask. One can no longer ask, of a spherical
Earth, "What happens if you fall off?"&lt;/p&gt;
&lt;p&gt;Notably, many revolutionary changes are not an unalloyed good. Gains in
explicative power in one area are often balanced by losses elsewhere.&lt;/p&gt;
&lt;p&gt;As in evolution, the new theory is not necessarily more &lt;em&gt;correct&lt;/em&gt;, so much as
it is a better fit for the current circumstances, i.e. providing greater
predictive power in an area that is currently pertinent. Maybe scientific
progress is more obviously useful to society in that area, or instruments are
more capable of making measurements in that area. The two often coincide,
since influences are are unable to detect or manipulate are also unlikely to
be of much direct use to society. So as the social and technological context
evolves, so does the relative fitness of potential competing paradigms.&lt;/p&gt;
&lt;p&gt;Nobody understands this trade-off more deeply than the field's most
invested practitioners, who feel the losses of losing the old model most
keenly, and therefore may resist the new paradigm for the remainder of their
careers. The new paradigm will not achieve total dominance until the field is
populated by a whole new generation.&lt;/p&gt;
&lt;p&gt;I am reminded of the dark priesthood of command-line programmers, although
I note with no little joy that our merry band includes some of the best and
brightest of the next generation (as judged by my own paradigm's criteria.)&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>politics</category><category>science</category><category>writing</category><guid>https://www.tartley.com/posts/the-structure-of-scientific-revolutions/</guid><pubDate>Sun, 14 Jun 2020 14:02:22 GMT</pubDate></item><item><title>Format Python Snippets with Black.</title><link>https://www.tartley.com/posts/format-python-snippets-with-black/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;Black, the opinionated Python code formatter, can easily be invoked from your
editor to reformat a whole file. For example, from Vim:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;" Black(Python) format the whole file&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;b&lt;/span&gt; :&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;$&lt;span class="p"&gt;!&lt;/span&gt;black &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;-&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But often you'd like to reformat just a section of the file, while leaving
everything else intact. In principle, it's easy to tell Vim to just send the
current visual selection:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;" Black(Python) format the visual selection&lt;/span&gt;
xnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;b&lt;/span&gt; :&lt;span class="p"&gt;!&lt;/span&gt;black &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;-&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;(Note that both the above Vim configuration snippets map the same key
sequence -- leader (commonly comma) followed by lower case b. These can be
defined simultaneously, because the second one uses 'xnoremap', meaning it is
used only while a visual selection exists, while the first uses 'nnoremap', so
is used all other times.)&lt;/p&gt;
&lt;p&gt;But if the given code starts with an indent on the first line, for example if
it comes from lines in the middle of a function, then this won't work. Black
parses the given code into a Python abstract syntax tree (AST), and a leading
indent is a syntax error - it's just not valid Python.&lt;/p&gt;
&lt;p&gt;I filed a hopeful &lt;a href="https://github.com/psf/black/issues/1352"&gt;issue with Black&lt;/a&gt;,
suggesting they could handle this case, but it was a long shot and hasn't
gained much enthusiasm.&lt;/p&gt;
&lt;p&gt;So, I present a tiny Python3 wrapper, &lt;em&gt;enblacken&lt;/em&gt;, which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unindents the given code such that the first line has no indent.&lt;/li&gt;
&lt;li&gt;Passes the result to Black.&lt;/li&gt;
&lt;li&gt;Reindents Black's output, by the same amount as the original unindent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://github.com/tartley/dotfiles/blob/master/other/bin/enblacken"&gt;enblacken on github&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>software</category><guid>https://www.tartley.com/posts/format-python-snippets-with-black/</guid><pubDate>Tue, 09 Jun 2020 19:36:58 GMT</pubDate></item><item><title>LXD for Development Environments.</title><link>https://www.tartley.com/posts/lxd-for-dev-env/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://twitter.com/hjwp/status/1249636076660174849"&gt;@hjwp asks&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would be interested in seeing some example lxd config files,
bash command history when creating, etc?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here goes then.&lt;/p&gt;
&lt;p&gt;I have one LXD container running for each nontrivial development project I'm
working on.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ lxc ls
&lt;span class="p"&gt;|&lt;/span&gt;    NAME     &lt;span class="p"&gt;|&lt;/span&gt;  STATE  &lt;span class="p"&gt;|&lt;/span&gt;        IPV4         &lt;span class="p"&gt;|&lt;/span&gt; IPV6 &lt;span class="p"&gt;|&lt;/span&gt;   TYPE    &lt;span class="p"&gt;|&lt;/span&gt; SNAPSHOTS &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; devicegw    &lt;span class="p"&gt;|&lt;/span&gt; RUNNING &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;.44.99.228 &lt;span class="o"&gt;(&lt;/span&gt;eth0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; CONTAINER &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; ident       &lt;span class="p"&gt;|&lt;/span&gt; RUNNING &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;.44.99.4 &lt;span class="o"&gt;(&lt;/span&gt;eth0&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; CONTAINER &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; revs        &lt;span class="p"&gt;|&lt;/span&gt; RUNNING &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;.44.99.151 &lt;span class="o"&gt;(&lt;/span&gt;eth0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; CONTAINER &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; siab        &lt;span class="p"&gt;|&lt;/span&gt; RUNNING &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;.44.99.128 &lt;span class="o"&gt;(&lt;/span&gt;eth0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; CONTAINER &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; tartley-com &lt;span class="p"&gt;|&lt;/span&gt; RUNNING &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;.44.99.161 &lt;span class="o"&gt;(&lt;/span&gt;eth0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; CONTAINER &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Out of the gate we see one source of confusion. "LXD", the daemon, is a
newer project that builds on top of "LXC" the containers. However the user
interface to all the new LXD-goodness is through a command-line called "lxc",
which replaces the older command line tool called "lxd". :-/&lt;/p&gt;
&lt;p&gt;To create a new one:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; lxc launch ubuntu:16.04 -p default -p jhartley demo
Creating demo
Starting demo
real    0m9.593s
&lt;/pre&gt;
&lt;p&gt;Once created, they take about 3 seconds to stop and 0.5 seconds to start.&lt;/p&gt;
&lt;p&gt;Those "-p" options cause the container to use two &lt;em&gt;profiles&lt;/em&gt;. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;default&lt;/em&gt; profile, which I've never touched. It's just doing whatever it
   always does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;jhartley&lt;/em&gt; profile, I created in a one-off step by running a Bash script
   derived from instructions one of my colleagues passed around. I'll describe
   it at the end.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once a new container is up, we can execute commands directly on it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ lxc &lt;span class="nb"&gt;exec&lt;/span&gt; demo hostname
demo
$ lxc &lt;span class="nb"&gt;exec&lt;/span&gt; demo whoami
root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or SSH to them using their IP address:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;jhartley@t460 $ lxc ls demo
&lt;span class="p"&gt;|&lt;/span&gt; NAME &lt;span class="p"&gt;|&lt;/span&gt;  STATE  &lt;span class="p"&gt;|&lt;/span&gt;        IPV4         &lt;span class="p"&gt;|&lt;/span&gt; IPV6 &lt;span class="p"&gt;|&lt;/span&gt;   TYPE    &lt;span class="p"&gt;|&lt;/span&gt; SNAPSHOTS &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; demo &lt;span class="p"&gt;|&lt;/span&gt; RUNNING &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;.44.99.162 &lt;span class="o"&gt;(&lt;/span&gt;eth0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; CONTAINER &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt;
jhartley@t460 $ ssh &lt;span class="m"&gt;10&lt;/span&gt;.44.99.162
...
Warning: Permanently added &lt;span class="s1"&gt;'10.44.99.162'&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
Welcome to Ubuntu &lt;span class="m"&gt;16&lt;/span&gt;.04.6 LTS &lt;span class="o"&gt;(&lt;/span&gt;GNU/Linux &lt;span class="m"&gt;5&lt;/span&gt;.4.0-25-generic x86_64&lt;span class="o"&gt;)&lt;/span&gt;
jhartley@demo $
&lt;/pre&gt;
&lt;p&gt;Better than using IP addresses, you can run a DNS server to recognize
&lt;code&gt;{containername}.lxd&lt;/code&gt; hostnames. (This part is from
&lt;a href="https://discuss.linuxcontainers.org/t/a-way-to-resolve-container-lxd-from-host-in-all-cases/3698"&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Find your lxd bridge IPv4 address&lt;/p&gt;
&lt;pre class="code literal-block"&gt;lxc network show lxdbr0
&lt;/pre&gt;
&lt;p&gt;Create file &lt;code&gt;/etc/systemd/network/lxd.network&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Match]&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;lxdbr0&lt;/span&gt;

&lt;span class="k"&gt;[Network]&lt;/span&gt;
&lt;span class="na"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;IPADDR/24&lt;/span&gt;
&lt;span class="na"&gt;DNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;IPADDR&lt;/span&gt;
&lt;span class="na"&gt;Domains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;~lxd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where IPADDR is the lxdbr0 IPv4 address.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; systemd-networkd
sudo reboot now
&lt;/pre&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;jhartley@t460 $ ssh demo.lxd
jhartley@demo $ &lt;span class="c1"&gt;# \o/&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;One nice thing is that DNS works both from the host and on the containers,
so your services can be configured by default to talk to each other at
SERVICE1.lxd, SERVICE2.lxd. Then running them in containers on your host
they would just find each other. We don't actually do this, but it seems
trivially easy to do. I should ask why we don't.&lt;/p&gt;
&lt;p&gt;In practice I wrap up the ssh command with my accumulated foibles:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;jhartley@demo $ &lt;span class="nb"&gt;type&lt;/span&gt; -a lssh
lssh is a &lt;span class="k"&gt;function&lt;/span&gt;
lssh &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xterm-color ssh -A -t &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.lxd"&lt;/span&gt; -- &lt;span class="s2"&gt;"cd &lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exec &lt;/span&gt;&lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="s2"&gt; -l"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I forget why -A and -t were required. The rest is mostly just to start the
shell on the container in the same directory as I was in on the host. There
is probably a simpler way.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The booooooring bits:&lt;/p&gt;
&lt;p&gt;When we started the container, we mentioned
&lt;a href="https://www.tartley.com/files/2020/setup-lxd-profile.sh"&gt;a one-off setup script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The script does a few things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creates a new key pair specifically to SSH to the container.&lt;/li&gt;
&lt;li&gt;Creates the custom &lt;em&gt;jhartley&lt;/em&gt; profile, which causes all containers started
   with it to:&lt;/li&gt;
&lt;li&gt;Create a new user on the container with user and group ID mapped to
      those of my user on the host, presumably so that file permissions work
      for...&lt;/li&gt;
&lt;li&gt;Mount my $HOME directory on the container. Might not always be what you
      want, but works for me right now.&lt;/li&gt;
&lt;li&gt;Doubtless due to my own misunderstanding somewhere, in order to get working
   IPv4 connections to my containers, I had to disable IPv6 connections to
   them.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>geek</category><category>linux</category><category>software</category><guid>https://www.tartley.com/posts/lxd-for-dev-env/</guid><pubDate>Mon, 20 Apr 2020 18:57:47 GMT</pubDate></item><item><title>Dina font as an OTF.</title><link>https://www.tartley.com/posts/dina-as-otf/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;The Dina font, converted to an OpenType Font (see screenshots at the bottom of
the page):&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.tartley.com/files/2020/Dina-v2.93-otf.tar.gz"&gt;&lt;span class="emoji"&gt;📦&lt;/span&gt; Dina-v2.93-otf.tar.gz&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://gitlab.gnome.org/GNOME/pango/issues/386"&gt;Pango dropped support for naive bitmap fonts&lt;/a&gt;
in v1.44 -- i.e. from Ubuntu 20.04, &lt;em&gt;Focal&lt;/em&gt;, onwards.&lt;/p&gt;
&lt;p&gt;So all bitmap fonts need to be converted into a format that will render,
ie. a vector format such as OpenType that allows bitmaps to be embedded.
(Not a conversion of the bitmap into an outline, losing the advantages of
the crisp, tiny bitmaps.)&lt;/p&gt;
&lt;p&gt;For most bitmap fonts, this conversion will be done for you, by packagers
or font authors.&lt;/p&gt;
&lt;p&gt;But you'll need to do it yourself for any peripheral fonts that you love
more than your distribution does. Here's how I did it for my
&lt;a href="http://www.dcmembers.com/jibsen/download/61/"&gt;beloved Dina&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;1. Identify the font file.&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;fc-list &lt;span class="p"&gt;|&lt;/span&gt; grep Dina
&lt;/pre&gt;
&lt;h3&gt;2. Convert.&lt;/h3&gt;
&lt;p&gt;Use either command line tools, or fontforge.&lt;/p&gt;
&lt;h4&gt;2.1 Using fontforge&lt;/h4&gt;
&lt;p&gt;A GUI tool.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open up fontforge, paste the font path in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File / generate fonts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Left dropdown: "OpenType (CFF)"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Right dropdown: "In TTF/OTF"&lt;/li&gt;
&lt;li&gt;Generate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The results have some problems. I'm using it in gnome-terminal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People converting other fonts report issues with ugly gaps between
  characters. But I don't see that, perhaps because it's a monospace font?&lt;/li&gt;
&lt;li&gt;The converted font is invisible in font selection dialogs, making it look
  like the process did not work. But once selected, by clicking around blindly,
  then the font displays fine in applications.&lt;/li&gt;
&lt;li&gt;Using a font size which is not defined in the font displays a blank terminal,
  instead of falling back to some other font.&lt;/li&gt;
&lt;li&gt;Using ctrl-+/- to select font sizes cycles through three of the four
  defined sizes. I don't know why it skips one. But all four are usable if
  you explicitly select a size.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.2 Using command-line tools&lt;/h3&gt;
&lt;p&gt;The process is described at
https://fedoraproject.org/wiki/BitmapFontConversion.&lt;/p&gt;
&lt;p&gt;Ubuntu's released version of fonttosfnt (1.0.4) produces unusable results:
* Only the 1st and 2nd smallest font sizes are preserved.
* In the 2nd smallest size, all variations are too bold, so that 'bold'
  variations look 'double-bold'. (Italics looks really ugly too, this may
  just be a result of the enboldening.)&lt;/p&gt;
&lt;p&gt;TODO: Consider trying the latest fonttosfnt (1.1.0)
https://gitlab.freedesktop.org/xorg/app/fonttosfnt
or at least filing an issue there to try and get some help.&lt;/p&gt;
&lt;h3&gt;3. Install&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Copy to &lt;code&gt;~/.local/share/fonts&lt;/code&gt; (or &lt;code&gt;~/.fonts&lt;/code&gt;, right?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fc-cache -f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The result&lt;/h3&gt;
&lt;p&gt;I know, it doesn't look like much.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.tartley.com/files/2020/terminal-dina-small-ll.png"&gt;&lt;/p&gt;
&lt;p&gt;But compare it with a regular vector font. Here's Ubuntu Mono, the &lt;em&gt;best&lt;/em&gt; of
the vector fonts I could find at these sizes. Blurry and inconsistent and hard
to read:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.tartley.com/files/2020/terminal-ubuntumono-small-ll.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>fonts</category><category>linux</category><guid>https://www.tartley.com/posts/dina-as-otf/</guid><pubDate>Wed, 05 Feb 2020 20:51:33 GMT</pubDate></item><item><title>Conky.</title><link>https://www.tartley.com/posts/conky/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;In the typical mad-scientist thrills-per-minute that is the Linux way,
adding a CPU meter to my desktop involved crafting
&lt;a href="https://www.tartley.com/files/2020/conky.conf"&gt;my own conky configuration file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As always, building your own is a chore that crops up when you least expect
it. But on the other hand, the opportunity for functional and aesthetic
work results in something artisnally crafted to exactly meet your own personal
needs. Something you can feel a little pride about. An elegant weapon,
for a more... civilized age.&lt;/p&gt;
&lt;p&gt;&lt;img alt="An elegant weapon, for a more... civilised age." src="https://www.tartley.com/files/2020/conky.jpg"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><guid>https://www.tartley.com/posts/conky/</guid><pubDate>Wed, 15 Jan 2020 22:09:13 GMT</pubDate></item><item><title>Vonnegut on software development teams.</title><link>https://www.tartley.com/posts/vonnegut-on-software-development-teams/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;So here's a thing. Spotted this in some of Kurt Vonnegut's personal
correspondence, talking about an instructor of his named Slotkin:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What Slotkin said was this: no man who achieved greatness in the arts operated
by himself; he was top man in a group of like-minded individuals. This works
out fine for the cubists, and Slotkin had plenty of good evidence for its
applying to Goethe, Thoreau, Hemingway, and just about anybody you care to
name.&lt;/p&gt;
&lt;p&gt;If this isn't 100% true, it's true enough to be interesting—and maybe helpful.&lt;/p&gt;
&lt;p&gt;The school gives a man, Slotkin said, the fantastic amount of guts it takes to
add to culture. It gives him morale, esprit de corps, the resources of many
brains, and—maybe most important—one-sidedness with assurance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reminds me powerfully of my growing impressions of the environment a person
needs to be in in order to do great things in software. There is no doubt some
effectiveness in assembling great individuals to create a great team.&lt;/p&gt;
&lt;p&gt;But in my personal experience, there is a whole lot &lt;em&gt;more&lt;/em&gt; value in creating a
great team by instilling the right values, and then watching the members
visibly level each other up, producing a succession of great individuals,
and only subsequently attracting more of the same.&lt;/p&gt;&lt;/div&gt;</description><category>todo</category><guid>https://www.tartley.com/posts/vonnegut-on-software-development-teams/</guid><pubDate>Mon, 01 Jul 2019 02:28:04 GMT</pubDate></item></channel></rss>