<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com</title><link>https://www.tartley.com/</link><description>A website devoted to oneself has been described — by my own Father, no less — as the greatest act of hubris. Welcome aboard!</description><atom:link href="https://www.tartley.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:tartley @ tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Mon, 21 Oct 2024 15:47:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TIL: Constructing a PDF from .jpg image files</title><link>https://www.tartley.com/posts/til-constructing-a-pdf-from-jpg-image-files/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;I have some folders of .jpg images that make up a comic. I want to convert them into a PDF to read
on my tab and other devices, and import into by bookshelf in Calibre.&lt;/p&gt;
&lt;h3&gt;0. Install some prerequisites&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;imagemagick&lt;span class="w"&gt; &lt;/span&gt;pdftk
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The versatile ImageMagick has a 'convert' command that seems to handle it:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;convert&lt;span class="w"&gt; &lt;/span&gt;*.jpg&lt;span class="w"&gt; &lt;/span&gt;output.pdf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this has some issues:&lt;/p&gt;
&lt;h3&gt;1. Convert security policy denies handling PDF files&lt;/h3&gt;
&lt;p&gt;'convert' currently refuses to generate PDFs: 'attempt to perform an operation not allowed by the security policy'. Apply the fix described on &lt;a href="https://stackoverflow.com/questions/52998331/imagemagick-security-policy-pdf-blocking-conversion"&gt;StackOverflow&lt;/a&gt;. :eyeroll:&lt;/p&gt;
&lt;h3&gt;2. Convert barfs on running out of disk cache&lt;/h3&gt;
&lt;p&gt;Don't close that editor! In the same policy.xml you were just editing are resource size declarations for memory and disk. If convert barf with an error about running out of cache space, then bump
up the disk resource size. I set mine to 8GB. &lt;a href="https://unix.stackexchange.com/questions/329530/increasing-imagemagick-memory-disk-limits"&gt;StackOverflow again&lt;/a&gt; for details. :eyeroll: again.&lt;/p&gt;
&lt;p&gt;You might not need this fix if you generate the document chapter-by-chapter as described below,
but here it is in case.&lt;/p&gt;
&lt;h3&gt;3. Including a table of contents&lt;/h3&gt;
&lt;p&gt;I want to add bookmarks to the generated PDF marking each chapter.&lt;/p&gt;
&lt;p&gt;Put the .jpgs into subdirectories by chapter:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;src/
|--chapter01/
|  |--0001.jpg
|  |--0002.jpg
|  |  ...
|--chapter02/
|  |--0001.jpg
|  |--0002.jpg
|  |  ...
|
...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I ended up regenerating each chapter a bunch while I tweaked the content, such as deleting adverts
from the images. So I put these commands into a Makefile:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;## Show this help.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;@grep&lt;span class="w"&gt; &lt;/span&gt;-E&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'^[^_][a-zA-Z_\/\.%-]+:.*?## .*$$'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;MAKEFILE_LIST&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-12s\033[0m %s\n", $$1, $$2}'&lt;/span&gt;
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;

&lt;span class="nv"&gt;chapter_dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;src/*&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;chapters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;chapter_dirs:src/%&lt;span class="o"&gt;=&lt;/span&gt;%&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;chapter_pdfs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;chapters:%&lt;span class="o"&gt;=&lt;/span&gt;%.pdf&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;bookmarks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bookmarks.txt
&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;output.pdf

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;## Delete all generated PDFs&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;chapter_pdfs&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;output&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;

&lt;span class="nf"&gt;chapter%.pdf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;/&lt;span class="n"&gt;chapter&lt;/span&gt;%/*.&lt;span class="n"&gt;jpg&lt;/span&gt; &lt;span class="c"&gt;## Each individual chapter, use 2 digits&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;convert&lt;span class="w"&gt; &lt;/span&gt;src/chapter&lt;span class="nv"&gt;$*&lt;/span&gt;/*.jpg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;$(bookmarks)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;chapter_pdfs&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;./make-bookmarks&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="k"&gt;$(&lt;/span&gt;bookmarks&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(output)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;chapter_pdfs&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;bookmarks&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;pdftk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;chapter_pdfs&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;pdftk&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;update_info&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;bookmarks&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;output&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="c"&gt;## Build final output PDF&lt;/span&gt;
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code&gt;make all&lt;/code&gt; will produce the final output.pdf. You might want to open up the generated
bookmarks.txt and edit the placeholder "chapter01" names. Then run &lt;code&gt;make all&lt;/code&gt; again to
regenerate the final output PDF with your fixed chapter names.&lt;/p&gt;</description><category>bash</category><category>comics</category><category>geek</category><category>linux</category><category>terminal</category><category>til</category><guid>https://www.tartley.com/posts/til-constructing-a-pdf-from-jpg-image-files/</guid><pubDate>Mon, 21 Oct 2024 14:55:18 GMT</pubDate></item><item><title>TIL: Shell environment variable tricks</title><link>https://www.tartley.com/posts/til-shell-environment-variable-tricks/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;code&gt;envsubst&lt;/code&gt; is an executable you likely already have on your PATH (part of the gettext package, often
installed with dev packages), which is a convenient way to replace &lt;code&gt;$VAR&lt;/code&gt; or &lt;code&gt;${VAR}&lt;/code&gt; style
environment variables with their values. This allows rendering templates without heavyweight
tools like Ansible, Jinja, or embedding with heredocs. Usage is:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;envsubstr &amp;lt;template &amp;gt;rendered
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;envsubstr&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
Hello&lt;span class="w"&gt; &lt;/span&gt;jonathan
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you'd like to use KEY=value declarations from a dotenv-style &lt;code&gt;.env&lt;/code&gt; file, you can auto-export
them by setting the &lt;code&gt;-a&lt;/code&gt; Bash option:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;set -a; source .env; set +a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Something I've managed to avoid ever realizing for 30 years, but now that I've seen it I can't
imagine a week going by without using it. The kind of thing that should be part of everyone's "Week
1 in a terminal" training that formal education courses never include.&lt;/p&gt;</description><category>bash</category><category>geek</category><category>linux</category><category>software</category><category>terminal</category><category>til</category><guid>https://www.tartley.com/posts/til-shell-environment-variable-tricks/</guid><pubDate>Thu, 03 Oct 2024 20:37:27 GMT</pubDate></item><item><title>Ferris Bueller's Day Off</title><link>https://www.tartley.com/posts/ferris-buellers-day-off/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Ben Stein in Ferris Bueller's Day Off" src="https://www.tartley.com/files/2023/ferris-bueller.webp"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Directed and written by John Hughes, 1986.&lt;/em&gt; &lt;a href="https://www.imdb.com/title/tt0091042"&gt;IMDB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, way back in my teen years, we had a VHS tape of this, which friends and I
played and played and played, probably racking up more rewatches than any other
movie in my life. So it was a pleasure to break it out for our 11 year-old,
some some 37 years later (!), to see whether it still holds up, and find that
it really does.&lt;/p&gt;
&lt;p&gt;By chance this was the week after we'd just watched &lt;em&gt;The Blues Brothers&lt;/em&gt;, so we
got to compare and contrast two movies set in Chicago - a privileged white
story, and a poverty stricken, largely colored one, which even share scenes
filmed in the very same restaurant.&lt;/p&gt;
&lt;p&gt;Back then, I had no idea who Ben Stein was, so it was amusing to see him now
and suddenly join the dots. Apparently his infamous "voodoo economics" speech
had no script and was ad-libbed.&lt;/p&gt;
&lt;p&gt;Reviewing Rooney's comical attempts to break into the Buellers' house made me
realize for the first time that this was Hughes' dry-run at what would become
&lt;em&gt;Home Alone&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I had always been frustrated that I'd never been able to lay my hands on the
"&lt;em&gt;You're not dying&lt;/em&gt;" song that Cameron plays while sick in his bedroom (i.e. here's the few seconds
of it
&lt;a href="https://www.youtube.com/watch?v=6mcFGW0RjAo&amp;amp;t=70s&amp;amp;autoplay=1"&gt;on Youtube&lt;/a&gt;,
exactly as it appears in the movie.)&lt;/p&gt;
&lt;p&gt;Now we have the Internet, I can see that this failure wasn't exactly my fault -
there is no such song. The few bars we hear were whipped up by Ira Newborn
specially for the film, based on an old Louis Armstrong song,
&lt;a href="https://youtu.be/fHbC8Nhd46s?autoplay=1"&gt;&lt;em&gt;Let My People Go&lt;/em&gt;&lt;/a&gt;. Fortunately for us,
one man was obsessed about it enough to actually recreate a full length
song based on the snippets from the movie. Here is Daniel Simone's
&lt;a href="https://youtu.be/MDEXlOk_suM?autoplay=1"&gt;Let My Cameron Go&lt;/a&gt;,
full of a lush Pink Floyd sound, and ripe with the sort of ecstatic
anticipation that even Roger Waters would be proud of.&lt;/p&gt;
&lt;p&gt;Duly &lt;a href="https://www.tartley.com/posts/download-audio-from-youtube/"&gt;added to my rotation&lt;/a&gt; for next time I'm sick.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: left"&gt;&lt;br&gt;&lt;/p&gt;</description><category>comedy</category><category>fiction</category><category>media</category><category>movie</category><guid>https://www.tartley.com/posts/ferris-buellers-day-off/</guid><pubDate>Wed, 27 Sep 2023 15:01:22 GMT</pubDate></item><item><title>Resolution and The Endless</title><link>https://www.tartley.com/posts/resolution-and-the-endless/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;img alt="Resolution" src="https://www.tartley.com/files/2023/resolution.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imdb.com/title/tt1977895"&gt;&lt;em&gt;Resolution (2012)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="The Endless" src="https://www.tartley.com/files/2023/the-endless.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imdb.com/title/tt3986820"&gt;&lt;em&gt;The Endless (2017)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I only had a hazy awareness of Justin Benson and Aaron Moorhead, the writer
and directors, before watching these movies. But having discovered them, I now
realize that they are doing just about my favorite thing in film: Quirky,
intense, psychological drama wound around some high concept science fiction.&lt;/p&gt;
&lt;p&gt;Going in, I hadn't realized the two films are related. But then they contain
the same scene, viewed from two different angles (pictured above), and it
starts to become clearer. As it happens, I watched them out of order - my
enthusiasm for &lt;em&gt;The Endless&lt;/em&gt; caused me to look up their earlier &lt;em&gt;Resolution&lt;/em&gt;.
But with hindsight, I think this is actually the best order to view them. If
&lt;em&gt;Resolution&lt;/em&gt; has a weakness, it's that the science fictional elements seem a
bit arbitrary. Why should this supernatural entity focus its narrative-obsessed
attentions on these two men, here in this cabin, out in the middle of nowhere?
But in &lt;em&gt;The Endless&lt;/em&gt;, this particular brand of supernatural outlandishness is
revealed to be just part of a wider pattern, affecting many people in this
geographical area. Although this is the bigger, weirder story, it is more fully
fleshed out and becomes more believable, creating a setting which
recontextualizes and improves the earlier film.&lt;/p&gt;
&lt;p&gt;Rating: 10/10 if you like mindbending SF horror, 0/10 if you prefer something a
bit more polished and comfortable.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description><category>fiction</category><category>media</category><category>movie</category><category>science-fiction</category><guid>https://www.tartley.com/posts/resolution-and-the-endless/</guid><pubDate>Fri, 22 Sep 2023 19:12:24 GMT</pubDate></item><item><title>Aurora</title><link>https://www.tartley.com/posts/aurora/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Aurora cover" src="https://www.tartley.com/files/2023/aurora.webp"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Kim Stanley Robinson, 2015&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It has long been held by fans of science fiction that &lt;em&gt;fantasy&lt;/em&gt; is a lowly
subset of science-fiction, or perhaps a disreputable cousin, one for whom
the normal rules of discernment do not apply. If such unlikely and unrealistic
things as dragons and magic are allowed, the reasoning goes, then the book
cannot be relied upon to deliver any kind of coherent narrative experience,
since the lapsed rule-set now allows for any old &lt;em&gt;ex machina&lt;/em&gt; plot twists to
save the day. A magical "defeat the evil" spell? No problem. A new mythical
creature capable of defeating the previously unassailable one? Why not? All
reason is gone.&lt;/p&gt;
&lt;p&gt;It's more useful though, is to invert the hierarchy of this received wisdom,
and consider science fiction as a subset of fantasy. Mentioning this in fandom
circles blows mental fuses. Does not compute. But the speculative flights of
science fiction are also fantasies. Just fantasies that a particular type of
person finds especially beguiling, compelling, and believable. To some extent,
I concede that on occasion they are believable because they seem to be a
reasonable extrapolation of our current situation. But no matter how reasonable
your extrapolation seems to be, it's always possible that reality will zig
instead of zag, and even the most humdrum tale of a rocket man's life will
find itself at odds with the unexpected reality of suspended human spaceflight
in the face of spiraling real-world costs. The vision that one is selling is
always, to a greater or lesser extent, a wishful one - a &lt;em&gt;fantasy&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This becomes immediately apparent once we stray beyond the confines of low
Earth orbit, to take in the wider scope of science fiction, the vast majority
of which encompasses tales across the galaxy, nay, the universe, including time
travel, teleportation booths, aliens of every color, quantum reality
displacement, and multiversal escapades in which literally everything is
possible. These are very clearly fantasies, and it is intensely curious to me
why this sort of fantasy is considered more "realistic" or "believable" than,
say, flying lizards with fiery breath. Even though the narrative hand-waving
that explains away the former - "It's an alternate &lt;em&gt;universe&lt;/em&gt;, where different
rules apply" - is abundantly adequate to more than completely explain anything
in the fantasy realm.&lt;/p&gt;
&lt;p&gt;I once asked my guru science fiction critic &lt;a href="https://damiengwalter.com/podcast/"&gt;Damien
Walter&lt;/a&gt; what makes people consider some
stories believable, while other are not. He replied with a statement that has
stuck with me ever since: People are willing to invest the effort to provide
the conceptual scaffolding around an idea to make it seem believable (e.g. to
speculate on the mechanism that might allow for a faster-than-light
hyper-drive) &lt;em&gt;when the story fulfills some deeper psychological need for them&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hence, a story on the same topic as &lt;em&gt;Aurora&lt;/em&gt;, of a generation ship sent to
colonize an Earth-like planet orbiting the nearby star of Tau Ceti, is
(usually) a story about the triumph of modernism. Such stories leverage the
sources of strength in the modern world, science and technology and
&lt;em&gt;colonialism&lt;/em&gt;, and a reader who is invested in a modern world-view will feel
validated and empowered by this type of fantasy. They will be will be willing
to exercise whatever extracurricular creative effort is required on the part of
the reader to make the story believable. Doing so will inspire them with the
feeling that their world all makes sense, is leading to something, so that
their daily grind is a part of the heroic story of how humanity transcends its
planetary origins. This is much more fulfilling than investing any effort
getting on board with the waning powers of superstition that are represented by
the fantasy genre.&lt;/p&gt;
&lt;p&gt;&lt;span style="background:#bb2200; color:white; border-radius: 1em; padding-left: 0.5em; padding-right: 0.5em; padding-top: 2px;"&gt;&lt;b&gt;spoilers&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In keeping with this, Aurora's colonists are granted every conceivable boon
that science and industry can supply. A ship fully ten kilometers across,
enclosing twenty four massive biomes, each stuffed full of hills and lakes,
soil and forests, microbes and wildlife. A population of well over a thousand
human beings. Miraculous nanotech fabricators, and megatons of elemental
feedstock to run them. A miraculous acceleration laser, fired from Titan for
decades after departure, allowing the ship to coast up to 0.1c, making the
journey in only seven generations, while retaining enough fuel to decelerate
for arrival. A miraculous magnetic shield protects the ship from catastrophic
collisions with stray particles along the way. A benign AI runs the ship,
amusingly pressed into service as the narrator of the tale, and grows visibly
more sentient, emotionally robust and capable as the years pass.&lt;/p&gt;
&lt;p&gt;And hot damn, they are going to &lt;em&gt;need&lt;/em&gt; all these things, because in this story,
human interstellar colonization is revealed for the fantasy it really is.
Nothing works out, and the problems encountered are far bigger than anything
the ship's designers planned for. Although the ship does limp into orbit
around the destination planet, soon after that people start dying, major
disagreements emerge which descend into catastrophic riots, and the ship's
society falls apart - when have humans ever invented a reliable form of
governance?&lt;/p&gt;
&lt;p&gt;There is a rip-roaring final act, that stretched my credulity, but revives the
stakes and entertainment value in what might otherwise be a relentless downer
of a read.&lt;/p&gt;
&lt;p&gt;The book, and interviews with the author, caused quite a stir in science
fiction circles. People were extremely angry. The book was attacking their
deeply held beliefs that the future of humanity is as a successfull
space-faring species. They had invested their identity in this world-view,
because of how it serviced their psychological needs for fulfillment and
meaning. They had developed a religious conviction around this particular kind
of fantasy.&lt;/p&gt;
&lt;p&gt;The point of Aurora is to highlight the idea of human interstellar colonization
as a dangerous distraction from the very real project of taking care of the
long term health of our planet and our society right here on Earth. It is going
to take &lt;em&gt;beyond&lt;/em&gt; miraculous levels of technology and resources to start
thinking about interstellar travel. If, by some miracle, we make it to a year
10,000 utopia, with infinite resources and the wisdom to manage them, then
sure, we can worry about interstellar travel. But for now, can we just focus on
some of the very basic problems of existence here on Earth, like how to make
everyone fed and liberated, educated and fulfilled, without killing our planet
to do it? Maybe invent some sort of government that is reliably able to do
that? That would be nice.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: left"&gt;&lt;/p&gt;</description><category>book</category><category>fiction</category><category>media</category><category>novel</category><category>science-fiction</category><guid>https://www.tartley.com/posts/aurora/</guid><pubDate>Thu, 21 Sep 2023 20:29:16 GMT</pubDate></item><item><title>Fully Operational</title><link>https://www.tartley.com/posts/fully-operational/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;Now witness the power of this fully armed and operational battle station.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My desk featuring too many computers" src="https://www.tartley.com/files/2023/desk-with-computers.webp"&gt;&lt;/p&gt;
&lt;p&gt;New job means new laptop means it's time to clean and re-org the desk.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Leftmost blue skies&lt;/dt&gt;
&lt;dd&gt;Linux laptop (a free hand-me-down from a job ten years ago). Acting as the
house Plex / streaming media server, usually tucked away more discreetly than
this.&lt;/dd&gt;
&lt;dt&gt;Left top green forest&lt;/dt&gt;
&lt;dd&gt;Heavy duty work / gaming Linux laptop ("hardware bonus" from my last
employer). Has been my primary work machine, but sounds like it's getting
replaced by...&lt;/dd&gt;
&lt;dt&gt;Left bottom spaceship drawing&lt;/dt&gt;
&lt;dd&gt;Macbook Pro (Brand new! Just unwrapped yesterday. Thank you new employer
&lt;a href="https://lambdalabs.com"&gt;Lambda&lt;/a&gt;!) Looks like this means I'm returning to
developing on a Mac and VMs, after a full decade on Ubuntu &amp;amp; derivatives.
I'm told Docker for Desktop now behaves better than it used to.&lt;/dd&gt;
&lt;dt&gt;Left bottom, under the Mac&lt;/dt&gt;
&lt;dd&gt;You can sort of see the 10" whiteboard I use to combat ADHD by writing a
sentence about what I'm &lt;em&gt;supposed&lt;/em&gt; to be working on, then I can spot it every
few minutes and drag my mind back to the task in hand. (a technique described
in the fabulous
&lt;a href="https://gamkedo.gumroad.com/l/self-command/"&gt;Self Command by Chris DeLeon&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;Center&lt;/dt&gt;
&lt;dd&gt;Main monitor and wireless tenkeyless mechanical keyboard &amp;amp; mouse combo, all
switchable to any of the laptops. Under the keyboard you can sort-of see the
&lt;a href="https://ultrapro.com/collections/gaming-accessories-magic-the-gathering/type_playmat"&gt;Magic the Gathering 13x24" gaming mat&lt;/a&gt;
(free from local gaming store's MtG lessons) pressed into duty as the world's
most gigantic, beautiful, and luxurious mouse mat.&lt;/dd&gt;
&lt;dt&gt;Right monitor, keyboard and mouse&lt;/dt&gt;
&lt;dd&gt;are wired to the Windows gaming PC under the desk (not visible). The kiddo's
current &lt;a href="https://store.steampowered.com/app/361420/ASTRONEER/"&gt;Astroneer&lt;/a&gt;
session is visible. The monitor is switchable to any of the laptops.&lt;/dd&gt;
&lt;dt&gt;Right tab&lt;/dt&gt;
&lt;dd&gt;Absolute workhorse 12.6" Android tablet on which I do most of my reading,
laid in the picture here just to be gratuitous.&lt;/dd&gt;
&lt;/dl&gt;</description><category>geek</category><category>hardware</category><category>journal</category><category>keyboard</category><category>osx-dev</category><guid>https://www.tartley.com/posts/fully-operational/</guid><pubDate>Thu, 21 Sep 2023 15:51:12 GMT</pubDate></item><item><title>Dhalgren</title><link>https://www.tartley.com/posts/dhalgren/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Dhalgren cover" src="https://www.tartley.com/files/2023/dhalgren.webp"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Samuel Delaney, 1975&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It broke me. I need to take another run up to this. Advice welcome.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://localhost:8000/categories/did-not-finish/"&gt;&lt;span style="background:grey; color:white; border-radius: 1em; padding-left: 0.5em; padding-right: 0.5em; padding-top: 2px;"&gt;did-not-finish&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: left"&gt;&lt;/p&gt;</description><category>book</category><category>did-not-finish</category><category>fiction</category><category>media</category><category>novel</category><category>science-fiction</category><guid>https://www.tartley.com/posts/dhalgren/</guid><pubDate>Fri, 01 Sep 2023 18:23:19 GMT</pubDate></item><item><title>Illustrating Uses of IBM Cloud Security Groups</title><link>https://www.tartley.com/posts/illustrating-uses-of-ibm-cloud-security-groups/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;blockquote&gt;
&lt;p&gt;I wrote this high-level public-facing guide while employed by IBM, creating
the security groups feature for IBM Cloud. It
&lt;a href="https://web.archive.org/web/20210418195246/https://www.ibm.com/cloud/blog/illustrating-uses-ibm-cloud-security-groups"&gt;used to reside&lt;/a&gt;
on the IBM blog, but has recently been replaced by newer content, so I've
preserved it here for posterity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This article illustrates a few possible uses of IBM Cloud Security Groups, a
per-instance firewall for IBM Cloud virtual instances.&lt;/p&gt;
&lt;h3&gt;Why Use Security Groups?&lt;/h3&gt;
&lt;p&gt;Security groups firewall your IBM Cloud applications from nefarious network
traffic, protecting you and your company from the efforts of “industrious
users” trying to bring down your application, or make off with your customer's
credit card details. If those sound like sub-optimal outcomes for your
situation, read on…&lt;/p&gt;
&lt;h3&gt;Allow Incoming SSH Connections&lt;/h3&gt;
&lt;p&gt;The simplest use of security groups is to allow a single type of network
connection to your instances, blocking all other traffic. For example, to allow
only incoming SSH connections, which are TCP connections on port 22. All other
types of traffic, such as ICMP ‘ping' connections, or TCP connections on other
ports, are blocked. Fig 1. A security group configured to allow incoming SSH&lt;/p&gt;
&lt;p&gt;&lt;img alt="A diagram representing SSH connections being allowed from support engineer to instances within security group 1, while ping connections are denied" src="https://www.tartley.com/files/2023/ibm-cloud/1_allow-ssh-1.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig 1. A security group configured to allow incoming SSH.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When instances 1 &amp;amp; 2 are added to your security group, firewalls are created
directly on those instances,configured to allow or deny the corresponding
traffic. Hence, your support engineer can create SSH connections, but cannot
send arbitrary network traffic.&lt;/p&gt;
&lt;h3&gt;Allow SSH from a Specified IP Address&lt;/h3&gt;
&lt;p&gt;The above scenario allows SSH connection attempts from any IP address. To
increase security, you might only allow connections from a particular instance.
Fig 2. A security group configured to allow incoming SSH connections (TCP port
22) from a particular IP address.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A diagram representing SSH conections being allowed from a known IP address to instances within security group 1, while connections from a disgruntled employee at a different IP address are denied" src="https://www.tartley.com/files/2023/ibm-cloud/2_allow-ssh-one-ip.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig 2. A security group configured to allow incoming SSH connections (TCP port
22) from a particular IP address.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The security group has been configured with the IP address used by a support
engineer – the single instance that is authorized to make a connection.
Connections from other instances are blocked.&lt;/p&gt;
&lt;p&gt;As well as allowing traffic from a single IP address, security groups can be
configured with a CIDR block, to allow traffic from all instances on that
subnet. Fig 3. A security group configured to allow incoming SSH connections
(TCP port 22) from all instances on a given subnet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A diagram representing SSH conections being allowed from a known subnet to instances within security group 1, while connections from a hacker at an IP address ouside the subet are denied" src="https://www.tartley.com/files/2023/ibm-cloud/3_allow-ssh-subnet.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig 3. A security group configured to allow incoming SSH connections (TCP port
22) from all instances on a given subnet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The diagram shows instances on an authorized subnet (deploy1 &amp;amp; deploy2),
representing a project CI/CD infrastructure, all being able to make SSH
connections to our protected instances, for example to deploy updates to our
application. Other instances, such as an enterprising hacker, are blocked.&lt;/p&gt;
&lt;h3&gt;Allow Application Instances to Access a Distributed Data Store&lt;/h3&gt;
&lt;p&gt;Another use case would be to allow application servers to access the nodes of a
distributed data store. To do this, we'll make a few changes to the above
security group configuration.&lt;/p&gt;
&lt;p&gt;Firstly, we modify the open port from SSH's 22, to MongoDB's default query API
port of 27017.&lt;/p&gt;
&lt;p&gt;Secondly, security group 1 is now allowing the creation of outgoing network
connections, from our application instances, where previously it was allowing
incoming connections. Security group rules can manage traffic in either
direction.&lt;/p&gt;
&lt;p&gt;Thirdly, we don't want our data store instances to be unprotected, so we'll put
them into a security group of their own. Since there's now two security groups,
we'll give them names: “app” and “db”.&lt;/p&gt;
&lt;p&gt;For now, security group “db” allows all incoming MongoDB queries (TCP
connections on 27017), without restricting the IP addresses allowed to make
connections. We'll fix that soon. Fig 4. Two security groups configured to
allow application servers to send queries to MongoDB nodes on a subnet.&lt;/p&gt;
&lt;p&gt;&lt;img alt='A diagram representing queries from instances in security group "app" being allowed to connect to port 27017 of the subnet of instances in security group "db", which similarly allows incoming connections on TCP port 27017' src="https://www.tartley.com/files/2023/ibm-cloud/4_allow-app-servers-access-db-subnet.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig 4. Two security groups configured to allow application servers to send
queries to MongoDB nodes on a subnet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For clarity, these diagrams don't show the many connections which are blocked
by this setup - which are, of course, the whole point of security groups.
On the above diagram, blocked connections would include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On app instances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All incoming connections.&lt;/li&gt;
&lt;li&gt;Outgoing connections that aren't TCP, or are on the wrong port.&lt;/li&gt;
&lt;li&gt;Outgoing connections to anything other than a DB instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On DB instances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All outgoing connections.&lt;/li&gt;
&lt;li&gt;Incoming connections that aren't TCP, or are on the wrong port.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This setup does have a couple of problems. It relies on our MongoDB instances
all residing on a single subnet. Worse, as mentioned earlier, it allows any IP
address in the world to make queries to MongoDB. We'll fix both of these next.&lt;/p&gt;
&lt;h3&gt;Using Remote Groups to Specify Arbitrary IP Addresses&lt;/h3&gt;
&lt;p&gt;Specifying allowed instances using a CIDR block can be inappropriate. It's
often preferable to specify a set of arbitrary IP addresses instead. We can do
this by using a second security group – known as a remote group – to contain
the set of allowed instances. Our first security group can then refer to the
remote group to specify which instances are allowed.&lt;/p&gt;
&lt;p&gt;In our example above, we would modify the “app” security group by dropping the
CIDR block, and replacing it with a reference to “db” as a remote security
group.&lt;/p&gt;
&lt;p&gt;Similarly, we would modify the “db” group to use “app” as a remote group, only
allowing connections from the members of that group.&lt;/p&gt;
&lt;p&gt;&lt;img alt='A diagram representing instances in security group "app" being allowed to connect to instances in security group "db", via port 27017 only' src="https://www.tartley.com/files/2023/ibm-cloud/5_allow-app-servers-access-db-remote.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig 5. Two security groups configured to allow application servers to send
queries to MongoDB nodes using remote groups.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This has several advantages. Firstly, our data store no longer accepts
malicious queries from hackers all over the internet – only from our app
instances.&lt;/p&gt;
&lt;p&gt;Secondly, our data store instances no longer need occupy a subnet, they can
have arbitrary IP addresses.&lt;/p&gt;
&lt;p&gt;Because the security groups now specify allowed hosts by referencing each
other, when the members of either group changes, the instance level firewalling
rules on all instances are updated automatically, to allow or deny traffic
based on the new membership.&lt;/p&gt;
&lt;p&gt;This configuration starts to show what makes security groups a flexible,
dynamic, low-maintenance solution.&lt;/p&gt;
&lt;h3&gt;Accepting Web Requests&lt;/h3&gt;
&lt;p&gt;Our application instances aren't any use without a web front end. We put our
web instances into their own security group (“web”), which allows incoming
requests from users on the web, and outgoing API requests to our app instances,
on port 61516.&lt;/p&gt;
&lt;p&gt;Similarly, we need to add a second rule to the “app” security group, to allow
incoming requests from “web”. Fig 6. A traditional three-tier application using
remote security groups.&lt;/p&gt;
&lt;p&gt;&lt;img alt='A diagram representing a user connecting via port 80 to instances in security group "web", which connect to instances in group "app" via port 61516, which connect to group "db" via port 27017' src="https://www.tartley.com/files/2023/ibm-cloud/6_web-app-db.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig 6. A traditional three-tier application using remote security groups.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The more types of server we add to our setup, the more benefit “remote” groups
provide, by minimizing setup configuration, and by automatically keeping
firewalling rules up to date when group membership changes.&lt;/p&gt;
&lt;p&gt;A future blog post will discuss how to set up this three-tier scenario, and
describe details such as how to use multiple network interfaces on an instance,
such as the web instances which will use a public IP address exposed to users,
versus a private IP exposed to the API instances.&lt;/p&gt;
&lt;h3&gt;Add a Bastion&lt;/h3&gt;
&lt;p&gt;We need some way to access our servers, so that we can, for example, deploy new
versions of our application. Commonly this is achieved using a bastion server,
which provides a single, carefully hardened point of access.&lt;/p&gt;
&lt;p&gt;Here we add a bastion server, and modify all our security groups to allow SSH
access from the bastion to all our instances. The bastion instance itself would
be configured to only allow incoming connections from the appropriate points in
a CI/CD infrastructure (not shown.) Fig 7. Adding a bastion server with SSH
access to all other instances.&lt;/p&gt;
&lt;p&gt;&lt;img alt='A diagram representing the same elements as figure 6 above, with the addition of a "bastion" group which connects to all instances via SSH on port 22' src="https://www.tartley.com/files/2023/ibm-cloud/7_bastion.webp"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig 7. Adding a bastion server with SSH access to all other instances.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is starting to look like a realistic setup for a modest but scalable
multi-tier application.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Security groups are a flexible and powerful way to firewall network traffic to
and from your system's instances. We've shown how they might be used in a few
typical scenarios, and hopefully demonstrated that they are flexible enough to
accommodate many others. For more information, see
&lt;a href="https://cloud.ibm.com/docs/security-groups/sg_index.html"&gt;Getting Started with Security Groups&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Jonathan Hartley's smiley face" src="https://www.tartley.com/files/2023/ibm-cloud/jonathan-hartley.webp"&gt;
&lt;/span&gt;
&lt;br&gt;
&lt;strong&gt;Jonathan Hartley&lt;/strong&gt;&lt;br&gt;
Senior Cloud Developer&lt;/p&gt;
&lt;p&gt;&lt;span style="float: none"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description><category>cloud</category><category>geek</category><category>networking</category><category>security</category><category>software</category><guid>https://www.tartley.com/posts/illustrating-uses-of-ibm-cloud-security-groups/</guid><pubDate>Wed, 23 Aug 2023 02:33:47 GMT</pubDate></item><item><title>TIL: git push --force-with-lease</title><link>https://www.tartley.com/posts/til-git-push-force-with-lease/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;Don't ever type &lt;code&gt;git push --force&lt;/code&gt;. Yes, there are times we have to hold our
nose and do a force push. Maybe the project requires contributions to be
rebased or squashed. Maybe we pushed the nuclear launch codes. But there are
failure modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You might be accidentally pushing to or from the wrong branch, and hence are
  about to blow away valuable work at the remote. Yes, is unlikely, and can be
  fixed after the fact, but who knows how much embarrassing disruption and
  confusion you'll cause the team before you realize what you did.&lt;/li&gt;
&lt;li&gt;Do you &lt;em&gt;always&lt;/em&gt; remember to check the state of the remote, to make sure there
  isn't unexpected extra commits on the remote that you'll unknowingly blow
  away when you push? Do you enjoy always having to type those extra commands
  to pull and check the remote commits?&lt;/li&gt;
&lt;li&gt;No matter how conscientious we are about checking the above, there is a race
  condition. We might check the remote, then someone else pushes valuable
  changes, then we force push and blow them away.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although there are conventions that can help with all the above (e.g. only ever
force pushing to your own fork, to which nobody else ever pushes), they aren't
generally watertight. (e.g. you might have pushed something yourself, before
vacation, and forgotten about it.)&lt;/p&gt;
&lt;p&gt;So the generally agreed method to avoid the above failure modes is "be more
careful", which sounds to me like the common prelude to failure. What we need
are push's newer command-line options:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;--force-with-lease&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Like &lt;code&gt;--force&lt;/code&gt;, but refuses to push if the remote ref doesn't point at the
same commit that our local remote-tracking branch 'origin/mybranch' thinks it
should. So if someone else pushes something to the remote's 'mybranch' just
before we try to force push, our push will fail until we pull (and, in theory,
inspect) those commits that we were about to blow away.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;It turns out that this is inadequate. One might have fetched an up-to-date remote
branch, but somehow or other ended up with our local HEAD on a divergent branch
anyway:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;C origin/mybranch
|
B¹   B² HEAD mybranch
 \ /
  A
  |
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this situation, &lt;code&gt;--force-with-lease&lt;/code&gt; will allow us to push, not only blowing
away the original commit B¹, as we intended, but also C, which was maybe pushed
by someone else before we fetched.&lt;/p&gt;
&lt;p&gt;To guard against this, we can use the even newer option:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;--force-if-includes&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This makes &lt;code&gt;--force-with-lease&lt;/code&gt; even more strict about rejecting pushes,
using clever heuristics on your local reflog, to check that the remote ref
being updated doesn't include commits which have never been part of your local
branch.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Upshot is, I plan to default to always replacing uses of &lt;code&gt;--force&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;--force-with-lease&lt;span class="w"&gt; &lt;/span&gt;--force-if-includes&lt;span class="w"&gt; &lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's a lot to type, the options don't have short versions, and it's easy to forget to
do. Hence, shadow &lt;code&gt;git&lt;/code&gt; to enforce it, and make it easy. In .bashrc or similar:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# Shadow git to warn againt the use of 'git push -f'&lt;/span&gt;
git&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;is_push&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;is_force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"push"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is_push&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"-f"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"--force"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is_force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$is_push&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$is_force&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Suggest alternative commands.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git push -f: Consider 'git push --force-with-lease --force-if-includes' instead, which is aliased to 'gpf'"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Run the given command, using the git executable instead of this function.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# git push force: using the new, safer alternatives to --force&lt;/span&gt;
gpf&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Older versions of git don't have --force-if-includes. Fallback to omitting it.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;--quiet&lt;span class="w"&gt; &lt;/span&gt;--force-with-lease&lt;span class="w"&gt; &lt;/span&gt;--force-if-includes&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;--quiet&lt;span class="w"&gt; &lt;/span&gt;--force-with-lease&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then trying to do it wrong tells you how to easily do it right:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-f
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-f:&lt;span class="w"&gt; &lt;/span&gt;Consider&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'git push --force-with-lease --force-if-includes'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;instead,&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;aliased&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'gpf'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;gpf
$
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(The [1] is my prompt telling me that the last command had an error exit value.)&lt;/p&gt;</description><category>geek</category><category>git</category><category>software</category><category>terminal</category><category>til</category><guid>https://www.tartley.com/posts/til-git-push-force-with-lease/</guid><pubDate>Fri, 04 Aug 2023 18:48:19 GMT</pubDate></item><item><title>Structured Pattern Matching in Python</title><link>https://www.tartley.com/posts/structured-pattern-matching-in-python/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;I read through descriptions of
&lt;a href="https://docs.python.org/3.11/reference/compound_stmts.html#the-match-statement"&gt;structured pattern matching&lt;/a&gt;
when it was added in Python 3.10 a couple of years ago, and have studiously
avoided it ever since. It seemed like a language feature that's amazingly
useful in one or two places, like writing a parser, say, and is a horrifically
over-complicated mis-step just about everywhere else.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; A day after writing this I see that Guido van
Rossum wrote exactly that,
&lt;a href="https://github.com/gvanrossum/patma/blob/master/examples/expr.py"&gt;a parser&lt;/a&gt;,
to showcase the feature. I'm guessing he writes a lot of parsers. I definitely
don't write enough of them to think this language feature is worth the extra
complexity it brings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regardless, I really ought to remember how it works, so this is my attempt to
make the details stick, by writing about it.&lt;/p&gt;
&lt;p&gt;If you're not me, you really ought to be reading about it from the source instead:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0634/"&gt;PEP 643&lt;/a&gt;: Specification.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0635/"&gt;PEP 635&lt;/a&gt;: Motivation and rationale.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0636/"&gt;PEP 636&lt;/a&gt;: A tutorial.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Basic structure&lt;/h2&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;EXPRESSION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PATTERN1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PATTERN2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This evaluates the &lt;code&gt;match&lt;/code&gt; EXPRESSION, then tries to match it against each
&lt;code&gt;case&lt;/code&gt; PATTERN, executing the body of the first case that matches, falling back
to the optional final &lt;code&gt;_&lt;/code&gt; default case. (&lt;code&gt;match&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; are not keywords,
except in the context of a match...case block, so you can continue using them
as variable names elsewhere.)&lt;/p&gt;
&lt;p&gt;But what are PATTERNs, and how are they tested for a match?&lt;/p&gt;
&lt;h2&gt;Patterns&lt;/h2&gt;
&lt;p&gt;Patterns can be any of the following. As becomes increasingly obvious down the
list, the real power of this feature comes from composing each of these
patterns with the others. For complicated patterns, parentheses can be used to
indicate order of operations.&lt;/p&gt;
&lt;h3&gt;Literals&lt;/h3&gt;
&lt;p&gt;Like other languages' traditional &lt;code&gt;switch&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;mycommand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;CommandNotFoundError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mycommand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Such literal case patterns may be strings (including raw and byte-strings, but
not f-strings), numbers, booleans or None.&lt;/p&gt;
&lt;p&gt;Such cases are compared with equality:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mf"&gt;123.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# matches!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;except for booleans and None, which are compared using &lt;code&gt;is&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;myfalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;myfalse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Doesn't match, even though myfalse == False&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Variable names&lt;/h3&gt;
&lt;p&gt;We can replace a literal with a variable name, to capture the value of the match
expression.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# New variable 'unknown' is assigned the value of command&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The 'default' case pattern &lt;code&gt;_&lt;/code&gt; is just a special case variable name which
binds no name.&lt;/p&gt;
&lt;p&gt;Beware the common error of using "constants" as the case pattern:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;NOT_FOUND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;

&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;NOT_FOUND&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# bad&lt;/span&gt;
        &lt;span class="n"&gt;handle_404&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above case is intended to test for &lt;code&gt;error == NOT_FOUND&lt;/code&gt;, but instead
assigns the variable &lt;code&gt;NOT_FOUND = error&lt;/code&gt;. The best defense is to always include
a default catch-all case at the end, which causes the above &lt;code&gt;NOT_FOUND&lt;/code&gt; case to
produce a SyntaxError:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;NOT_FOUND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;

&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;NOT_FOUND&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;handle_404&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;SyntaxError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'NOT_FOUND'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;makes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;remaining&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unreachable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use a 'constant' in a case pattern like this, qualify it with a dotted name,
such as by using an &lt;code&gt;enum.Enum&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NOT_FOUND&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# correctly matches&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Sequences&lt;/h3&gt;
&lt;p&gt;Using a list-like or tuple-like syntax, matches must have the right number of
items. Like Python's existing iterable unpacking feature. Use &lt;code&gt;*&lt;/code&gt; to match the
rest of a sequence. Included variable names are set if a case matches by all
other criteria.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# New variable name=command[1]&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# New variable name=command[1]&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# New variables name=command[1], delay=command[2]&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# New variables name=command[1], delay=command[2] &amp;amp; extra=command[3:]&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;BadCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Mappings&lt;/h3&gt;
&lt;p&gt;Using a dict-like syntax. The match expression must must contain a
corresponding mapping, and can contain other keys, too. Use &lt;code&gt;**&lt;/code&gt; to match the
rest of a mapping.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
        &lt;span class="c1"&gt;# 'config' must contain key 'host'. New variable hostname=config['host']&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'port'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;portnumber&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
        &lt;span class="c1"&gt;# 'config' must contain key 'port'. New variable portnumber=config['port']&lt;/span&gt;
        &lt;span class="c1"&gt;# Remember we only use the first matching case.&lt;/span&gt;
        &lt;span class="c1"&gt;# If 'config' contains 'host', then this 'port' case will not match.&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'scheme'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
        &lt;span class="c1"&gt;# new variables 'scheme' and 'extras' are assigned.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Case patterns may contain more than one key-value pair. The match expression must
contain all of them to match.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'port'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;portnumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Objects and their attributes&lt;/h3&gt;
&lt;p&gt;Using class syntax, the value must match an isinstance check with the given class:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# handle click&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;KeyPress&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# handle key press&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Beware the common error of omitting the parentheses:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;myval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# bad&lt;/span&gt;
        &lt;span class="c1"&gt;# handle clicks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above case is intended to test for &lt;code&gt;isinstance(myval, Click)&lt;/code&gt;, but instead
creates a new var, &lt;code&gt;Click = myval&lt;/code&gt;. The best defence against this error is to
always include a default catch-all at the end, which makes the &lt;code&gt;Click&lt;/code&gt; catch-all
produce an error by making subsequent patterns unreachable.&lt;/p&gt;
&lt;p&gt;Attribute values for the class can be given, which must also match.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;KeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;KeyPress&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;handle_keypress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Values can also be passed as positional args to the class-like case syntax:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;KeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the class is a namedtuple or dataclass, then positional args to a class-like
case pattern can automatically be handled using the unambiguous ordering of its
attributes:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dash'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'golden'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dash'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'golden'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# matches&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But for regular classes, the ordering of the class attributes is ambiguous.
To fix this, add a &lt;code&gt;__match_args__&lt;/code&gt; attribute on the class, a tuple which
specifies which class attributes, in which order, can be specified in a case
pattern:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KeyPress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__match_args__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'key_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'release'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;KeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# matches!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you might expect, the literal positional args can be replaced with variable
names to capture attribute values instead:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;KeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# names unimportant, order matters&lt;/span&gt;
        &lt;span class="n"&gt;handle_keypress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Positional sub-patterns behave slightly differently for builtins &lt;code&gt;bool&lt;/code&gt;,
&lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;frozenset&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;,
&lt;code&gt;str&lt;/code&gt;, and &lt;code&gt;tuple&lt;/code&gt;. A positional value is matched by equality against the match
expression itself, rather than an attribute on it:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# matches&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;123.0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# would also match if it wasn't shadowed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, a positional variable is assigned the value of the match expression
itself, not an attribute on that value:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The values passed as keyword or positional args to class-like case patterns can
be more than just literals or variable names. In fact they can use &lt;em&gt;any&lt;/em&gt; of the
listed pattern types. For example, they could be a nested instance of this
class-like syntax:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;

&lt;span class="n"&gt;mycar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;mycar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))):&lt;/span&gt;
        &lt;span class="c1"&gt;# matches, and captures 'x' and 'y'&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Combine patterns using &lt;code&gt;|&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;To match either one pattern or another:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'on'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'yes'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# matches any of those values&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Capture sub-patterns using &lt;code&gt;as&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We've seen how we can either match against a value, or capture the value using
a variable name. We can do both using &lt;code&gt;as&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# matches either value, captures what the value actually was&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This might not be much use when capturing the whole match expression like that.
If the match expression is just a variable, then we could instead simply refer
to that variable. But using &lt;code&gt;as&lt;/code&gt; can be useful when the match expression is
lengthy or has side-effects:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_next&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;KeyDown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;key_event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or to capture just a component of the whole expression. Contrived example:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# matchs ['a', 'c'] or ['b', 'c'], and captures the first letter in 'ab'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;An &lt;code&gt;if&lt;/code&gt; guard clause&lt;/h4&gt;
&lt;p&gt;Add arbitrary conditions to the match:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# matches integers less than 100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or, alternatively:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# matches integers less than 100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Complications&lt;/h2&gt;
&lt;p&gt;This feature seems rife with complexity. The flexible syntax of case patterns
forms a new mini-language, embedded within Python. It has many similarities to
Python, but also many initially unintuitive differences.&lt;/p&gt;
&lt;p&gt;For example, a class-like case pattern such as &lt;code&gt;case Click():&lt;/code&gt;. Anywhere else
in the language, the expression like &lt;code&gt;Click(...)&lt;/code&gt; would create an instance of the
&lt;code&gt;Click&lt;/code&gt; class. In a case statement, it instead is doing things like
&lt;code&gt;isinstance&lt;/code&gt; and &lt;code&gt;hasattr&lt;/code&gt; checks.&lt;/p&gt;
&lt;p&gt;Similarly, including variable names doesn't return the variable value as in
ordinary Python. Instead it binds a value as that name. This is the source of
the annoying gotcha described above, that bare "constants" like &lt;code&gt;NOT_FOUND&lt;/code&gt;
behave very unexpectedly when used as case expressions.&lt;/p&gt;
&lt;p&gt;There are a few places in real-world code where structured pattern matching
will produce nicer code than the equivalent using nested &lt;code&gt;elif&lt;/code&gt;s. But equally,
there are a lot of places where the &lt;code&gt;elif&lt;/code&gt;s are a more natural match.
Developers now get to choose which they're going to use, and then later
disagree with each other about it, or simply change their mind, and end up
converting code from one to the other.&lt;/p&gt;
&lt;p&gt;If this was a simple feature, with low overheads, then I'd forgive its
inclusion in the language, accepting the costs in return for the marginal and
unevenly distributed benefits.&lt;/p&gt;
&lt;p&gt;But it's really not simple. In addition to Python programmers all having to
do an exercise like this post just to add it to their mental toolbox, it needs
maintenance effort, not just in CPython but in other implementations too, and
needs handling by tools such as syntax highlighters, type checkers. It really
doesn't seem like a net win to me, &lt;em&gt;unless&lt;/em&gt; you're writing way more parsers
than the average programmer, which no doubt the champions of this feature are.&lt;/p&gt;</description><category>geek</category><category>python</category><category>software</category><guid>https://www.tartley.com/posts/structured-pattern-matching-in-python/</guid><pubDate>Sat, 29 Jul 2023 23:15:26 GMT</pubDate></item></channel></rss>