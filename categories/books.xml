<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com (Posts about books)</title><link>https://www.tartley.com/</link><description></description><atom:link href="https://www.tartley.com/categories/books.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:tartley@domain tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Sat, 13 Jun 2020 00:42:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Recent Books</title><link>https://www.tartley.com/posts/2019/6/20/june-books.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;Notes about some books I read, for me to reminisce over.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.tartley.com/files/2019/06/miracleman.jpg" style="float: left; padding: 1em"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Miracleman, books 1, 2 &amp;amp; 3&lt;/em&gt; by Alan Moore, Alan Davies, &amp;amp; John Totleben.&lt;/p&gt;
&lt;p&gt;I spent a little time digging out earlier works of Alan Moore. These
inter-library loans didn't disappoint.&lt;/p&gt;
&lt;p&gt;Originally published as &lt;em&gt;Marvelman&lt;/em&gt; by Mick Anglo, from
1954-59. Legal battles rebranded the character as &lt;em&gt;Miracleman&lt;/em&gt; in 1985.&lt;/p&gt;
&lt;p&gt;The opening pages reprint one of those campy early stories, involving
primary-colored moralizing while flying around to punch time-travelling Nazi
super-scientists.&lt;/p&gt;
&lt;p&gt;They then continue with Alan Moore's postmodern 1980s reboot. This recasts the
simplistic tales of the original period as a placating dream, fed to a captured
Miracleman by his nemesis. His hokey origins story is similarly re-ploughed. The
ensuing tales are dark and introspective.&lt;/p&gt;
&lt;p&gt;One thread follows the emotional stresses placed on Miracleman when incarnated
as his human alter-ego, the frail and fallible half of a godlike being. He's
unable to conceive a child with his wife, although &lt;em&gt;Miracleman&lt;/em&gt; can, and
succumbs to self-loathing and jealousy, culminating in a touching scene in
which he climbs a mountain, leaves a forlorn monument, and changes into
Miracleman one last time, never to change back.&lt;/p&gt;
&lt;p&gt;Yes, this is more uneven than Moore's later works. Yes, it's unashamedly an
underwear-on-the-outside superhero story. But nonetheless I loved it, and
scenes like the above have stayed with me for months.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;
&lt;img src="https://www.tartley.com/files/2019/06/swamp-thing-vol-1.jpg" style="float: left; padding: 1em"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Swamp Thing, Vol 1: Saga of the Swamp Thing&lt;/em&gt; by Alan Moore, John Totleben, &amp;amp; Steve Bissette.&lt;/p&gt;
&lt;p&gt;Moore's deconstruction of existing characters continues. Originally Swamp
Thing was Alec Holland, miraculously transformed by in infusion of
artificially stimulated plant matter. When Alan Moore takes over the writing,
Swamp Thing's ostracization and existential dread is compounded by the
discovery that this origins story has been a delusion all along. Alec Holland
was killed outright in the accident, and an accumulation of plant matter grew
around his decaying form, integrating the physical remains of his memories
into a creature that yearned to recapture its human form, but was never human
in the first place.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;
&lt;img src="https://www.tartley.com/files/2019/06/hull-zero-three.jpg" style="float: left; padding: 1em"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hull Zero Three&lt;/em&gt; by Greg Bear.&lt;/p&gt;
&lt;p&gt;A smashing hard SF tale, about the existential mystery of life aboard a
generation starship that has lost its way. Following in the footsteps of
classic variations, such as &lt;em&gt;Non-Stop&lt;/em&gt;, &lt;em&gt;Methusalah's Children&lt;/em&gt;, and &lt;em&gt;Tau
Zero&lt;/em&gt;, it centers around the character's revelations as they uncover their
situation and origins, being decanted to order by warring factions amongst
high technology ruins.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;
&lt;img src="https://www.tartley.com/files/2019/06/station-eleven.jpg" style="float: left; padding: 1em"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Station Eleven&lt;/em&gt; by Emily St. John Mendel.&lt;/p&gt;
&lt;p&gt;An evocative tale of intertwined lives, before and after the sudden fall of
contemporary civilisation due to a global pandemic.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Atrocity Archive&lt;/em&gt; by Charles Stross. The conceit of Lovecraftian horror
rationalized to a mathematical or computable topic is appealing to me, and
kept the pages turning, but I didn't ultimately find it life-changing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nightwings&lt;/em&gt; by Robert Silverberg. A fantastical far-future tale of humanity
split into occupational castes, guarding the world against prophesied
invasion. Not my thing.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><guid>https://www.tartley.com/posts/2019/6/20/june-books.html</guid><pubDate>Thu, 20 Jun 2019 15:17:46 GMT</pubDate></item><item><title>This Gaming Life: Travels in Three Cities</title><link>https://www.tartley.com/posts/2014/2/3/this-gaming-life-travels-in-three-cities.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="gaminglife" src="https://www.tartley.com/files/2014/02/gaminglife.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Jim Rossignol&lt;/em&gt; (2009)&lt;/p&gt;
&lt;p&gt;A gorgeous insider's look at videogaming culture, by an author who,
after an unfulfilling stint as a financial journalist, has built his
life around games.&lt;/p&gt;
&lt;p&gt;Broken into sections corresponding with the author's experiences in
London, Seoul and Reykjavik, it's thoughtful and manages to sidestep the
patronising oversimplifications of mainstream media's gaming coverage.&lt;/p&gt;
&lt;p&gt;From &lt;em&gt;Tetris&lt;/em&gt; and &lt;em&gt;Elite&lt;/em&gt; to &lt;em&gt;Okami&lt;/em&gt; and &lt;em&gt;Shadow of the Collossus&lt;/em&gt;,
stopping along the way to examine the modding and indie scenes, the
massively multiplayer intricacies of &lt;em&gt;EVE Online&lt;/em&gt;, and the insane
heights of Korean real-time strategy matches. He knows the best &lt;em&gt;Prince
of&lt;/em&gt; &lt;em&gt;Persia&lt;/em&gt; was &lt;em&gt;Sands of Time&lt;/em&gt;, by a country mile. He's one of us. I
felt welcomed to his world. Join us - we'll be on the sofa.&lt;/p&gt;
&lt;p&gt;Rating:&lt;/p&gt;
&lt;p&gt;10/10 if you understand that games have the potential to become the
dominant art form of the 21st century.&lt;/p&gt;
&lt;p&gt;0/10 if it's just for kids, innit?&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>games</category><guid>https://www.tartley.com/posts/2014/2/3/this-gaming-life-travels-in-three-cities.html</guid><pubDate>Tue, 04 Feb 2014 02:31:29 GMT</pubDate></item><item><title>Object-Oriented Software Engineering : A Use Case Driven Approach</title><link>https://www.tartley.com/posts/2014/2/2/object-oriented-software-engineering-a-use-case-driven-approach.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="object-oriented-sofware-engineering" src="https://www.tartley.com/files/2014/02/object-oriented-sofware-engineering.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Ivar Jacobsen&lt;/em&gt; (1992, 4th revision)&lt;/p&gt;
&lt;p&gt;You might wonder if there's anything left to say about
object-orientation that hasn't already been discussed to death. I was
led to this 1992 book by Uncle Bob's talk "&lt;a href="http://www.youtube.com/watch?v=WpkDN78P884"&gt;Architecture: The Lost
Years&lt;/a&gt;." In it Bob posits
that in the 1990s, just as people like Ivar were completing their
20-year journey of figuring out some fairly optimal ways to do
object-orientation, along came the disruptive influence of the web,
which turned everyone's priorities, methodologies and designs upside
down. In the resulting stampede, some highly practical ideas have been
lost, both in terms of design and process. This has substantially
watered down OO's ability to deliver on its promises of reuse and
maintainability. It has stranded a whole generation of applications with
distorted architectures, inside-out designs, and less maintainable code.&lt;/p&gt;
&lt;p&gt;Aspects of these historical approaches do survive, such as the
prominence Agile gives to use-cases as a way to concretely tie together
requirements, design, testing, and acceptance. But some equally powerful
ideas, such as appropriate ways to manage dependencies within an
application, have seen relatively little use, and are only now being
rediscovered in guises such as the clean and hexagonal architectures.&lt;/p&gt;
&lt;p&gt;Ivar's book can certainly lay claim to being one of the earliest
published sources to lay out these ideas, and he does so with a style
that is convincingly thoughtful. This is the work of an intelligent man,
honed and refined over many years of practice. The omission of modern
testing techniques are the only thing that substantially dates the
content. Otherwise I found it exciting, insightful and revolutionary. It
seems naive to claim that this book describes the One True Architecture
which is applicable to all systems. But it certainly seems very widely
applicable, and has deeply affected my thinking on all projects larger
than a couple of weeks' work.&lt;/p&gt;
&lt;p&gt;The book also discusses software development methodology in an
intriguingly meta way, constructing an object-oriented model of the
process itself. Each software development team or organisation
represents a particular implementation of this model. Parallels with the
execution of software are drawn, with the output of one part of the
process, e.g. design work, having to produce results that conform to the
expectations of the downstream process, such as implementation. In this
way, sections of the process can be removed and replaced by compatible
alternatives, to better suit the application domain and the organisation
within which the project is embedded. These ideas seem less immediately
applicable and actionable. Maybe that's just my personal circumstance.
Perhaps they are more applicable to larger projects, which I avoid these
days.&lt;/p&gt;
&lt;p&gt;Rating:&lt;/p&gt;
&lt;p&gt;10/10 if you're going to enjoy 500 pages of software design principles
and case studies.&lt;/p&gt;
&lt;p&gt;0/10 if you're not.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>software</category><guid>https://www.tartley.com/posts/2014/2/2/object-oriented-software-engineering-a-use-case-driven-approach.html</guid><pubDate>Sun, 02 Feb 2014 20:26:43 GMT</pubDate></item><item><title>Altered Carbon</title><link>https://www.tartley.com/posts/2014/2/2/altered-carbon.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="richard-morgan-altered-carbon" src="https://www.tartley.com/files/2014/02/richard-morgan-altered-carbon.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Richard Morgan&lt;/em&gt; (2001)&lt;/p&gt;
&lt;p&gt;A romp through a hyperviolent cyberpunk future through the eyes of a
character reluctantly press-ganged into the role of detective in a story
woven around personality uploads, swaps, and backups. Thoroughly enjoyed
it, but it was never going to be life-changing.&lt;/p&gt;
&lt;p&gt;10/10 if you're looking to kick back on the couch with tea, cake, and
some exciting SF.&lt;/p&gt;
&lt;p&gt;0/10 if you're not.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>science-fiction</category><guid>https://www.tartley.com/posts/2014/2/2/altered-carbon.html</guid><pubDate>Sun, 02 Feb 2014 18:59:43 GMT</pubDate></item><item><title>Domain Driven Design: Tackling Complexity in the Heart of Software</title><link>https://www.tartley.com/posts/2014/1/27/domain-driven-design-tackling-complexity-in-the-heart-of-software.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="domaindrivendesign" src="https://www.tartley.com/files/2014/01/domaindrivendesign.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Eric Evans (2004)&lt;/em&gt; &lt;a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215"&gt;on Amazon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's a big, dense book -- possibly the most important of the technical
books I've read in a flurry over the last few months, catching up after
recovering a modicum of sanity in our lives after our kid's first year.
I finish it feeling changed, invigorated, and given new direction.&lt;/p&gt;
&lt;p&gt;At its core is a simple idea, which sounds neither new nor revolutionary
on the surface. Software projects, Evans maintains, should work closely
with business experts to create and maintain a domain model. The model
might be expressed as a class diagram of core business concerns, and
should also correspond directly to a body of code modelling these
business entities. This forms a set of core business entities which are
clearly analogous to things like the core enterprise entities of the
hexagonal or clean architectures.&lt;/p&gt;
&lt;p&gt;However it's created, the terminology and notation used in the class
diagram (or it's equivalent) should be well understood by individuals on
both side of the tech/business divide. In the past I think I've made the
mistake of believing that only developers needed to understand it, and
therefore the model only needed to be expressed in code.&lt;/p&gt;
&lt;p&gt;This model should be displayed prominently, referred to continually, and
in a healthy project should very directly correspond to the specialised
language that evolves within the organisation. Where the team's language
doesn't match the model - for example, your business experts' use of
plurals betrays that the cardinality of relationships are modelled
wrongly, then the model - and the underlying code - should be
aggressively refactored to match reality.&lt;/p&gt;
&lt;p&gt;Evans makes a persuasive case that the appropriate management of this
complexity at the heart of your software will be a major influence on
the success of the project. To be fair, this is a viewpoint that I
already believed in, so I was a sucker for all of this. Without an
appropriate approach to these central design concerns, over time
developers will find they are no longer able to understand the code
thoroughly enough to be able to modify or extend it easily, unless they
deliberately or inadvertently use design-breaking hacks like redundancy
or mislocated chunks of code. This forms a vicious cycle of technical
debt accrual, and creates an upper limit on the size or complexity which
can be achieved by any project before productivity begins to slump.
Other metrics like reliability then also suffer.&lt;/p&gt;
&lt;p&gt;To counter this, conquering these central design issues requires a
pro-active and multi-pronged effort. Firstly, the existing design must
be understood by all parties. In order for this to remain true, the
design needs to be kept up to date and be easily understood by new team
members. The code must be kept directly in sync with the model, and kept
understandable - inappropriate dependencies must be ruthlessly pruned.
Simultaneously, the "correct" design must be discovered iteratively,
throughout the life of the project, and this can only be done by
encouraging continual conversations between developers and business
folks to discuss the potential inadequacies of the current design and
possible alternatives.&lt;/p&gt;
&lt;p&gt;When managed correctly, this lends an agility and suppleness to project.
Developers find it easy to integrate subsequent parts of code because
they 'fit naturally' into the existing design, and when the design is
found wanting, it's relatively easy to modify it to incorporate new
concerns.&lt;/p&gt;
&lt;p&gt;There are times when I've struggled to convey the message about how the
resulting trade off works between time spent refactoring versus time
saved over the long term. Evans describes this in an interesting way.
Instead of trying to model team productivity by applying a multiplier to
describe drag caused by technical debt, he simply contrasts the normal
way projects slow down as they become larger and more complex, with a
project that instead &lt;em&gt;speeds up&lt;/em&gt; over time, as developers, unhindered by
a cycle of technical debt, are instead empowered by the creation of
powerful and expressive abstractions, which can then be relatively
easily reconfigured into unanticipated configurations.&lt;/p&gt;
&lt;p&gt;To counter-balance this idealistic hand-waving, the next section dives
right into some specific design practices which embody these ideas.
These are valuable and insightful, stock-in-trade, such as
distinguishing between entity and value types. But many of the ideas
were completely new to me, such as the concept of &lt;em&gt;aggregates&lt;/em&gt;, which
define subsets of the domain model which are always atomically retrieved
from (or updated in) a data store.&lt;/p&gt;
&lt;p&gt;In short, I really loved this book. It stretched and inspired me. It's
in a very small set of books I've flagged to re-read in a couple of
years. It's top of my list for 'books to bring in and talk about at
work'.&lt;/p&gt;
&lt;p&gt;Rating:&lt;/p&gt;
&lt;p&gt;10/10 if you're a programmer, or work with programmers.&lt;/p&gt;
&lt;p&gt;0/10 if you're not, or don't.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>software</category><guid>https://www.tartley.com/posts/2014/1/27/domain-driven-design-tackling-complexity-in-the-heart-of-software.html</guid><pubDate>Mon, 27 Jan 2014 17:05:53 GMT</pubDate></item><item><title>Brief Interviews with Hideous Men</title><link>https://www.tartley.com/posts/2014/1/22/brief-interviews-with-hideous-men.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="brief-interviews-with-hideous-men" src="https://www.tartley.com/files/2014/01/brief-interviews-with-hideous-men.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by David Foster Wallace (1999)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A collection of creative essays, varying from playful to unflinchingly
uncomfortable, shot through with Wallace's typical humour and
introspection.&lt;/p&gt;
&lt;p&gt;I've tended to love and hate his &lt;a href="https://www.tartley.com/infinite-jest"&gt;other&lt;/a&gt;
&lt;a href="https://www.tartley.com/everything-and-more"&gt;writing&lt;/a&gt; in equal measure, but with such
ferocity that I unreservedly place him amongst my very favourite
authors. There wasn't even much for me to hate in this one, relatively
lacking as it is in labyrinthine footnotes.&lt;/p&gt;
&lt;p&gt;A couple of the essays left me cold (&lt;em&gt;Tri-Stan: I Sold Sissee Nar to
Ecko&lt;/em&gt; springs to mind), but most of them I found thoroughly engaging and
thought provoking. I'm tempted to read up on those that seemed most
challenging to me (&lt;em&gt;Church Not Made With Hands&lt;/em&gt;, say), and give them
another try.&lt;/p&gt;
&lt;p&gt;It's been a while. Rating:&lt;/p&gt;
&lt;p&gt;0/10 if you don't want to delve deeply into sometimes uncomfortable
subjects, such as depression, unconventional sex acts, and rape.&lt;/p&gt;
&lt;p&gt;10/10 if you like to be stretched, or at least stirred around, in
interesting directions.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>fiction</category><guid>https://www.tartley.com/posts/2014/1/22/brief-interviews-with-hideous-men.html</guid><pubDate>Thu, 23 Jan 2014 02:51:51 GMT</pubDate></item><item><title>IronPython in Action</title><link>https://www.tartley.com/posts/2009/7/18/ironpython-in-action.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.uk/IronPython-Action-Michael-Foord/dp/1933988339"&gt;&lt;img alt="ironpython-in-action" src="https://www.tartley.com/files/2009/07/ironpython-in-action.jpg" title="ironpython-in-action"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Michael Foord and Christian Muirhead&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Disclaimer: I'm friends with both the authors and was sent a freebie
review copy by the publisher, so I'm bound to be breathlessly gushing in
this review. Fortunately, that's easy to do, because the book really is
great. (Except for Christian's chapters... &lt;em&gt;Joke!&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Having spent some years working with .NET, and with a series of
intriguing personal experiments in Python under my belt, I originally
approached IronPython some years ago with a modicum of trepidation. I
feared that the weld between the two would be intrusively visible,
forming distracting differences from regular Python. I feared for the
execution environment, the data types, and perhaps even the syntax
itself.&lt;/p&gt;
&lt;p&gt;Experience with IronPython showed these worries were needless. I have
found IronPython to be a remarkably pleasant marriage - the same elegant
language we know and love, given first-class status in the .NET runtime.
Gifted with seamless interoperability with other .NET languages, the
dowry from such an alliance turns out to be all the .NET libraries in
the world, including the substantial and highly capable .NET standard
libraries themselves.&lt;/p&gt;
&lt;p&gt;IronPython is, to some extent, a niche implementation of a niche
language. However, its position seems to potentially be one of
importance and strength. Not only does it allow Python programmers to
use .NET libraries - and does so admirably, but it also allows the
existing legions of .NET programmers to be introduced to the joys of
Python. They will fall in love with it, and will be able to introduce it
into their workplaces in a way that is politically acceptable. After
all, it is now simply another .NET language. Since .NET is orders of
magnitude more popular than Python, this could turn out to be an
important source of future Python adoption.&lt;/p&gt;
&lt;p&gt;This book is aimed to satisfy programmers coming from both the Python
and the .NET worlds, and in this it seems to succeed. It starts with
quick overviews of concepts from each: 30 pages about Python as a
language, and 17 pages about .NET as an environment (data types, events,
delegates, Windows Forms, etc) - just enough to get everyone up to speed
regardless of background, but without being so verbose as to turn anyone
off with a surfeit of material they are already familiar with. Despite
being brief, these sections are packed with detail and very pragmatic,
focusing on real-world use such as inheriting from existing .NET types,
and solving some common problems like creating Windows Forms
applications from IronPython.&lt;/p&gt;
&lt;p&gt;This style of practical and dense informative content is continued
throughout. Straight after the opening sections, we dive right in with
another rapid-fire chapter, demonstrating common IronPython techniques
by writing a non-trivial application. Woven around this ongoing example,
the chapter discusses many immediately important topics, including duck
typing, Python protocols, MVC, using Windows Forms to build a GUI, tab
pages, dialogs, menus, toolbars, images, saving text files, .NET
Streams, text file encodings, Python exceptions and lambda functions.
These diverse topics are covered rapidly but thoroughly, giving the
reader enough information about each to be able to use them together
from IronPython to create a useful project.&lt;/p&gt;
&lt;p&gt;Having covered these foundations, the book then moves on to address some
specific areas in more detail. The following chapter headings give you
some idea of the topics which are explored in depth:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;First-class functions in action with XML&lt;/em&gt; - demonstrates pragmatic
    use of functions as first-class objects, and higher-order functions
    (functions that take other functions as arguments and return
    modified versions.) and of course decorators. These are shown in
    use, appropriately paired up with the .NET XmlWriter and XmlReader
    classes, demonstrating event driven parsing of XML.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Properties, dialogs and Visual Studio&lt;/em&gt; - Python properties, .NET
    dialogs, and using IronPython in Visual Studio. This sounds like a
    straightforward chapter, but as you might guess, the book gets deep
    into the topics and is jammed full of information. By the end of the
    chapter you'll have added to the example application to create
    document observers, used BinaryFormatter to serialise objects, and
    touched on Python's pickle equivalent.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Agile Testing: where dynamic typing shines&lt;/em&gt; - From the unittest
    module and creating tests, through mock objects, listeners, monkey
    patching, dependency injection and functional testing. This is a
    dense chapter in a dense book, touching along the way on Python
    attribute lookup rules, bound and unbound methods, asynchronous
    execution for functional testing. My only criticism is that it's
    clearly hard for developers to 'get' testing until they have
    hands-on experience of it, so this single-chapter, while very
    thorough in explaining &lt;em&gt;how&lt;/em&gt; to test, has an ambitious remit, and
    doesn't have enough space to explain much of &lt;em&gt;why&lt;/em&gt; we test. I guess
    this is partially my own bias shining through here - I regard
    testing as quite literally the most important thing to happen in
    computer science since the invention of the compiler, and would
    encourage anyone interested to go and read as much as they can about
    it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Metaprogramming, protocols and more&lt;/em&gt; - More Python protocols,
    dynamic attribute access, and metaclasses. The sorts of things that
    in a static language would be deep black magic, or else completely
    impossible, but here they are just the &lt;em&gt;right&lt;/em&gt; sort of crazy. Read,
    enjoy, and &lt;em&gt;unlearn&lt;/em&gt;. We see how to create a profiling decorator,
    that modifies the functions you pass to it, wrapping them in
    stopwatch timing calls. We also learn about some of the more
    advanced integration of IronPython with the .NET CLR, including
    static compilation of IronPython code into assemblies, and one of
    the very few additions to Python syntax that IronPython has been
    obliged to provide - the typing of .NET arrays and generics. You'll
    never need to use generics yourself (in Python, everything is a
    generic), and you'll never want to go back to typed containers if
    you can avoid it. However, you may need to deal with some from an
    existing C# API, and this is how you do it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whew! We're only halfway through! The remaining chapters are equally
detailed, but I'm going to start skimming through them somewhat. They
cover the interactions of IronPython with more advanced .NET topics such
as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Windows Presentation Foundation (WPF) and IronPython&lt;/em&gt; - WPF is
    the DirectX user interface library that is a successor to Windows
    Forms. This includes XAML, an XML dialect for describing user
    interfaces, decoupling their implementation from application logic.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Windows System Administration with IronPython&lt;/em&gt; - using IronPython
    as a scripting language for sysadmin automation tasks, from the
    simple, such as copying files, to the complex, such as Windows
    Management Instrumentation (WMI), administration of remote machines,
    and a substantial discussion on the uses of PowerShell with
    IronPython.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IronPython and&lt;/em&gt; &lt;em&gt;ASP.NET&lt;/em&gt; - building a web-based front end to the
    sample application developed earlier. Reusable controls.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Databases and Web Services&lt;/em&gt; - using ADO.NET to work with databases,
    and using SOAP and REST.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Silverlight: IronPython in the browser&lt;/em&gt; - creating Silverlight
    applications, and accessing the browser DOM from them.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Extending IronPython with C#/.NET&lt;/em&gt; - all about creating C# class
    libraries for use in IronPython, calling unmanaged code from
    IronPython, and creating interfaces on your C# classes to provide
    dynamic, Pythonic behaviour. It also includes dynamic compilation of
    assemblies at runtime, which opens the door to advanced
    code-generation techniques.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Embedding the IronPython Engine&lt;/em&gt; - many developers might want to
    provide IronPython as a scripting language within their own
    application, and this chapter shows you how.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alright, that's it! There are appendices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A whirlwind tour of C#&lt;/em&gt; - in case anyone wants more guidance while
    looking at some of the C# code or concepts that are discussed
    throughout the book.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python magic methods&lt;/em&gt; - a description of &lt;em&gt;all&lt;/em&gt; the Python magic
    double-underscore methods, which is a fabulous resource, one which l
    haven't seen collected anywhere else, and have been referring back
    to ever since I read the book.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there you have it. If you haven't inferred already, I learned
absolutely &lt;em&gt;heaps&lt;/em&gt; from this book, even though it's about a language and
environment I've been using every day for years. I think I can say
without any equivocation that this is the best IronPython book &lt;em&gt;in the
world&lt;/em&gt;. If you're a .NET person who is curious about Python (and believe
me, &lt;a href="http://xkcd.com/353/"&gt;you&lt;/a&gt;
&lt;a href="http://www.paulgraham.com/avg.html"&gt;should&lt;/a&gt;
&lt;a href="http://www.python.org/about/success/esr/"&gt;be&lt;/a&gt;), or if you're a Python
person who fancies .NET - maybe for DirectX or Silverlight or any number
of other wonderful things, then you should absolutely go directly to the
&lt;a href="http://www.ironpythoninaction.com/"&gt;IronPython in Action book website&lt;/a&gt;
right this second and buy it.&lt;/p&gt;
&lt;p&gt;What are you still doing here?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Good catch Carl, I forgot the all-important rating!&lt;/p&gt;
&lt;p&gt;10/10 if you already use, or are curious about using, IronPython - then
you need this book.&lt;/p&gt;
&lt;p&gt;0/10 if dynamic languages make you break out in hives, or if .NET makes
you think of Darth Vader, then you shouldn't touch this book with a
barge pole.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>python</category><guid>https://www.tartley.com/posts/2009/7/18/ironpython-in-action.html</guid><pubDate>Sat, 18 Jul 2009 17:03:31 GMT</pubDate></item><item><title>Opengl Shading Language</title><link>https://www.tartley.com/posts/2009/5/11/opengl-shading-language.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://www.amazon.co.uk/Opengl-Shading-Language-Randi-Rost/dp/0321334892"&gt;&lt;img alt="OpenGL Shading Language cover" src="https://www.tartley.com/files/2009/05/opengl-shading-language.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Randi J. Rost.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I've had a passing interest in computer graphics for years, but had
avoided the technology of &lt;em&gt;shaders&lt;/em&gt; these last few years, thinking that
they were just another layer of complexity which I didn't need to embark
upon while I was still getting to grips with the standard OpenGL API.&lt;/p&gt;
&lt;p&gt;With hindsight, I was wrong. I was recently cajoled into getting on
board after talking to &lt;a href="http://blog.vrplumber.com/"&gt;Mike Fletcher&lt;/a&gt;
(creator of &lt;a href="http://pyopengl.sourceforge.net/"&gt;PyOpenGL&lt;/a&gt;) after his talk
at PyCon, and now I feel as if I should have read this book years ago.
Shaders solve many of the problems I've been happily messing with for
ages, in ways that are easier to implement, more powerful, and more
performant.&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://www.tartley.com/opengl-programming-guide-6th-ed"&gt;whined about the Red Book&lt;/a&gt;, but this
"Orange" OpenGL Shading Language book is brill - just what I needed.
Incisive without being overly terse, practical, and once it got into the
chapters about applications of multidimensional Perlin noise it got me
all hot'n'bothered about computer graphics again. Yay my inner geek!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I started this book fascinated by using vertex shaders to
transform geometry on the fly, with little interest in the superficial
fragment shaders used to decorate the rendered surfaces with pretty
images or lighting effects. Since finishing it, this has reversed: I've
become obsessed with noise and Fourier transforms and all the
paraphernalia of fragment shaders, imagining relatively simple fragment
shader that could, I believe, provide a surface with infinite levels of
detail. I dreamed about my old university 'Signals &amp;amp; Systems' type
lectures. Uncanny.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update2:&lt;/strong&gt; Ohdear. Once I started trying to write anything more than
the most trivial of my own shaders, I ran into an unexpected problem. My
shaders just wouldn't link. I couldn't figure out why. The book was no
help. &lt;em&gt;Google&lt;/em&gt; was no help. The error messages &lt;em&gt;certainly&lt;/em&gt; weren't any
help (thanks ATI.) Eventually I realised that the 'built-in' noise
functions which are part of the OpenGL shader language are simply not
implemented by the vast majority of graphics card manufacturers - you
have to roll your own. Which is not a major deal-breaker, but what
&lt;em&gt;is&lt;/em&gt; disappointing is that the OpenGL Shader Language book makes
absolutely no mention of this in any of the chapters plural in which it
lovingly describes the built-in noise functions, along with their
characteristics and uses. Perhaps I spoke too soon when praising the
book. Maybe it is another case of idealistic OpenGL theory that has
something of a disconnect with real world development. Maybe the book
was written before this situation came to pass - regardless, it's no
bloody use to me.&lt;/p&gt;
&lt;p&gt;Rating (oh, how I love my new rating system. Check this one out:)&lt;/p&gt;
&lt;p&gt;10/10 if you want to learn &lt;em&gt;the theory of&lt;/em&gt; how to use the OpenGL shader
language.&lt;/p&gt;
&lt;p&gt;0/10 if you don't.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>graphics</category><guid>https://www.tartley.com/posts/2009/5/11/opengl-shading-language.html</guid><pubDate>Tue, 12 May 2009 03:19:26 GMT</pubDate></item><item><title>Makers</title><link>https://www.tartley.com/posts/2009/4/18/makers.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;by Cory Doctorow&lt;/em&gt; (not yet published.)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://craphound.com/"&gt;Cory&lt;/a&gt; very kindly brought an early manuscript of
this as a gift to &lt;a href="http://www.voidspace.org.uk/"&gt;Michael&lt;/a&gt;,
&lt;a href="http://www.gilesthomas.com/"&gt;Giles&lt;/a&gt; and I when we met him a while ago,
and I've been wracked with guilt ever since because I apparently lost it
soon after. Thankfully, it recently turned up (on
&lt;a href="http://babbageclunk.com/"&gt;Christian&lt;/a&gt;'s desk - my fault!) last week, so
I happily finished it pronto.&lt;/p&gt;
&lt;p&gt;It's his best fiction yet! He must be honing his abilities with
practice. \o/ Michael do you want it next?.&lt;/p&gt;
&lt;p&gt;Christian doesn't like my subjectivity-proof rating system, so this one
is specially for him.&lt;/p&gt;
&lt;p&gt;Rating:&lt;/p&gt;
&lt;p&gt;10/10 if you want a lightly styled but deeply speculative and engrossing
story that winds a like a sightseeing tour around the social and
personal ramifications of the ways in which modern technology is
changing the way people interact, organise and get things done.&lt;/p&gt;
&lt;p&gt;0/10: If you aren't interested in the ways society is changing under our
feet.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>fiction</category><guid>https://www.tartley.com/posts/2009/4/18/makers.html</guid><pubDate>Sat, 18 Apr 2009 22:10:31 GMT</pubDate></item><item><title>Envisioning Information</title><link>https://www.tartley.com/posts/2009/4/14/envisioning-information.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="Envisioning Information cover" src="https://www.tartley.com/files/2009/04/envisioning_information.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Edward R. Tufte&lt;/em&gt; (1990)&lt;/p&gt;
&lt;p&gt;In much the same vein as Tufte's &lt;em&gt;The Visual Display of Quantitative
Information&lt;/em&gt;, and displaying the same calibre of deeply incisive
common-sense that cuts to the heart of all that's right and wrong about
the art and science of 'information design' - graphic design's more
pragmatic nephew.&lt;/p&gt;
&lt;p&gt;If you love beauty in highly functional graphics, from maps and
diagrams, charts and graphs, tables and typography, then this is for
you.&lt;/p&gt;
&lt;p&gt;Rating:&lt;/p&gt;
&lt;p&gt;10/10 If bad diagrams make you cringe, and good ones make you laugh out
loud.&lt;/p&gt;
&lt;p&gt;0/10 If you only care about beauty, but not about usefulness. Or if you
don't have eyes.&lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>graphics</category><guid>https://www.tartley.com/posts/2009/4/14/envisioning-information.html</guid><pubDate>Tue, 14 Apr 2009 18:07:07 GMT</pubDate></item></channel></rss>