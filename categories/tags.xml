<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com (Posts about tags)</title><link>https://www.tartley.com/</link><description></description><atom:link href="https://www.tartley.com/categories/tags.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:tartley @ the domain tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Fri, 30 Oct 2020 15:58:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TIL: Git Annotated Tags</title><link>https://www.tartley.com/posts/til-git-annotated-tags/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;I've previously only ever used git's regular &lt;em&gt;lightweight&lt;/em&gt; tags, created with
&lt;code&gt;git tag TAGNAME&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Today I learned about &lt;em&gt;annotated&lt;/em&gt; tags, created with &lt;code&gt;git tag -a -m "MESSAGE"
TAGNAME&lt;/code&gt;. If you don't specify &lt;code&gt;-m MESSAGE&lt;/code&gt;, git annoyingly prompts you for
one, but it will accept &lt;code&gt;-m ""&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Annotated tags store the creator, created timestamp, and the message. This
might occasionally be useful for understanding what happened. A release tagged
this way shows us who created the release, and when, which might differ from
when the commit was created.&lt;/p&gt;
&lt;p&gt;But more importantly is the different handling of lightweight versus
annotated tags when pushing to the server.&lt;/p&gt;
&lt;p&gt;Habitually, I've been using:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;git push --tags
&lt;/pre&gt;
&lt;p&gt;This is slightly broken, in that it pushes &lt;em&gt;all&lt;/em&gt; tags. Some tags might be
intended as my private local development state. Some of them might be
unreachable in the origin repo.&lt;/p&gt;
&lt;p&gt;To fix this, git push introduced: &lt;code&gt;--follow-tags&lt;/code&gt;, which aims to address these
issues by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only pushing annotated tags (hence, lightweight tags can be used as local,
  private state)&lt;/li&gt;
&lt;li&gt;Only pushing tags that are on an ancestor of the commit being pushed. Hence
  no unreachable tags are created on the origin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or alternatively, just push the tag name directly:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;git push TAGAME
&lt;/pre&gt;
&lt;p&gt;Upshot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For private local state, use regular lightweight tags.
  Never push them. Hence never use &lt;code&gt;git push --tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For public shared tagging, such as releases, use annotated tags,
  pushed either individually by name, or by using &lt;code&gt;--follow-tags&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>git</category><category>tags</category><category>til</category><category>version-control</category><guid>https://www.tartley.com/posts/til-git-annotated-tags/</guid><pubDate>Sat, 17 Oct 2020 05:40:24 GMT</pubDate></item></channel></rss>