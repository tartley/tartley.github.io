<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com (Posts about Software)</title><link>https://www.tartley.com/</link><description></description><atom:link href="https://www.tartley.com/categories/cat_software.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:tartley@domain tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Thu, 11 Jun 2020 21:33:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Understanding git rebase so it sticks</title><link>https://www.tartley.com/posts/2014/2/7/understanding-rebase-so-it-sticks.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;I endlessly misremember how to use git rebase. That ends today. Here are
my notes to help me remember.&lt;/p&gt;
&lt;p&gt;Rebase is traditionally documented as:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rebase &lt;span class="o"&gt;[&lt;/span&gt;--onto newbase&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;upstream &lt;span class="o"&gt;[&lt;/span&gt;branch&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This is confusing for several reasons. A slight improvement is to rename
the args:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rebase &lt;span class="o"&gt;[&lt;/span&gt;--onto target&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;exclude &lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt; is the tip of the branch to be transplanted. If omitted,
    it defaults to the current branch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude&lt;/code&gt; excludes all its ancestors from being transplanted. Hence
    the transplanted branch will have its tip at &lt;code&gt;include&lt;/code&gt;, and its base
    at the common ancestor of &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt;. If &lt;code&gt;--onto&lt;/code&gt; isn't
    specified, &lt;code&gt;exclude&lt;/code&gt; is also used as the destination for the
    transplant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt; is the place to transplant the branch to. If not specified,
    it defaults to the value of &lt;code&gt;exclude&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, a simple before and after:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;o---o---o---o---o---o exclude
     \
      1---2---3 current branch
                or include
&lt;/code&gt;&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rebase exclude &lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                exclude
                v
o---o---o---o---o---1---2---3 current branch
                              or include
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;See how the commits to be transplanted start at &lt;code&gt;include&lt;/code&gt; and go back to
the common ancestor of that and &lt;code&gt;exclude&lt;/code&gt;. Since &lt;code&gt;--onto&lt;/code&gt; isn't
specified, &lt;code&gt;exclude&lt;/code&gt; is also used as the transplant destination.&lt;/p&gt;
&lt;p&gt;Or a more complex one:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; o---o---o---o---o target
      \
       o---o---o exclude
            \
             1---2 current branch
                   or include
&lt;/code&gt;&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rebase --onto target exclude &lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                    target
                    v
    o---o---o---o---o---1---2 current branch
         \                    or include
          o---o---o
                  ^
                  exclude
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Again, the commits to be transplanted are defined by &lt;code&gt;include&lt;/code&gt; and
&lt;code&gt;exclude&lt;/code&gt;, but this time a separate destination is specified using
&lt;code&gt;--onto&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Git</category><category>Software</category><guid>https://www.tartley.com/posts/2014/2/7/understanding-rebase-so-it-sticks.html</guid><pubDate>Fri, 07 Feb 2014 16:28:37 GMT</pubDate></item><item><title>Launch Gitk displaying all branches</title><link>https://www.tartley.com/posts/2010/12/31/launch-gitk-displaying-all-extant-branches.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; All of the below is made totally redundant by simply using
&lt;code&gt;gitk --all&lt;/code&gt;. Thanks Russel!&lt;/p&gt;
&lt;p&gt;When I launch Gitk, it just displays the current branch. To display
other branches, you must name them on the command line. To display all
existing branches, you need to find out all the branch names:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git branch
  create-sql-dev
  formula-rewrite
* master
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then laboriously type them in to the gitk command line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gitk create-sql-dev formula-rewrite master
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Alternatively, save this Bash snippet in a script on your PATH. I call
mine gitka, for 'all branches':&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# run gitk, displaying all existing branches&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; b in &lt;span class="s2"&gt;"`git branch`"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s2"&gt;"*"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs gitk
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="Gitk displaying all branches, not just the current ('master' in bold)" src="https://www.tartley.com/files/2010/12/gitk-all-branches.png" title="gitk-all-branches"&gt;&lt;/p&gt;
&lt;p&gt;This works on Windows too, if you save it as 'gitka.sh', and have Cygwin
installed and associate the .sh filename extension with the Cygwin Bash
executable. You can then run it as 'gitka' from a Windows command prompt
thingy. If you then use 'ln -s gitka.sh gitka', then you can also run it
as just 'gitka' from a Cygwin bash prompt too - without this you would
have had to type out the full 'gitka.sh'.&lt;/p&gt;&lt;/div&gt;</description><category>Git</category><category>MSWin-dev</category><category>Software</category><guid>https://www.tartley.com/posts/2010/12/31/launch-gitk-displaying-all-extant-branches.html</guid><pubDate>Fri, 31 Dec 2010 18:25:31 GMT</pubDate></item><item><title>MSWindows Programming : Propogating child process exit values out of .bat scripts</title><link>https://www.tartley.com/posts/2010/1/21/mswindows-programming-propogating-child-process-exit-values-out-of-bat-scripts.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;"God &lt;em&gt;dammit&lt;/em&gt;. Why won't you just DO what I WANT you hopeless pile of
crap!"&lt;/p&gt;
&lt;p&gt;So goes the refrain. I think you know where I'm coming from. Yet again,
I have ended up learning far more about crappy DOS scripting than I ever
wanted to know.&lt;/p&gt;
&lt;p&gt;So I'm writing a program to automate some small task on Windows. One of
the jobs of this tool is to modify the current environment. But I don't
know how a child process in Windows can modify the environment of it's
parent (namely the command-line shell that invoked it.) Can it be done?&lt;/p&gt;
&lt;p&gt;So I hack a ghastly workaround: Wrap the script in a .bat file. A .bat
file is invoked from the command-line in the same process as the shell,
so any change it makes to the environment are made to the environment of
the invoking shell itself. This also has the advantage that the tool can
now be invoked by typing 'toolname', just like on other platforms, as
opposed to 'toolname.py' or even 'python toolname.py'. So I wrap my
Python script 'toolname.py' with a new file, 'toolname.bat', living in
the same directory:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="ss"&gt;"%~dp0%~n0.py"&lt;/span&gt; &lt;span class="o"&gt;%*&lt;/span&gt;

&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="k"&gt;any&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;THIS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;THAT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The %\~dp0 and %\~n0 gobbledygook is a batch file way of referencing the
same drive, path and filename (minus extension) as the current script,
to which I add '.py' to run toolname.py. Easy enough.&lt;/p&gt;
&lt;p&gt;There's a minor problem: The environment changes that need to be made
depend on what goes on inside toolname.py. So I have that Python write a
new batch file to the temp directory, containing all the 'set' commands
which will replace the hardcoded 'set THIS=THAT' in the above script.
Then we call that new temporary bat file from here:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="ss"&gt;"%~dp0%~n0.py"&lt;/span&gt; &lt;span class="o"&gt;%*&lt;/span&gt;

&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="k"&gt;any&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Temp&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;%~&lt;/span&gt;&lt;span class="n"&gt;n0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;setvar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which is good enough. Presumably it will barf all over the place if run
concurrently. But there's a more pressing problem. I need the exit value
of this tool to be equal to the exit value from toolname.py. Currently,
the exit value of this .bat script is always zero, because the 'call'
command at the end is always successful.&lt;/p&gt;
&lt;p&gt;One solution I've seen used is to remember the exit value from
toolname.py, and then use the DOS exit command to propagate this value
out to our caller:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="ss"&gt;"%~dp0%~n0.py"&lt;/span&gt; &lt;span class="o"&gt;%*&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;EXITVAL&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="n"&gt;ERRORLEVEL&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;

&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="k"&gt;any&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Temp&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;%~&lt;/span&gt;&lt;span class="n"&gt;n0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;setvar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;

&lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;EXITVAL&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The problem with this is that 'exit' doesn't do what you think it does.
It doesn't just stop interpreting the current script, rather it
terminates the current interpreter, ie. the shell that is running the
script. If you run this from a command-line, since Windows doesn't
differentiate between a console and a shell, your window disappears.
&lt;em&gt;Sigh&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The exit command has a fix for this: It takes a switch '/B', that causes
it to just end the current script, rather than killing the shell. But
now, it ignores any %EXITVAL% parameter you try to feed it, so the exit
value of your batch file is always zero.&lt;/p&gt;
&lt;p&gt;This is what I get for developing software on Windows. Nothing ever
works the way it ought to. It's as though everything were designed to
oppose simple engineering idioms, like composing systems out of small,
interchangeable parts.&lt;/p&gt;
&lt;p&gt;So here's what I finally did. The exit value of running a batch script
can be set without using the hopelessly brain-dead 'exit' command. It is
equal to the exit value of the last process the script invokes. So
instead of exit, simply find a process that will exit with the value you
need, and invoke it as the final command in your batch script:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="s2"&gt;"%~dp0%~n0.py"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;%*&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;EXITVAL&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="n"&gt;ERRORLEVEL&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;

&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
&lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Temp&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;\&lt;span class="o"&gt;%~&lt;/span&gt;&lt;span class="n"&gt;n0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;setvar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;

&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;propagate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;invoker&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"import sys; sys.exit(&lt;/span&gt;&lt;span class="si"&gt;%E&lt;/span&gt;&lt;span class="s2"&gt;XITVAL%)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Bingo. I now have a Python process that can modify the environment of
its invoking shell, and propagates the correct exit value out of the
wrapping DOS script. [Short bow. Applause. Roses. etc.]&lt;/p&gt;&lt;/div&gt;</description><category>MSWin-dev</category><category>Software</category><guid>https://www.tartley.com/posts/2010/1/21/mswindows-programming-propogating-child-process-exit-values-out-of-bat-scripts.html</guid><pubDate>Fri, 22 Jan 2010 02:04:25 GMT</pubDate></item><item><title>My Fonts Look Crap. I blame Windows and ATI.</title><link>https://www.tartley.com/posts/2010/1/20/my-fonts-look-crap-i-blame-windows-and-ati.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;I know, I &lt;em&gt;know&lt;/em&gt;. But I use Windows for 8 hours a day at work. So what
do you do?&lt;/p&gt;
&lt;p&gt;Here's the poster-boy for programmer-friendly fonts, your friend and
mine, everyone loves him, &lt;strong&gt;Inconsolata&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tartley.com/files/2010/01/inconsolata-11.png"&gt;&lt;img alt="inconsolata-11" src="https://www.tartley.com/files/2010/01/inconsolata-11.png" title="inconsolata-11"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don't know about you, but to me that looks unutterably crap. Wonky and
irregular. On the right of the orange line is what it looks like with
ClearType turned off. Meh. Presumably I'm doing it wrong, somehow, but
unless I figure out how, Inconsolata can fuck right off.&lt;/p&gt;
&lt;p&gt;So then I fire up the trusty fallback, &lt;strong&gt;Consolas&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tartley.com/files/2010/01/consolas-10.png"&gt;&lt;img alt="consolas-10" src="https://www.tartley.com/files/2010/01/consolas-10.png" title="consolas-10"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is better, certainly, but the letters look cramped. For the number
of visible lines in a window that size, the letters are awful small.
Again, on the right of the line is ClearType turned off - which in this
case distinctly worse.&lt;/p&gt;
&lt;p&gt;So I continue peering at a succession of monospaced idiocy, eventually
ending up on &lt;strong&gt;DejaVu Sans Mono&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tartley.com/files/2010/01/deja-vu-sans-mono-9.png"&gt;&lt;img alt="deja-vu-sans-mono-9" src="https://www.tartley.com/files/2010/01/deja-vu-sans-mono-9.png" title="deja-vu-sans-mono-9"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This still isn't perfect, but it's the best I can find. Note that it
bears out my impression of Consolas being cramped - even though the
letters are substantially larger, we still manage to fit an extra line
of text in. This time, turning ClearType off (right of the line) makes
it a little crisper, and a little more wonky, but not much.&lt;/p&gt;
&lt;p&gt;This isn't just in Vim. It looks like this in all applications. I've
tried running the &lt;a href="http://www.microsoft.com/typography/ClearTypePowerToy.mspx"&gt;ClearType Tuning
Powertool&lt;/a&gt;,
to no avail. Admittedly, all these fonts start to look a damn sight
better when I increase the size a few notches. But that's bugger all use
really, isn't it? Maybe I should be digging out some mono fonts designed
especially to be viewed at small sizes? Oooh, now that's actually not a
bad idea: How about those Android fonts everyone's banging on about?
&lt;strong&gt;Droid Sans Mono:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tartley.com/files/2010/01/droid-sans-mono-101.png"&gt;&lt;img alt="droid-sans-mono-10" src="https://www.tartley.com/files/2010/01/droid-sans-mono-101.png" title="droid-sans-mono-10"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This isn't bad, but does contain all the old 'zero vs upper-case O' and
'one versus lower-case L' ambiguities. I think I'll stick with DejaVu
Sans Mono.&lt;/p&gt;
&lt;p&gt;Does Inconsolata work OK on Windows for everyone else?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Gerry suggested trying out Proggy Fonts (thanks!). These are
bitmap fonts (unless you want to do without extended characters) so they
won't scale. Nevertheless, here's how some representative fonts from
there look. First up, &lt;strong&gt;Proggy Clean slashed zero:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tartley.com/files/2010/01/proggy-clean-sz.png"&gt;&lt;img alt="proggy-clean-sz font" src="https://www.tartley.com/files/2010/01/proggy-clean-sz.png" title="proggy-clean-sz"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I love the crisp clarity of a pixel-perfect bitmap font with no scaling
or anti-aliasing. On the downside, I have a feeling that the characters'
shapes aren't quite as well-formed and beautiful as &lt;em&gt;DejaVu&lt;/em&gt;. Not sure
whether or not this would bug me. Next up, &lt;strong&gt;Proggy Opti:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tartley.com/files/2010/01/proggy-opti.png"&gt;&lt;img alt="proggy-opti font" src="https://www.tartley.com/files/2010/01/proggy-opti.png" title="proggy-opti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Color me impressed. &lt;em&gt;Opti&lt;/em&gt; still has the wonderful pixel-perfect clarity
of &lt;em&gt;Proggy Clean&lt;/em&gt;, and manages to fit four extra lines of text into the
same sized window. Obviously in order to achieve this, the characters
are smaller than &lt;em&gt;Deja Vu&lt;/em&gt;, but this is no bad thing. I would have liked
to scale Deja Vu down a tad from the size you see it above, but if I
try, the letters start to become a little distorted and indistinct. I
might well give Opti a spin for a few days, see how it wears on me.
Thanks for the suggestion Gerry!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Nowadays I use &lt;a href="https://github.com/ProgrammingFonts/ProgrammingFonts/tree/master/Dina"&gt;Dina&lt;/a&gt;,
a monospaced bitmap font created by some obsessive with a penchant for
microscopic fonts. It's absolutely perfect.&lt;/p&gt;&lt;/div&gt;</description><category>MSWin-dev</category><category>Software</category><guid>https://www.tartley.com/posts/2010/1/20/my-fonts-look-crap-i-blame-windows-and-ati.html</guid><pubDate>Thu, 21 Jan 2010 02:21:09 GMT</pubDate></item><item><title>Programming on Windows : Use Console</title><link>https://www.tartley.com/posts/2009/10/9/programming-on-windows-use-console.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;Developing software on Microsoft Windows is a bloody awful experience
compared to the boyish flamboyance of Macs or the mad scientist
thrill-a-minute of wrestling Linux into shape. But fear no more, you no
longer need to hide behind that fullscreen IDE, pretending that the rest
of your OS doesn't exist. Help is at hand.&lt;/p&gt;
&lt;p&gt;I often feel that with just a dozen small modifications, the UI of
Microsoft Windows could be perfectly usable for me. However, successive
releases of Windows seem to steadfastly ignore the minor changes I'd
love to see. If anything, they move relentlessly in the opposite
direction with every release.&lt;/p&gt;
&lt;p&gt;This is the first in a series of tweaks to work around some of these
deficiencies, to create something approaching a sane software
development environment on Windows. If you are a *nix or command-line
jockey, this might make your visits to Windows-land more comfortable. If
you're a Visual Studio devotee, this might add some alternative tools to
your repertoire.&lt;/p&gt;
&lt;p&gt;My idea is that each post will be small enough that you can implement
the change it suggests &lt;em&gt;immediately&lt;/em&gt;, right now, as you're reading it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Console&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The console, by which I mean the black DOS 'Command Prompt' window, is
the pivot around which the rest of your software development activities
rotate. Or at least it could be, if it was any good. The built-in
Command Prompt, however, is absolute garbage. Replace it with the
poorly-named 'Console' project from SourceForge:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sourceforge.net/projects/console/"&gt;https://sourceforge.net/projects/console/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once installed, you could fiddle around with the settings endlessly, or
just copy my console.xml config to your home directory:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tartley.com/files/2009/10/console.xml"&gt;&lt;img alt="console.xml (config for Console)" src="https://www.tartley.com/files/2009/10/xml-icon.png"&gt;console.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;after which Console should look something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Console: It doesn't look like much" src="https://www.tartley.com/files/2009/10/mswindows-command-prompt.png" title="mswindows-command-prompt"&gt;&lt;/p&gt;
&lt;p&gt;Console provides a few superficial benefits that prove to be
indispensable in everyday use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cut and paste is no longer an unimaginable pain in the ass. What a
    concept. My config automatically copies selected text to the
    clipboard, so you don't even need to hit Ctrl-C. Because of this,
    I've reverted the action of Ctrl-C to its more venerable usage of
    'kill the running command'.&lt;/li&gt;
&lt;li&gt;Selecting text with the mouse now works sanely, although sadly you
    can't double/triple click to select words or lines.&lt;/li&gt;
&lt;li&gt;Multiple tabs. My config defines keys: Ctrl-T (new), Ctrl-W (close),
    and Ctrl-tab (next).&lt;/li&gt;
&lt;li&gt;PageUp and PageDown scroll, without needing to move your hand to the
    mouse. My config actually uses Shift-PageUp and Shift-PageDown, so
    that it's like old XTerms that my fingers apparently still remember.&lt;/li&gt;
&lt;li&gt;We can choose any font. I like Deja Vu Sans Monospace, no doubt you
    like something totally different.&lt;/li&gt;
&lt;li&gt;We can resize the window however we like.&lt;/li&gt;
&lt;li&gt;Transparency. I don't like it, some people do. (&lt;strong&gt;Update:&lt;/strong&gt;
    Redacted. I've been converted. Now &lt;a href="http://img177.yfrog.com/i/5cy.jpg/"&gt;I love
    it&lt;/a&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The old built-in Command-Prompt will still pop up if you double-click a
.bat file - I don't know how to change this magic built-in association.
Otherwise though, you can now just use the new Console for everything
you do.&lt;/p&gt;
&lt;p&gt;Alright. We've taken our first step. Next up, we'll see some of the uses
to which we can put our new toy.&lt;/p&gt;&lt;/div&gt;</description><category>MSWin-dev</category><category>Software</category><guid>https://www.tartley.com/posts/2009/10/9/programming-on-windows-use-console.html</guid><pubDate>Fri, 09 Oct 2009 23:18:50 GMT</pubDate></item><item><title>Making a wix installer run a program by default</title><link>https://www.tartley.com/posts/2009/10/1/making-a-wix-installer-run-a-program-by-default.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Guest post by my least favourite colleague, Tom.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Normally - but not always - people want to run a program just after the
install it - you can help then to do this by using an opt-out system
with a checkbox checked by default&lt;/p&gt;
&lt;p&gt;To create the checkbox and control whether it is set you must use the
following properties in your &lt;strong&gt;Product&lt;/strong&gt; section:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Id="WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT"
Value="Launch the cool program"
Id="WIXUI_EXITDIALOGOPTIONALCHECKBOX"
Value="1"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The value of &lt;code&gt;WIXUI_EXITDIALOGOPTIONALCHECKBOX&lt;/code&gt; controls the
checkboxes checkedness.&lt;/p&gt;
&lt;p&gt;You then need a custom action to do some launching:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Id="LaunchApplication"
BinaryKey="WixCA"
DllEntry="WixShellExec"
Impersonate="yes"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;and some UI wiring in the &lt;strong&gt;UI&lt;/strong&gt; element under the &lt;strong&gt;Product&lt;/strong&gt; element
to get you custom action called.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Control="Finish"
Event="DoAction"
Value="LaunchApplication"&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;WIXUI\_EXITDIALOGOPTIONALCHECKBOX = 1 and
NOT Installed
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Huzzah - you now may have a working installer.&lt;/p&gt;&lt;/div&gt;</description><category>Software</category><guid>https://www.tartley.com/posts/2009/10/1/making-a-wix-installer-run-a-program-by-default.html</guid><pubDate>Thu, 01 Oct 2009 23:27:29 GMT</pubDate></item><item><title>On Estimates</title><link>https://www.tartley.com/posts/2009/6/18/on-estimates.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;There is a lot of room for miscommunication about estimates, as people
have a startling tendency to think wishfully that the sentence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I estimate that, if I really understand the problem, it is about 50%
likely that we will be done in five weeks (if no one bothers us during
that time).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;really means:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I promise to have it all done five weeks from now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;from &lt;a href="https://braydie.gitbooks.io/how-to-be-a-programmer/content/en/"&gt;How to be a
Programmer&lt;/a&gt;,
by Robert L. Read.&lt;/p&gt;&lt;/div&gt;</description><category>Software</category><guid>https://www.tartley.com/posts/2009/6/18/on-estimates.html</guid><pubDate>Thu, 18 Jun 2009 14:40:15 GMT</pubDate></item><item><title>lang.name, lang.desc for lang in self.languages</title><link>https://www.tartley.com/posts/2008/9/30/a-bit-of-fun.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://jtauber.com/blog/"&gt;Unnofficial meme&lt;/a&gt; from the &lt;a href="http://www.planetpython.org"&gt;Unofficial Planet
Python&lt;/a&gt;, programming languages you know or
have known:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BASIC&lt;/strong&gt; (ZX Spectrum, BBC and GFA) Thanks Mum and Dad for buying
    the old Speccy for me and my brother, and thanks also to WHSmiths
    for replacing about twenty of them free of charge, bricked by
    wobbling peripherals. Was slow, slow, slow. Be thankful those pixels
    were so big. The foray into BBC BASIC came for a single, albeit
    paying, project at the school where my Dad was headmaster. I also
    wrote a bunch of GFA BASIC on the Atari ST, which was relatively
    cool, as these things go. Did away with line numbers, had parameters
    passable by value or reference, and compiled to produce reasonably
    fast stand-alone executables. Lacking a compelling way to aggregate
    values into structures though.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z80 assembler&lt;/strong&gt;, self taught on the ZX Spectrum. Wrestling with
    that darn screen's convoluted memory layout.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;68000 assembler&lt;/strong&gt;, self taught on the Atari ST. Finally fast
    enough to do wonderful things to the screen, which had a reasonably
    sane memory representation. Wished I was doing it on an Amiga
    instead though.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;, learned on-the-job at a student apprenticeship at Marconi R&amp;amp;D
    during my university holidays. Special mention deserved for
    Kernighan and Ritchie &lt;a href="http://en.wikipedia.org/wiki/The_C_Programming_Language_(book)"&gt;&lt;em&gt;The C Programming
    Language&lt;/em&gt;&lt;/a&gt;,
    as beautifully definitive and concise description of the language -
    just about every computer book employs a detracting surplus of
    verbiage in comparison.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modula-2&lt;/strong&gt;, as part of the aforementioned apprenticeship. My first
    OO, I guess. Full of great ideas that I didn't fully appreciate at
    the time, having never worked on large enough projects to require
    them (or indeed, any project that wasn't a personal bedroom
    project.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pascal&lt;/strong&gt;, for a one-term 3D graphics project at university.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C++&lt;/strong&gt;, on the PC, self-taught using a mixture of pirated and
    cut-price academic Visual Studio licenses. Anyhow, this then lead to
    years and years of professional C++ development, mostly on various
    UNIX boxes, mostly in the GIS industry. So exhilarating when it
    worked, with the intricate, interlocking mechanisms whirling their
    fiendishly efficient blades through tasks like a light sabre through
    butter. But writing it, with hindsight, was *so* *much*
    *work*. And such an utter ball ache to find those intermittent
    bugs that would shake the whole thing explosively to pieces like a
    brick through a jet engine when you least expected it. I must have
    been a masochist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BASH&lt;/strong&gt; shell scripts, still in daily use to this day, mostly tiny
    bits of script-fu to automate common desktop tasks, or pipe the
    output from one thing into some other thing, or heck, even to just
    do some sorting or filtering on part of the file you're editing in
    &lt;em&gt;Vi&lt;/em&gt;. Absolutely indispensable to me, despite the fact that half the
    time I'm wrestling with the impedance mismatch of running it in
    Cygwin on Windows. I literally don't understand how developers can
    get along without using it *everywhere*.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL&lt;/strong&gt; and a bunch of stored procedures in &lt;strong&gt;PL-SQL&lt;/strong&gt; (procedural
    SQL.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C#&lt;/strong&gt;. Lots to like here, we spent a couple of very happy years
    together.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Basic 6&lt;/strong&gt;, and then later some &lt;strong&gt;Visual Basic .NET&lt;/strong&gt;. They
    made me do it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;, including &lt;strong&gt;IronPython&lt;/strong&gt; (Python as a dot Net language.)
    Nirvana at last. Apart from BASH, it's the only entry on the list
    that I still use frequently and gleefully today.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GLSL&lt;/strong&gt;, for hobbyist graphics and games.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scheme&lt;/strong&gt; to the extent that I worked through SICP, twice.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt;, for a new service in IBM Cloud.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt;, to maintain an old service in IBM Cloud. Two PR's thus far.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I find my lack of &lt;strong&gt;LISP&lt;/strong&gt; and its derivatives disturbing. And last year
I recall entertaining fantasies of learning &lt;strong&gt;D&lt;/strong&gt;, to see if I could use
it as a more civilised alternative to C-extensions for Python. And just
yesterday I was playing with a minimal OpenGL fragment and vertex
shaders, longing to be conversant with &lt;strong&gt;Cg&lt;/strong&gt;. Yeah yeah, I'll figure
them all out later this week...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: First time through I forgot all about SQL, PL-SQL and BASH.&lt;/p&gt;&lt;/div&gt;</description><category>Software</category><guid>https://www.tartley.com/posts/2008/9/30/a-bit-of-fun.html</guid><pubDate>Wed, 01 Oct 2008 00:44:25 GMT</pubDate></item><item><title>Writing C/C++ on Windows using g++ under Cygwin</title><link>https://www.tartley.com/posts/2008/7/9/writing-cc-on-windows-using-g-under-cygwin.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;I wrote this ages ago, for the benefit of a Windows user who wanted
guidance getting set up with a free C/C++ compiler to learn the
language. I recommended using the g++ compiler in a command-line
environment under Cygwin, with the following guide to getting started. I
recently found it lurking on my hard-drive, and figured it's not doing
any good to anyone sitting there, so here it is, just in case.&lt;/p&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This article outlines one method of using the open source C/C++
compiler, Gcc to compile C/C++ programs on a Windows PC. It uses Cygwin,
which emulates a Linux-like command-line environment, which is many
times more useful and powerful than the DOS command line that comes out
of the box with Windows.&lt;/p&gt;
&lt;p&gt;Of course, if you don't like all this free-as-in-beer,
free-as-in-speech, command-line hippy nonsense, you could always just
splash out for Visual Studio instead. Such a well-designed IDE has many
strengths - but so does the approach I am about to describe. Choose the
tool appropriate to the task in hand.&lt;/p&gt;
&lt;h4&gt;Install Cygwin&lt;/h4&gt;
&lt;p&gt;Download and run setup.exe from &lt;a href="http://www.cygwin.com/setup.exe"&gt;http://www.cygwin.com/setup.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The root directory you specify to the installer, default C:\cygwin,
will be your Unix root (/) directory under Cygwin. If this doesn't mean
much to you, see the (currently hyperthetical) section on Unix
filesystems below.&lt;/p&gt;
&lt;p&gt;Install for all users, and leave default text file type as Unix, not
DOS. There are more &lt;a href="https://www.tartley.com/posts/2008/7/9/%20http:/www.cygwin.com/cygwin-ug-net/setup-net.html"&gt;instructions for Cygwin
setup&lt;/a&gt; online,
but my intention is that this document should be sufficient.&lt;/p&gt;
&lt;p&gt;Eventually you get to choose which packages to install. This window is
resizable, even though it doesn't look like it. Maximise it. Also,
select the 'Curr' radiobutton on the top right - so that we only view
the current versions of each package. (as opposed to old or experimental
versions.)&lt;/p&gt;
&lt;p&gt;Expand the categories on the left by clicking their '+' signs. The
'current' column is empty, because you don't yet have anything
installed. Under the 'new' column, you can click the word 'skip' to
select which version of each package you wish to install. This installer
understands the dependencies between packages, so selecting package A
which requires package B will automatically select package B.&lt;/p&gt;
&lt;p&gt;Everything under the 'Base' category is already selected, plus their
dependencies. This is a minimal Cygwin install, to which we will now add
one or two things.&lt;/p&gt;
&lt;p&gt;Under the 'Devel' section, find the entry for 'gcc. C compiler upgrade
helper.' Selecting the latest version of this package (3.3.3-2 as of 18
Aug 2004) will automatically select all the other parts of gcc that we
need (gcc-core, g++, etc.) as well as the 'binutils' package.&lt;/p&gt;
&lt;p&gt;Make sure the following packages are selected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devel/gcc - will automatically select some other packages&lt;/li&gt;
&lt;li&gt;Devel/make&lt;/li&gt;
&lt;li&gt;Doc/cygwin-doc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll also need a text editor. You can either select and install one of
those listed in the Cygwin installer, or else use any Windows program.
Notepad will work fine for the moment. Download Textpad for Windows if
you want something a little more useful without being intimidating. Use
something like Vi or Emacs if you are already familiar with them.&lt;/p&gt;
&lt;p&gt;Click [Next] when you're done. Setup downloads and installs the
selected packages.&lt;/p&gt;
&lt;h4&gt;Run Cygwin&lt;/h4&gt;
&lt;p&gt;Double click the Cygwin icon on your desktop. You should get an
uninspiring DOS-like text terminal in a window. Type the command 'ls',
which lists the files in the current directory. From now on I'll show
commands you should type in &lt;code&gt;monospace&lt;/code&gt;, preceded by a dollar sign,
possibly followed by expected output of the command, like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls
My Pictures My eBooks My Music
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;With any luck, you should recognise the files listed as those residing
in your My Documents directory.&lt;/p&gt;
&lt;p&gt;I don't know how much/little Unix or Linux you know, so I'm going to
explain that as little as possible for now, and just press on with what
commands you need to type to get a C program compiled.&lt;/p&gt;
&lt;h4&gt;Create a C file&lt;/h4&gt;
&lt;p&gt;Create a new directory within 'My Documents', where our C programs will
live. You can use Linux commands if you know them, or use your Windows
Explorer thing. I'm going to use Linux commands:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir cprogs
$ &lt;span class="nb"&gt;cd&lt;/span&gt; cprogs
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;(The 'cd' changes directory into the new 'cprogs' directory. Note that
the yellow '\~' above your dollar prompt has changed into a yellow
'\~/cprogs', to indicate this. So now if we type 'ls', then it lists
nothing - our new directory is empty.)&lt;/p&gt;
&lt;p&gt;Next we want to create our c source file. If you installed vi or emacs
as part of the cygwin setup, then you can use these here:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ vi myprog.c
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Otherwise, you can just use notepad, or any other windows text editor.
You can invoke it from the command line if you wish.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ notepad myprog.c
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Enter and save the following minimal program:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Notice that, while notepad is still open, you can no longer type
anything in your Cygwin terminal window. Cygwin is waiting for notepad
to finish before it lets you type anything else. Save and quit notepad
(now you can type again) and then run it once more, appending an
ampersand at the end of the command:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ notepad myprog.c &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The ampersand tells cygwin to run notepad 'in the background', while
allowing the cygwin terminal to continue accepting input. For example,
while notepad is still open, you can now issue a command to compile your
program.&lt;/p&gt;
&lt;h4&gt;Compiling&lt;/h4&gt;
&lt;p&gt;To compile the program, we invoke the gcc program that we installed as
part of cygwin setup:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gcc myprog.c -o myprog
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This tells the program gcc to compile myprog.c, and to call the output
file myprog. If this produces error messages, check the program in
Notepad, save again (Ctrl+S in Notepad) and then recompile. Note that
you can re-issue the compile command by pressing the up arrow key, then
return. If the compile command produces no error messages, nor any other
kind of response, then the compilation has been successful. You can
verify this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls myprog.c myprog.exe
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;(Note: on a real Unix/Linux box, the program would have no '.exe'
extension. It would simply be called 'myprog'.)&lt;/p&gt;
&lt;p&gt;And to run your new program:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./myprog
Hello World
&lt;/code&gt;&lt;/pre&gt;


&lt;h4&gt;Wrapup&lt;/h4&gt;
&lt;p&gt;That's the basics. You've got yourself a kick-ass C compiler (or C++
compiler if you invoke it with 'g++' instead of 'gcc') along with a
Linux-like environment to use it in. All for free, and without having to
repartition your existing Windows install or suffer the frustration of a
dual-boot system.&lt;/p&gt;
&lt;h3&gt;The Art of Unix&lt;/h3&gt;
&lt;p&gt;It should be noted that a real Unix/Linux development environment will
build on the arrangement described above, often in the Unix style of
'many small tools talking to each other', rather than as a single
monolithic application in the style of Visual Studio. This allows
competing tools to be slotted into place, giving the developer the
maximum freedom of choice. For example, it is trivial to replace Gcc
with the Intel C++ compiler, Icc, resulting in faster execution speed at
a cost of cross-platform compatibility. Such flexibility leaves the
developer free to retain their favourite text editor, debugger, etc,
regardless of the type of work or what project they are working on.&lt;/p&gt;
&lt;p&gt;The command-line is often frowned upon by developers more familiar with
a GUI way of working, who tend to assume that such an ancient interface
represents a cruder way of working. In actual fact, the reverse is true.
A GUI is good for providing guidance to novice users, but ultimately
proves limited and inflexible. One can only use a GUI application for
exactly the uses the original developer envisaged. With a well-designed
command-line, the user is faced with a steeper learning curve, but is
then free to combine programs in novel and constructive ways.&lt;/p&gt;
&lt;p&gt;For example, suppose we had 100 C programs to compile (not so
far-fetched if these are actually libraries or plug-ins.) In many IDE
GUI environments, the user would have no choice but to spend all
afternoon loading each program in turn and clicking the [compile]
button. Knowing a little command line magic, however, makes it a
ten-second job:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="k"&gt;for&lt;/span&gt; SOURCE in *.c&lt;span class="p"&gt;;&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;do&lt;/span&gt;
&amp;gt;   gcc &lt;span class="nv"&gt;$SOURCE&lt;/span&gt; -o &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SOURCE&lt;/span&gt;&lt;span class="p"&gt;%.c&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Each method has it's strengths and should be used where they are most
appropriate.&lt;/p&gt;&lt;/div&gt;</description><category>Software</category><guid>https://www.tartley.com/posts/2008/7/9/writing-cc-on-windows-using-g-under-cygwin.html</guid><pubDate>Thu, 10 Jul 2008 03:57:50 GMT</pubDate></item><item><title>Perl: parody of itself</title><link>https://www.tartley.com/posts/2007/7/27/perl-parody-of-itself.html</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;Hey. I'm doing some Perl coding on the side. Who knows a good way to
interleave two lists? For example, combining (1, 3 ,5) and (2, 4, 6) to
produce ((1, 2), (3, 4), (5, 6)) ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's easy, Perl has a built-in zip operator:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sb"&gt;`my @result = (1, 3 ,5) Â¥ (2, 4, 6)`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;p&gt;Brilliant, thanks. Hang on. What the crap!? Is that really a &lt;em&gt;Yen&lt;/em&gt;
symbol in there? You have got to be shitting me. What. The. Crap.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ha! Yeah, I know, its a little weird, but since Perl supports source
code unicode encodings, we thought "why not?" Typographically, it looks
like a little zipper, you see? Geddit?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Right. I see that now. Um. So which unicode Yen symbol do I use?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Â¥ U+00A5 YEN SIGN&lt;/span&gt;
&lt;span class="err"&gt;ï¿¥ U+FFE5 FULLWIDTH YEN SIGN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;They both look the same in my browser. In fact, they both just look like
question-marks in many people's browsers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh, you can easily tell the difference - one of them simply won't work.
Just try them both out until you find the one that works!!!! :-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Right. Brilliant. And who is responsible for this gem?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh, that was Larry. Look, if you don't like it, come to think of it,
it's been renamed recently. The zip operator is now simply spelt 'Z'.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yeah, whoever would have predicted that might happen? Guess who gets
their language designer privileges revoked? Morons. Get away from me,
before I get any stupid on me.&lt;/p&gt;&lt;/div&gt;</description><category>Software</category><guid>https://www.tartley.com/posts/2007/7/27/perl-parody-of-itself.html</guid><pubDate>Fri, 27 Jul 2007 18:35:12 GMT</pubDate></item></channel></rss>