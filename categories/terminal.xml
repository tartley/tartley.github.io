<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com (Posts about terminal)</title><link>https://tartley.com/</link><description></description><atom:link href="https://www.tartley.com/categories/terminal.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:tartley @ the domain tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Wed, 08 Dec 2021 23:08:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Automate Gnome keybindings</title><link>https://www.tartley.com/posts/automate-gnome-keybindings/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;Sick of manual GUI twiddling to fix inconsistent keybindings on various
computers. Solved once and for all, by a new script in my personal
workstation setup bucket:&lt;/p&gt;
&lt;p&gt;Warning: This:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;works great on RHEL,&lt;/li&gt;
&lt;li&gt;doesn't all work on Ubuntu&amp;lt;=17.04, I suspect because Unity has
    it's own set of keybinds that are defined elsewhere.&lt;/li&gt;
&lt;li&gt;works great on Ubuntu 17.10. especially if you go in manually to
    disable the built-in keybinding for Super-V, which displays the
    calendar and notifications window, which shadows my 'toggle window
    maximize vertically'.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;kb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'org.gnome.desktop.wm.keybindings'&lt;/span&gt;

&lt;span class="c1"&gt;# Switcher, between windows not apps, uses alt-tab and alt-grave&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$kb&lt;/span&gt; switch-windows &lt;span class="s2"&gt;"['Tab']"&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$kb&lt;/span&gt; switch-windows-backward &lt;span class="s2"&gt;"['grave', 'Tab']"&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$kb&lt;/span&gt; switch-applications &lt;span class="s2"&gt;"[]"&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$kb&lt;/span&gt; switch-applications-backward &lt;span class="s2"&gt;"[]"&lt;/span&gt;

&lt;span class="c1"&gt;# Window maximize toggle, super-up&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$kb&lt;/span&gt; maximize &lt;span class="s2"&gt;"[]"&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$kb&lt;/span&gt; toggle-maximized &lt;span class="s2"&gt;"['Up']"&lt;/span&gt;

&lt;span class="c1"&gt;# Window maximize vertically toggle, super-v&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$kb&lt;/span&gt; maximize-vertically &lt;span class="s2"&gt;"['v']"&lt;/span&gt;

&lt;span class="c1"&gt;# run command, super-r&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$kb&lt;/span&gt; panel-run-dialog &lt;span class="s2"&gt;"['r', 'F2']"&lt;/span&gt;


&lt;span class="c1"&gt;# Custom commands&lt;/span&gt;

&lt;span class="nv"&gt;mk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'org.gnome.settings-daemon.plugins.media-keys'&lt;/span&gt;
&lt;span class="nv"&gt;ckb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings'&lt;/span&gt;

gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$mk&lt;/span&gt; custom-keybindings &lt;span class="s2"&gt;"['&lt;/span&gt;&lt;span class="nv"&gt;$ckb&lt;/span&gt;&lt;span class="s2"&gt;/custom0/', '&lt;/span&gt;&lt;span class="nv"&gt;$ckb&lt;/span&gt;&lt;span class="s2"&gt;/custom1/']"&lt;/span&gt;

gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$mk&lt;/span&gt;.custom-keybinding:&lt;span class="nv"&gt;$ckb&lt;/span&gt;/custom0/ name &lt;span class="s2"&gt;"screen off"&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$mk&lt;/span&gt;.custom-keybinding:&lt;span class="nv"&gt;$ckb&lt;/span&gt;/custom0/ &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s2"&gt;"screenoff"&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$mk&lt;/span&gt;.custom-keybinding:&lt;span class="nv"&gt;$ckb&lt;/span&gt;/custom0/ binding &lt;span class="s2"&gt;"z"&lt;/span&gt;

gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$mk&lt;/span&gt;.custom-keybinding:&lt;span class="nv"&gt;$ckb&lt;/span&gt;/custom1/ name &lt;span class="s2"&gt;"terminal"&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$mk&lt;/span&gt;.custom-keybinding:&lt;span class="nv"&gt;$ckb&lt;/span&gt;/custom1/ &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s2"&gt;"terminal"&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$mk&lt;/span&gt;.custom-keybinding:&lt;span class="nv"&gt;$ckb&lt;/span&gt;/custom1/ binding &lt;span class="s2"&gt;"t"&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Embedded in that is the ultimate solution to my longstanding irk with
Unity and Gnome's default window switcher (alt-tab.) By default it
groups windows of a single application together, requiring some extra
-grave pressing to navigate between windows within an application.&lt;/p&gt;
&lt;p&gt;This not only requires way more effort, but also breaks the expected
behaviour of just tapping alt-tab to go back to the last used window.
Instead it goes back to the last used application, so you can't toggle
between two windows of the same application, eg. two terminals. Absolute
madness.&lt;/p&gt;
&lt;p&gt;The above modifies alt-tab to just cycle through all windows, ungrouped,
which fixes the ability to toggle between last two windows. Also,
alt-grave is provided as an alternative to cycle backwards through the
windows, which is easier to hit than shift-alt-tab.&lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>linux</category><category>terminal</category><guid>https://www.tartley.com/posts/automate-gnome-keybindings/</guid><pubDate>Thu, 05 Oct 2017 01:06:47 GMT</pubDate></item><item><title>Postscript formatted man pages</title><link>https://www.tartley.com/posts/postscript-formatted-man-pages/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;code&gt;man&lt;/code&gt; and its &lt;code&gt;troff&lt;/code&gt; formatting can be asked to produce postscript
output. Define a Bash function, e.g. in your .bashrc:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;function&lt;/span&gt; psman &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;SLUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;FNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/tmp/man-&lt;/span&gt;&lt;span class="nv"&gt;$SLUG&lt;/span&gt;&lt;span class="s2"&gt;.pdf"&lt;/span&gt;
    &lt;span class="nb"&gt;set&lt;/span&gt; -o pipefail
    man -t &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ps2pdf - &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FNAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      nohup evince &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FNAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt;/dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
    &lt;span class="nb"&gt;set&lt;/span&gt; +o pipefail
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;(I tried to do this without tempfiles, using process substitution, &lt;a href="https://superuser.com/questions/1243405"&gt;but
failed. Anyone got better
Bash-fu&lt;/a&gt;?)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;man -t&lt;/code&gt; is the crucial part. It tells &lt;code&gt;man&lt;/code&gt; to produce output in
postscript format, which &lt;code&gt;ps2pdf&lt;/code&gt; can read, and &lt;code&gt;evince&lt;/code&gt; displays the
PDF. We disconnect the evince process using &lt;code&gt;nohup&lt;/code&gt;, so that it lives on
even if we kill the terminal. We `set -o pipefail` so that if `man`
fails, the exit code is preserved as the exit of `man|ps2pdf`, which
causes the `&amp;amp;&amp;amp;` to short-circuit, preventing evince from being run on
an empty pdf document. We restore `+o pipefail` again at the end.&lt;/p&gt;
&lt;p&gt;Then, from the command line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ psman tr
&lt;/pre&gt;
&lt;p&gt;produces&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tartley.com/files/2017/08/pman-tr.png"&gt;&lt;img alt="" src="https://www.tartley.com/files/2017/08/pman-tr.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>command-line</category><category>linux</category><category>terminal</category><guid>https://www.tartley.com/posts/postscript-formatted-man-pages/</guid><pubDate>Wed, 23 Aug 2017 01:34:02 GMT</pubDate></item><item><title>More Colored Terminal text on Windows: AnsiCon</title><link>https://www.tartley.com/posts/more-colored-terminal-text-on-windows-ansicon/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;A reminder for myself:&lt;/p&gt;
&lt;p&gt;ANSI escape characters don't work properly in Windows terminals:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before: Raw ANSI codes. Not nice." src="https://www.tartley.com/files/2010/07/ansicon00-before.png"&gt;&lt;/p&gt;
&lt;p&gt;To make them work properly, use
&lt;a href="http://adoxa.110mb.com/ansicon/index.html"&gt;AnsiCon&lt;/a&gt;. Unzip it somewhere
permanent (eg. &lt;code&gt;%ProgramFiles%\ansicon&lt;/code&gt;) and install it with:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;ansicon.exe -i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;start a new terminal, and lo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After: Pretty." src="https://www.tartley.com/files/2010/07/ansicon01-working.png"&gt;&lt;/p&gt;
&lt;p&gt;Fine tune the appearance of the programs generating the color, for
example customise 'hg diff' by editing \~/.hgrc:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;extensions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;color =&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;[color]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;status.modified = yellow bold&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;status.unknown = white&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;status.deleted = red_background white bold&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;diff.deleted = red bold&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;diff.inserted = green bold&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;diff.file_a = white&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;diff.file_b = white&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;diff.diffline = white_background black&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;diff.extended = yellow bold&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;diff.hunk = underline black&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;diff.changed = yellow bold&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="Fine-tuned" src="https://www.tartley.com/files/2010/07/ansicon02-tuned.png"&gt;&lt;/p&gt;
&lt;p&gt;ANSI is correctly stripped out if the output of a program is not a
terminal, so the colored output won't interfere with saving to files nor
machine-parsing of the text:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Filtered" src="https://www.tartley.com/files/2010/07/ansicon03-filtered.png"&gt;&lt;/p&gt;
&lt;p&gt;Finally, insert some &lt;a href="http://pueblo.sourceforge.net/doc/manual/ansi_color_codes.html"&gt;ANSI
codes&lt;/a&gt;
into your &lt;a href="http://ss64.com/nt/prompt.html"&gt;prompt&lt;/a&gt;, by setting
environment variable PROMPT:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;set PROMPT=$E[0;36m$P$_$E[36;1m$G$E[0m$S&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="Colored Prompt" src="https://www.tartley.com/files/2010/07/ansicon04-prompt.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tartley.com/?p=1062"&gt;Multiple&lt;/a&gt;
&lt;a href="http://tartley.com/?p=863"&gt;posts&lt;/a&gt; on colors and terminal text is
perhaps a bit obsessive of me. I think I'm all done now.&lt;/p&gt;&lt;/div&gt;</description><category>mswin-dev</category><category>terminal</category><guid>https://www.tartley.com/posts/more-colored-terminal-text-on-windows-ansicon/</guid><pubDate>Thu, 08 Jul 2010 19:07:09 GMT</pubDate></item><item><title>colorama: Simple cross-platform Python API for colored terminal text</title><link>https://www.tartley.com/posts/colorama-simple-cross-platform-python-api-for-colored-terminal-text/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;Announcing new Python package,
&lt;a href="http://pypi.python.org/pypi/colorama"&gt;Colorama&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ANSI escape character sequences have long been used to produce colored
terminal text on Unix and Macs. Colorama makes this work on Windows,
too. It also provides some shortcuts to help generate these ANSI
sequences, and works fine in conjunction with any other ANSI sequence
generation library, such as Termcolor
(&lt;a href="http://pypi.python.org/pypi/termcolor"&gt;http://pypi.python.org/pypi/termcolor&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This has the upshot of providing a simple cross-platform API for
printing colored terminal text from Python, and has the happy
side-effect that existing applications or libraries which use ANSI
sequences to produce colored output on Linux or Macs can now also work
on Windows, simply by calling &lt;code&gt;colorama.init()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I realise that printing colored terminal text is verging on
pathalogically superficial, but it has long irked me that this didn't
just work. Python should make this easy.&lt;/p&gt;
&lt;p&gt;My mapping of ANSI conventions to the equivalent Win32 calls is far from
perfect. Currently it has the following results. ANSI codes under Ubuntu
on gnome-terminal:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.tartley.com/files/2010/04/screenshot-ubuntu-gnometerminal.png"&gt;&lt;/p&gt;
&lt;p&gt;and the exact same ANSI codes printed on Windows under Colorama:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.tartley.com/files/2010/04/screenshot-winxp-console2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I previously wrote here about discrepancies between the two,
which have since been fixed. The only outstanding issue is that colorama
does not support 'dim' text on Windows - it looks just the same as
'normal' text, and as far as I know, will never be able to.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pypi.python.org/pypi/colorama"&gt;http://pypi.python.org/pypi/colorama&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>geek</category><category>mswin-dev</category><category>python</category><category>software</category><category>terminal</category><guid>https://www.tartley.com/posts/colorama-simple-cross-platform-python-api-for-colored-terminal-text/</guid><pubDate>Wed, 21 Apr 2010 15:18:30 GMT</pubDate></item><item><title>Testwatcher</title><link>https://www.tartley.com/posts/testwatcher/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;Sometimes when programming I like to leave unit tests running
repeatedly in one window while editing the code and tests in another.
The bash command &lt;code&gt;watch&lt;/code&gt; is useful for this, and can highlight the
differences between one invocation and the next in
inverse.&lt;/p&gt;
&lt;p&gt;I wanted a version of &lt;code&gt;watch&lt;/code&gt; for use on Windows, so I whipped up a
quick Python script,
&lt;a href="http://code.google.com/p/testwatcher/"&gt;testwatcher&lt;/a&gt;, which produces
output very similar to watch, but is cross-platform, and features not
just inverse text, but &lt;em&gt;yellow&lt;/em&gt; inverse text. Woo-hoo!&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python example_test.py
F.F
&lt;span class="o"&gt;======================================================================&lt;/span&gt;
FAIL: testThat &lt;span class="o"&gt;(&lt;/span&gt;__main__.TestWatcherTest&lt;span class="o"&gt;)&lt;/span&gt;
----------------------------------------------------------------------
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;"example_test.py"&lt;/span&gt;, line &lt;span class="m"&gt;12&lt;/span&gt;, in testThat
    self.assertEquals&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, randint&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
AssertionError: &lt;span class="m"&gt;0&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;4&lt;/span&gt;

&lt;span class="o"&gt;======================================================================&lt;/span&gt;
FAIL: testThis &lt;span class="o"&gt;(&lt;/span&gt;__main__.TestWatcherTest&lt;span class="o"&gt;)&lt;/span&gt;
----------------------------------------------------------------------
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;"example_test.py"&lt;/span&gt;, line &lt;span class="m"&gt;9&lt;/span&gt;, in testThis
    self.assertEquals&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'one'&lt;/span&gt;, object&lt;span class="o"&gt;())&lt;/span&gt;
AssertionError: &lt;span class="s1"&gt;'one'&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; d24460&amp;gt;

----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.001s

FAILED &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;failures&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Incidentally, the above test makes it very clear that Python objects in
successive processes get new addresses on Linux, but interestingly on
Windows the same addresses seems to get re-used for different processes.&lt;/p&gt;
&lt;p&gt;I can't help but suspect this is a dumb script to have written - it
should only be a:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but in order to shoehorn the inverse text and colors in, it's grown to
300 lines - a hideous bloat for a minor superficial thrill. Plus the
Windows version flickers terribly - I'm currently using &lt;code&gt;system('cls')&lt;/code&gt;
to clear the screen and then redraw it every second. I'll do some
searching for better ways to do it.&lt;/p&gt;
&lt;p&gt;However - I've long wanted a Python interface to perform simple terminal
actions like colors and animation on different platforms (the standard
library 'curses' module that would otherwise do the job is simply not
implemented on Windows.) So maybe it's time I used this script as an
excuse to figure this out. Suggestions welcome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; This idea may have now reached a viable fruition
&lt;a href="https://github.com/tartley/rerun2/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>geek</category><category>python</category><category>software</category><category>terminal</category><category>testing</category><guid>https://www.tartley.com/posts/testwatcher/</guid><pubDate>Thu, 30 Apr 2009 04:02:59 GMT</pubDate></item><item><title>Writing C/C++ on Windows using g++ under Cygwin</title><link>https://www.tartley.com/posts/writing-cc-on-windows-using-g-under-cygwin/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;div&gt;&lt;p&gt;I wrote this ages ago, for the benefit of a Windows user who wanted
guidance getting set up with a free C/C++ compiler to learn the
language. I recommended using the g++ compiler in a command-line
environment under Cygwin, with the following guide to getting started. I
recently found it lurking on my hard-drive, and figured it's not doing
any good to anyone sitting there, so here it is, just in case.&lt;/p&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This article outlines one method of using the open source C/C++
compiler, Gcc to compile C/C++ programs on a Windows PC. It uses Cygwin,
which emulates a Linux-like command-line environment, which is many
times more useful and powerful tha the DOS command line that comes out
of the box with Windows.&lt;/p&gt;
&lt;p&gt;Of course, if you don't like all this free-as-in-beer,
free-as-in-speech, command-line hippy nonsense, you could always just
splash out for Visual Studio instead. Such a well-designed IDE has many
strengths - but so does the approach I am about to describe. Choose the
tool appropriate to the task in hand.&lt;/p&gt;
&lt;h4&gt;Install Cygwin&lt;/h4&gt;
&lt;p&gt;Download and run setup.exe from &lt;a href="http://www.cygwin.com/setup.exe"&gt;http://www.cygwin.com/setup.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The root directory you specify to the installer, default C:\cygwin,
will be your Unix root (/) directory under Cygwin. If this doesn't mean
much to you, see the (currently hyperthetical) section on Unix
filesystems below.&lt;/p&gt;
&lt;p&gt;Install for all users, and leave default text file type as Unix, not
DOS. There are more &lt;a href="https://www.tartley.com/posts/writing-cc-on-windows-using-g-under-cygwin/%20http:/www.cygwin.com/cygwin-ug-net/setup-net.html"&gt;instructions for Cygwin
setup&lt;/a&gt; online,
but my intention is that this document should be sufficient.&lt;/p&gt;
&lt;p&gt;Eventually you get to choose which packages to install. This window is
resizable, even though it doesn't look like it. Maximise it. Also,
select the 'Curr' radiobutton on the top right - so that we only view
the current versions of each package. (as opposed to old or experimental
versions.)&lt;/p&gt;
&lt;p&gt;Expand the categories on the left by clicking their '+' signs. The
'current' column is empty, because you don't yet have anything
installed. Under the 'new' column, you can click the word 'skip' to
select which version of each package you wish to install. This installer
understands the dependencies between packages, so selecting package A
which requires package B will automatically select package B.&lt;/p&gt;
&lt;p&gt;Everything under the 'Base' category is already selected, plus their
dependencies. This is a minimal Cygwin install, to which we will now add
one or two things.&lt;/p&gt;
&lt;p&gt;Under the 'Devel' section, find the entry for 'gcc. C compiler upgrade
helper.' Selecting the latest version of this package (3.3.3-2 as of 18
Aug 2004) will automatically select all the other parts of gcc that we
need (gcc-core, g++, etc.) as well as the 'binutils' package.&lt;/p&gt;
&lt;p&gt;Make sure the following packages are selected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devel/gcc - will automatically select some other packages&lt;/li&gt;
&lt;li&gt;Devel/make&lt;/li&gt;
&lt;li&gt;Doc/cygwin-doc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll also need a text editor. You can either select and install one of
those listed in the Cygwin installer, or else use any Windows program.
Notepad will work fine for the moment. Download Textpad for Windows if
you want something a little more useful without being intimidating. Use
something like Vi or Emacs if you are already familiar with them.&lt;/p&gt;
&lt;p&gt;Click [Next] when you're done. Setup downloads and installs the
selected packages.&lt;/p&gt;
&lt;h4&gt;Run Cygwin&lt;/h4&gt;
&lt;p&gt;Double click the Cygwin icon on your desktop. You should get an
uninspiring DOS-like text terminal in a window. Type the command 'ls',
which lists the files in the current directory. From now on I'll show
commands you should type in &lt;code&gt;monospace&lt;/code&gt;, preceded by a dollar sign,
possibly followed by expected output of the command, like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls
My Pictures My eBooks My Music
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With any luck, you should recognise the files listed as those residing
in your My Documents directory.&lt;/p&gt;
&lt;p&gt;I don't know how much/little Unix or Linux you know, so I'm going to
explain that as little as possible for now, and just press on with what
commands you need to type to get a C program compiled.&lt;/p&gt;
&lt;h4&gt;Create a C file&lt;/h4&gt;
&lt;p&gt;Create a new directory within 'My Documents', where our C programs will
live. You can use Linux commands if you know them, or use your Windows
Explorer thing. I'm going to use Linux commands:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir cprogs
$ &lt;span class="nb"&gt;cd&lt;/span&gt; cprogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The 'cd' changes directory into the new 'cprogs' directory. Note that
the yellow '\~' above your dollar prompt has changed into a yellow
'\~/cprogs', to indicate this. So now if we type 'ls', then it lists
nothing - our new directory is empty.)&lt;/p&gt;
&lt;p&gt;Next we want to create our c source file. If you installed vi or emacs
as part of the cygwin setup, then you can use these here:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ vi myprog.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, you can just use notepad, or any other windows text editor.
You can invoke it from the command line if you wish.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ notepad myprog.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter and save the following minimal program:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that, while notepad is still open, you can no longer type
anything in your Cygwin terminal window. Cygwin is waiting for notepad
to finish before it lets you type anything else. Save and quit notepad
(now you can type again) and then run it once more, appending an
ampersand at the end of the command:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ notepad myprog.c &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ampersand tells cygwin to run notepad 'in the background', while
allowing the cygwin terminal to continue accepting input. For example,
while notepad is still open, you can now issue a command to compile your
program.&lt;/p&gt;
&lt;h4&gt;Compiling&lt;/h4&gt;
&lt;p&gt;To compile the program, we invoke the gcc program that we installed as
part of cygwin setup:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gcc myprog.c -o myprog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells the program gcc to compile myprog.c, and to call the output
file myprog. If this produces error messages, check the program in
Notepad, save again (Ctrl+S in Notepad) and then recompile. Note that
you can re-issue the compile command by pressing the up arrow key, then
return. If the compile command produces no error messages, nor any other
kind of response, then the compilation has been successful. You can
verify this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls myprog.c myprog.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note: on a real Unix/Linux box, the program would have no '.exe'
extension. It would simply be called 'myprog'.)&lt;/p&gt;
&lt;p&gt;And to run your new program:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./myprog
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Wrapup&lt;/h4&gt;
&lt;p&gt;That's the basics. You've got yourself a kick-ass C compiler (or C++
compiler if you invoke it with 'g++' instead of 'gcc') along with a
Linux-like environment to use it in. All for free, and without having to
repartition your existing Windows install or suffer the frustration of a
dual-boot system.&lt;/p&gt;
&lt;h3&gt;The Art of Unix&lt;/h3&gt;
&lt;p&gt;It should be noted that a real Unix/Linux development environment will
build on the arrangement described above, often in the Unix style of
'many small tools talking to each other', rather than as a single
monolithic application in the style of Visual Studio. This allows
competing tools to be slotted into place, giving the developer the
maximum freedom of choice. For example, it is trivial to replace Gcc
with the Intel C++ compiler, Icc, resulting in faster execution speed at
a cost of cross-platform compatibility. Such flexibility leaves the
developer free to retain their favourite text editor, debugger, etc,
regardless of the type of work or what project they are working on.&lt;/p&gt;
&lt;p&gt;The command-line is often frowned upon by developers more familiar with
a GUI way of working, who tend to assume that such an ancient interface
represents a cruder way of working. In actual fact, the reverse is true.
A GUI is good for providing guidance to novice users, but ultimately
proves limited and inflexible. One can only use a GUI application for
exactly the uses the original developer envisaged. With a well-designed
command-line, the user is faced with a steeper learning curve, but is
then free to combine programs in novel and constructive ways.&lt;/p&gt;
&lt;p&gt;For example, suppose we had 100 C programs to compile (not so
far-fetched if these are actually libraries or plug-ins.) In many IDE
GUI environments, the user would have no choice but to spend all
afternoon loading each program in turn and clicking the [compile]
button. Knowing a little command line magic, however, makes it a
ten-second job:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="k"&gt;for&lt;/span&gt; SOURCE in *.c&lt;span class="p"&gt;;&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;do&lt;/span&gt;
&amp;gt;   gcc &lt;span class="nv"&gt;$SOURCE&lt;/span&gt; -o &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SOURCE&lt;/span&gt;&lt;span class="p"&gt;%.c&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each method has it's strengths and should be used where they are most
appropriate.&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>software</category><category>terminal</category><guid>https://www.tartley.com/posts/writing-cc-on-windows-using-g-under-cygwin/</guid><pubDate>Thu, 10 Jul 2008 03:57:50 GMT</pubDate></item></channel></rss>