<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com (Posts about git)</title><link>https://tartley.com/</link><description>Source code control.</description><atom:link href="https://tartley.com/categories/git.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:tartley @ the domain tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Sun, 26 Mar 2023 04:51:07 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Git Annotated Tags</title><link>https://tartley.com/posts/git-annotated-tags/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;I've previously only ever used git's regular &lt;em&gt;lightweight&lt;/em&gt; tags, created with
&lt;code&gt;git tag TAGNAME&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Today I learned about &lt;em&gt;annotated&lt;/em&gt; tags, created with &lt;code&gt;git tag -a -m "MESSAGE"
TAGNAME&lt;/code&gt;. If you don't specify &lt;code&gt;-m MESSAGE&lt;/code&gt;, git annoyingly prompts you for
one, but it will accept &lt;code&gt;-m ""&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Annotated tags store the creator, created timestamp, and the message. This
might occasionally be useful for understanding what happened. A release tagged
this way shows us who created the release, and when, which might differ from
when the commit was created.&lt;/p&gt;
&lt;p&gt;But more importantly is the different handling of lightweight versus
annotated tags when pushing to the server.&lt;/p&gt;
&lt;p&gt;Habitually, I've been using &lt;code&gt;git push --tags&lt;/code&gt;. But this is slightly broken, in
that it pushes &lt;em&gt;all&lt;/em&gt; tags. Some tags might be intended as my private local
development state. Some of them might be unreachable in the origin repo.&lt;/p&gt;
&lt;p&gt;To address these issues, newer versions of &lt;code&gt;git push&lt;/code&gt; introduced
&lt;code&gt;--follow-tags&lt;/code&gt;, which only pushes annotated tags which are on ancestors
of the commit being pushed, so that no unreachable tags are created on origin.&lt;/p&gt;
&lt;p&gt;Hence, a better workflow is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use regular lightweight tags for local state.
   Keep them private by never using &lt;code&gt;git push --tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use annotated tags to share state with other developers.&lt;/li&gt;
&lt;li&gt;To share annotated tags, either push them directly, with &lt;code&gt;git push TAGNAME&lt;/code&gt;,
   or use &lt;code&gt;git push --follow-tags&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;</description><category>git</category><category>terminal</category><category>til</category><category>version-control</category><guid>https://tartley.com/posts/git-annotated-tags/</guid><pubDate>Sat, 17 Oct 2020 05:40:24 GMT</pubDate></item><item><title>Git: When to use three dots vs two</title><link>https://tartley.com/posts/git-when-to-use-three-dots-vs-two/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;I endlessly misremember when to use '...' in git versus '..'. That ends
today:&lt;/p&gt;
&lt;p&gt;To see the commits or diffs introduced by a branch (the filled circles ●):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;     f
    +●  m           git log m..f
     |  ○
    +●  |           git diff m...f
      \ ○
       \|
        ○
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To see the commits or diffs between the tip of one branch and another:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;     f              git log m...f
    +●  m           All commits look the same,
     |  ●-          unless you use --left-right, which
    +●  |           shows where each commit comes from.
      \ ●-
       \|           git diff m..f
        ○           '-' commits are shown inverted,
                     i.e. additions as deletions.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To see the commits from 'f' back to the beginning of time:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;     f
    +●  m           git log f
     |  ○
    +●  |           (diffs back to start of time are just
      \ ○            the contents of the working tree)
       \|
       +●
        |
       +●
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Throughout, omitted branchname defaults to current HEAD, i.e, the one of the
above that you almost always want:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;m...f
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is the same as&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;f
git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;m...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;m
git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;...f
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Is there a word for unicode ascii art?&lt;/p&gt;</description><category>geek</category><category>git</category><category>terminal</category><category>version-control</category><guid>https://tartley.com/posts/git-when-to-use-three-dots-vs-two/</guid><pubDate>Tue, 25 Aug 2015 16:51:30 GMT</pubDate></item><item><title>Understanding git rebase so it sticks</title><link>https://tartley.com/posts/understanding-rebase-so-it-sticks/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;I endlessly misremember how to use git rebase. That ends today. Here are
my notes to help me remember.&lt;/p&gt;
&lt;p&gt;Rebase is traditionally documented as:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--onto&lt;span class="w"&gt; &lt;/span&gt;newbase&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;upstream&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;branch&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is confusing for several reasons. A slight improvement is to rename
the args:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--onto&lt;span class="w"&gt; &lt;/span&gt;target&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;exclude&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt; is the tip of the branch to be transplanted. If omitted,
    it defaults to the current branch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude&lt;/code&gt; excludes all its ancestors from being transplanted. Hence
    the transplanted branch will have its tip at &lt;code&gt;include&lt;/code&gt;, and its base
    at the common ancestor of &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt;. If &lt;code&gt;--onto&lt;/code&gt; isn't
    specified, &lt;code&gt;exclude&lt;/code&gt; is also used as the destination for the
    transplant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt; is the place to transplant the branch to. If not specified,
    it defaults to the value of &lt;code&gt;exclude&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, a simple before and after:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;o---o---o---o---o---o exclude
     \
      1---2---3 current branch
                or include
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;exclude&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;                exclude
                v
o---o---o---o---o---1---2---3 current branch
                              or include
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See how the commits to be transplanted start at &lt;code&gt;include&lt;/code&gt; and go back to
the common ancestor of that and &lt;code&gt;exclude&lt;/code&gt;. Since &lt;code&gt;--onto&lt;/code&gt; isn't
specified, &lt;code&gt;exclude&lt;/code&gt; is also used as the transplant destination.&lt;/p&gt;
&lt;p&gt;Or a more complex one:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; o---o---o---o---o target
      \
       o---o---o exclude
            \
             1---2 current branch
                   or include
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;--onto&lt;span class="w"&gt; &lt;/span&gt;target&lt;span class="w"&gt; &lt;/span&gt;exclude&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;                    target
                    v
    o---o---o---o---o---1---2 current branch
         \                    or include
          o---o---o
                  ^
                  exclude
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, the commits to be transplanted are defined by &lt;code&gt;include&lt;/code&gt; and
&lt;code&gt;exclude&lt;/code&gt;, but this time a separate destination is specified using
&lt;code&gt;--onto&lt;/code&gt;.&lt;/p&gt;</description><category>git</category><category>software</category><category>terminal</category><guid>https://tartley.com/posts/understanding-rebase-so-it-sticks/</guid><pubDate>Fri, 07 Feb 2014 16:28:37 GMT</pubDate></item><item><title>Launch Gitk displaying all branches</title><link>https://tartley.com/posts/launch-gitk-displaying-all-extant-branches/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; All of the below is made totally redundant by simply using
&lt;code&gt;gitk --all&lt;/code&gt;. Thanks Russel!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When I launch Gitk, it just displays the current branch. To display
other branches, you must name them on the command line. To display all
existing branches, you need to find out all the branch names:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;branch
&lt;span class="w"&gt;  &lt;/span&gt;create-sql-dev
&lt;span class="w"&gt;  &lt;/span&gt;formula-rewrite
*&lt;span class="w"&gt; &lt;/span&gt;master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then laboriously type them in to the gitk command line:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;gitk&lt;span class="w"&gt; &lt;/span&gt;create-sql-dev&lt;span class="w"&gt; &lt;/span&gt;formula-rewrite&lt;span class="w"&gt; &lt;/span&gt;master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, save this Bash snippet in a script on your PATH. I call
mine gitka, for 'all branches':&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/usr/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# run gitk, displaying all existing branches&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"`git branch`"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tr&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;gitk
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Gitk displaying all branches, not just the current ('master' in bold)" src="https://tartley.com/files/2010/12/gitk-all-branches.png" title="gitk-all-branches"&gt;&lt;/p&gt;
&lt;p&gt;This works on Windows too, if you save it as 'gitka.sh', and have Cygwin
installed and associate the .sh filename extension with the Cygwin Bash
executable. You can then run it as 'gitka' from a Windows command prompt
thingy. If you then use 'ln -s gitka.sh gitka', then you can also run it
as just 'gitka' from a Cygwin bash prompt too - without this you would
have had to type out the full 'gitka.sh'.&lt;/p&gt;</description><category>git</category><category>mswin-dev</category><category>software</category><category>terminal</category><guid>https://tartley.com/posts/launch-gitk-displaying-all-extant-branches/</guid><pubDate>Fri, 31 Dec 2010 18:25:31 GMT</pubDate></item><item><title>A Guide to GIT using spatial analogies</title><link>https://tartley.com/posts/a-guide-to-git-using-spatial-analogies/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;Some developers find Git takes a little getting used to, claiming that
it is conceptually convoluted compared to other distributed version
control systems. I used to number myself amongst them.&lt;/p&gt;
&lt;p&gt;Happily, I've found that a couple of simple spatial analogies have made
me proficient and fluent in using Git's command-line interface.&lt;/p&gt;
&lt;p&gt;One of the things that tripped me up as a novice user was the way Git
handles &lt;strong&gt;branches&lt;/strong&gt;. Unlike more primitive version control systems, git
repositories are not linear, they support branching, and are thus best
visualised as trees, upon the nodes of which your current commit may add
new leaf nodes. To visualise this, it's simplest to think of the state
of your repository as a point in a high-dimensional 'code-space', in
which branches are represented as n-dimensional membranes, mapping the
spatial loci of successive commits onto the projected manifold of each
cloned repository.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Branches as n-branes" src="https://tartley.com/files/2010/12/I1546manifold.png" title="I1546manifold"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; There is, of course, a &lt;a href="http://www.reddit.com/r/programming/comments/embdf/git_complicated_of_course_not_commits_map_to/"&gt;fabulously insightful
commentary&lt;/a&gt;
on reddit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Thanks folks. You've made my usual one or two hundred daily
visitors look kinda paltry:&lt;/p&gt;
&lt;p&gt;&lt;img alt="spike in daily traffic graph" src="https://tartley.com/files/2010/12/daily-traffic.png" title="daily-traffic"&gt;&lt;/p&gt;</description><category>git</category><category>software</category><category>version-control</category><guid>https://tartley.com/posts/a-guide-to-git-using-spatial-analogies/</guid><pubDate>Wed, 15 Dec 2010 20:40:14 GMT</pubDate></item></channel></rss>