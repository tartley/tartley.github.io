<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com (Posts about file-watcher)</title><link>https://tartley.com/</link><description></description><atom:link href="https://tartley.com/categories/file-watcher.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:tartley @ the domain tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Thu, 03 Aug 2023 20:27:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Rerun unit tests whenever files update</title><link>https://tartley.com/posts/rerun-unit-tests-whenever-files-update/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;em&gt;In which I once again indulge my obscure command-line fetish.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I often spend hours of my day cycling through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit code and its unit tests&lt;/li&gt;
&lt;li&gt;Save my changes&lt;/li&gt;
&lt;li&gt;Push a button or change window focus to explicitly re-run the code's
    unit tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh frabjous day, the grinding manual labour of the last of these three
steps can now be banished forever, courtesy of &lt;code&gt;rerun&lt;/code&gt;, a command line
Python script that re-runs a given command whenever it detects changes
to any of the files in the current directory, or its subdirectories.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tartley/rerun"&gt;https://github.com/tartley/rerun&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: It's Python 2 &amp;amp; 3, and works great on Windows XP, Macs and
Ubuntu.&lt;/p&gt;
&lt;p&gt;For example: I had previously bound f6 in Vim to 'run the current file's
unit tests. Now I've bound shift-f6 to &lt;code&gt;rerun&lt;/code&gt; the current file's
unit tests in a new console window. This pops up a new window showing
the test results. I then continue editing in Vim, and whenever I hit
save, the unit tests are re-run in the other window. All the while the
focus stays on my editor. It's really sweet!&lt;/p&gt;
&lt;p&gt;Thanks for the original idea goes to to the bash command &lt;code&gt;watch&lt;/code&gt;, and an
old (now offline) blog post by Jeff Winkler.&lt;/p&gt;</description><category>file-watcher</category><category>geek</category><category>mswin-dev</category><category>python</category><category>software</category><category>terminal</category><category>testing</category><guid>https://tartley.com/posts/rerun-unit-tests-whenever-files-update/</guid><pubDate>Fri, 15 Oct 2010 06:43:33 GMT</pubDate></item><item><title>Testwatcher</title><link>https://tartley.com/posts/testwatcher/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;Sometimes when programming I like to leave unit tests running
repeatedly in one window while editing the code and tests in another.
The bash command &lt;code&gt;watch&lt;/code&gt; is useful for this, and can highlight the
differences between one invocation and the next in
inverse.&lt;/p&gt;
&lt;p&gt;I wanted a version of &lt;code&gt;watch&lt;/code&gt; for use on Windows, so I whipped up a
quick Python script,
&lt;a href="http://code.google.com/p/testwatcher/"&gt;testwatcher&lt;/a&gt;, which produces
output very similar to watch, but is cross-platform, and features not
just inverse text, but &lt;em&gt;yellow&lt;/em&gt; inverse text. Woo-hoo!&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;$ python example_test&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;py&lt;/span&gt;
&lt;span class="c"&gt;F&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;F&lt;/span&gt;
&lt;span class="c"&gt;======================================================================&lt;/span&gt;
&lt;span class="c"&gt;FAIL: testThat (__main__&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;TestWatcherTest)&lt;/span&gt;
&lt;span class="nb"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="c"&gt;  File "example_test&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;py"&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; line 12&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; in testThat&lt;/span&gt;
&lt;span class="c"&gt;    self&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;assertEquals(0&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; randint(0&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; 10))&lt;/span&gt;
&lt;span class="c"&gt;AssertionError: 0 != 4&lt;/span&gt;

&lt;span class="c"&gt;======================================================================&lt;/span&gt;
&lt;span class="c"&gt;FAIL: testThis (__main__&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;TestWatcherTest)&lt;/span&gt;
&lt;span class="nb"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="c"&gt;  File "example_test&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;py"&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; line 9&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; in testThis&lt;/span&gt;
&lt;span class="c"&gt;    self&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;assertEquals('one'&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; object())&lt;/span&gt;
&lt;span class="c"&gt;AssertionError: 'one' != d24460&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nb"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;Ran 3 tests in 0&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;001s&lt;/span&gt;

&lt;span class="c"&gt;FAILED (failures=2)&lt;/span&gt;
&lt;span class="c"&gt;_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Incidentally, the above test makes it very clear that Python objects in
successive processes get new addresses on Linux, but interestingly on
Windows the same addresses seems to get re-used for different processes.&lt;/p&gt;
&lt;p&gt;I can't help but suspect this is a dumb script to have written - it
should only be a:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;but in order to shoehorn the inverse text and colors in, it's grown to
300 lines - a hideous bloat for a minor superficial thrill. Plus the
Windows version flickers terribly - I'm currently using &lt;code&gt;system('cls')&lt;/code&gt;
to clear the screen and then redraw it every second. I'll do some
searching for better ways to do it.&lt;/p&gt;
&lt;p&gt;However - I've long wanted a Python interface to perform simple terminal
actions like colors and animation on different platforms (the standard
library 'curses' module that would otherwise do the job is simply not
implemented on Windows.) So maybe it's time I used this script as an
excuse to figure this out. Suggestions welcome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; This idea may have now reached a viable fruition
&lt;a href="https://github.com/tartley/rerun2/"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><category>file-watcher</category><category>geek</category><category>python</category><category>software</category><category>terminal</category><category>testing</category><guid>https://tartley.com/posts/testwatcher/</guid><pubDate>Thu, 30 Apr 2009 04:02:59 GMT</pubDate></item></channel></rss>