<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Made out of meat (Posts about non-fiction)</title><link>https://www.tartley.com/</link><description></description><atom:link href="https://www.tartley.com/categories/non-fiction.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2023 &lt;a href="mailto:tartley @ tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Fri, 22 Sep 2023 03:40:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Ur-Fascism</title><link>https://www.tartley.com/posts/ur-fascism/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Ur-Fascism cover" src="https://www.tartley.com/files/2023/ur-fascism-cover.webp"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Umberto Eco, 1995.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Eco's prose has left me in the dust on occasion in the past. I missed so many references, or failed to keep up with the relentlessly nested layers of meaning, that I was simply holding on for the ride. This essay matches Eco's characteristically dense, intellectual prose, studded with foreign phrases, and references to contemporary thinkers, historical movements and causes and revolutions and dictatorships, and their antecedents. But it is short, and perhaps in contrast to the flourishes of brilliance that comprise his fiction, this is a factual piece, and is written to be understood rather than to dazzle. It begins by establishing Eco's credentials to speak on this topic, with the first of several entrancing first-hand indications of what it was like to grow up as an intellectual young child in Italy under Mussolini, and the revelations that followed at the opening up of his world at the end of WWII.&lt;/p&gt;
&lt;p&gt;He differentiates between the truly totalitarian fascism of, say, Nazism, which subordinated all of life to the state, with the looser, less coherent Italian fascism, noting that this did not derive from any increment of tolerance, merely the absence of a sufficiently encompassing underlying philosophy. Despite this, it is the Italian mode, which was the first right wing dictatorship in modern history, from which subsequent dictators seem to have drawn most stylistic inspiration, and from which our generic term of "fascism" derives.&lt;/p&gt;
&lt;p&gt;The last half of the essay describes how fascism means different things in different contexts, but the various incarnations through history have exhibited sufficiently overlapping sets of symptoms as to glean a family resemblance. Eco enumerates 13 identifying traits, noting that the presence of even one of them can be sufficient to allow fascism to coagulate around it. Mostly for my own benefit, (with my own parenthesised observations) they are, briefly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fascism incorporates a cult of tradition. This can be deployed as an automatic refutation of any undesirable new ideas, enshrining in their place the immutable wisdom of a mythical past. In addition, traditionalism undermines the perceived value of learning in itself - pre-emptively thwarting troublesome intellectuals. This anti-intellectual received wisdom, in order to provide whichever justifications are required of it, requires the syncretistic combination of various ancient beliefs. As a result it must tolerate contradictions. Indeed, the more stark they are, the better they serve the purpose of selecting followers who will obediently think whatever they are told.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The rejection of modernism. This is a powerful recruiting tool, enabling the fascist to leverage any dissatisfaction of the populous, laying claim to the emotionally appealing universal solution of a regression to simpler, happier times, while simultaneously rewinding societal progress in equality or liberty. While Nazis and fascists love their technology, this is a superficial tool, used in support of a deeply regressive project, namely the restoration of power to those with the strength and the will to take it. This irrationality goes hand in hand with anti-intellectualism.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Value vigor and action above reflection. Thinking is emasculation. Culture is suspect insofar as it aligns with any sort of critical theory or values. Regard centers of analysis or learning such as libraries or universities with suspicion for harboring - or even indoctrinating - people of opposing political viewpoints. Again, this is deeply intertwined with (1) &amp;amp; (2), and its prevalence pre-emptively defuses any kind of mainstream understanding or critique.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All of the above make it inevitable that any given fascist regime will be rife with internal contradictions.  While modernity achieves its intellectual prowess through the nurturing of diverse thought, fascism cannot possibly withstand any critical analysis. Hence, disagreement is treason.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fascist appeal to popularity exploits and exacerbates the natural fear of &lt;em&gt;the other&lt;/em&gt;, and hence is always inherently racist. Expect demonization of immigrants, foreigners, other nation states, as well as other marginalized groups, taking advantage of whatever local contemporary biases and fears might be present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The above exploitation takes the form of an appeal to the frustrations of the middle class - or whichever class can be most useful and readily mobilized by persuasion that their problems are caused by some identifiable other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modernity genuinely does disintegrate traditional social bonds, along with sources of identity and meaning. Fascism's solution to this is to unify the disaffected under the only remaining banner common to them all, that of patriotism and nationalism. This unity is strengthened by emphasis on the country's enemies, and especially by conspiracy theories of secret international plots against the nation. Followers must feel besieged (as Trump advised the January 6th crowd that "America is under siege"). Eco makes special mention, in the U.S, of Pat Robertson's &lt;em&gt;The New World Order&lt;/em&gt;, but potential sources of conspiracy are innumerable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Followers can be riled into frenzy of humiliation at their enemies' wealth or power. Jews control the
world and its money. Instead of coastal liberals, refer to coastal elites. But at the same time, the instinct to action requires that enemies can easily be defeated. Hence enemies are simultaneously too weak and too strong. Herein lies one of fascism's greatest weaknesses, responsible for several lost wars, in that it is constitutionally incapable of objectively assessing an enemy's strength.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goad followers into violent action with rhetoric not just of a struggle for survival, but by declaration that life is struggle, and hence pacifism is conspiring with the enemy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While fascism appeals for the participation of the population by promising empowerment for the majority, its naked power lust is a fundamentally aristocratic endeavor. The leader takes power from those too weak to oppose  him, disdaining both conquered rivals and the subjugated population. Power struggles within the Party are vicious, and the party rides roughshod over the citizens, who likewise are leagues above the disenfranchised. The hierarchy is strict, steep, and ruthless. Elitism abounds, as does fear of losing one's status.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The redress of modernity's threadbare social fabric, by emphasizing nationalism and strength, further erodes interpersonal solidarity. Each individual must becomes their own hero. Strong, independent, and utterly without recourse in times of need. The cult of the hero is intimately entwined with a cult of death. Having only the narrow causes of the nation and the Party to live for, the hero yearns for a heroic death - or, better, to demonstrate their power and status by sending others to their death.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The preeminent will to power, so often frustrated in an aristocratic, dog-eat-dog social order, manifests alternately in things like machismo, disdain for women, and phallic fetishization of weapons. Repressed insecurity breeds an outward contempt for unconventional sexuality, including chastity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under fascism, the people have no innate rights, and hence no material preferences or expression. Instead, the leader pretends to interpret the Will of the People. This charade requires the party apparatus to select and amplify some emotional response of the people, and present it as representative, so that the party can be empowered to act on behalf of that supposedly majority. Consider the amplifications of manufactured outrage about culture war issues, so that elected representatives are empowered to act decisively on their own preferences, against the majority of the population's wishes. This leads directly to confrontation with institutions such as a parliament. Fascism will therefore cast aspersions on any properly functioning parliament's legitimacy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All fascisms make use of their own varieties of NewSpeak, using an impoverished vocabulary and syntax, in order to limit the instruments for critical reasoning. This may appear in apparently innocent forms, from schoolbooks to popular talk shows.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><category>book</category><category>essays</category><category>media</category><category>non-fiction</category><category>politics</category><guid>https://www.tartley.com/posts/ur-fascism/</guid><pubDate>Wed, 12 Jul 2023 00:41:42 GMT</pubDate></item><item><title>Permanent Record</title><link>https://www.tartley.com/posts/permanent-record/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Permanent Record" src="https://www.tartley.com/files/2021/permanent-record-cover.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Edward Snowden, 2019&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed this memoir. The story is familiar, but intriguing to hear
in the characteristically articulate words of Snowden himself.&lt;/p&gt;
&lt;p&gt;He recounts growing up as a computer nerd in a family dedicated to military
service, punctuated by startling scenes such as being caught in the pandemonium
outside NSA headquarters as it was evacuated during 9/11, and the subsequent
overreach of surveillance capability that triggered.&lt;/p&gt;
&lt;p&gt;He describes the interesting parts of his ascent through jobs, and clearance
levels, within the intelligence community, and how he came to slowly suspect â
and later confirm â that the government was collecting all the communications
and transactions, from everyone who touched a phone or computer, in America and
across the world. A vast spying mechanism turned upon the populace, beyond the
wildest dreams of the Stasi, who only surveilled one third of their population.&lt;/p&gt;
&lt;p&gt;At "Constitution Day" in the office, a forlorn desk in the cafeteria hands
out copies of the constitution, which his clearance had required that he, and
his colleagues, swear an oath to uphold. He quoted the 4th amendment to
colleagues:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"The right of the people to be secure in their persons, houses, papers, and
effects, against unreasonable searches and seizures, shall not be violated."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The responses were dead-eyed shrugs - yeah, sure, but what can you do? What
indeed.&lt;/p&gt;
&lt;p&gt;He describes the dangers of a government given too much power to spy on
the everyday lives of its citizens, and the crisis of conscience that slowly
lead to his decision to let the American people know that they were being spied
upon, and his planning of how to go about it. How he slowly accumulated the
hundreds of documents needed to reveal the full extent and capabilities of the
spying apparatus. The extraction of those documents, hidden on his person on
micro SD cards, concealed in places such as in a Rubik's cube he routinely
carried through security. The months long process of selecting journalists who
could both communicate the material coherently to the public, and vet the
public releases to eliminate the risk to our undercover personnel.&lt;/p&gt;
&lt;p&gt;His recounts the preparations for flight, tying up his affairs like a man about
to die. Emptying bank accounts, leaving cash for his girlfriend to find.
Leaving the house tidy and repaired. The necessity of flight, to avoid a show
trial, devoid of any meaningful defense. A whistle-blower is not allowed to
argue that their disclosures were civilly beneficial. Even now, when Snowden's
leaks have caused Congress to change laws regarding surveillance, or caused the
courts to strike down types of mass surveillance programs as illegal, or caused
both the Attorney General and the President of the United States to admit that
the resulting debate over mass surveillance was a crucial one for the public to
have. All these claims would be dismissed by the court as not just irrelevant,
but inadmissible, leading to a sentence of up to ten years per leaked document.&lt;/p&gt;
&lt;p&gt;And finally, flight itself. A tense series of airplanes and delays, meeting the
selected journalists in Hong Kong, selected for being sufficiently disjoint
from Chinese rule so as not to taint his revelations with the suspicion of
having sold out to China, but still sufficiently lawful, and under the auspices
of the distant Chinese rule, that that the American government would not snatch
him off the street with impunity.&lt;/p&gt;
&lt;p&gt;The indulgence of the Hong Kong government fell apart, as the US filed for
extradition. He fled bound for Ecuador, but was pulled aside during a 20-hour
layover in a Moscow airport, for a conversation with Russian intelligence,
during which Snowden insists he will not work with them, he only wants to catch
his flight out. They reveal to him that he cannot leave, since the US State
department has cancelled his passport. He is stranded in Moscow airport for 40
days, and eventually granted temporary asylum in Russia. Eventually, his
girlfriend â who knew nothing about his plans â recovered from the shock of his
unannounced departure, moved out to Moscow to be with him, and then a year
later, they were married.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;&lt;/p&gt;</description><category>book</category><category>law</category><category>media</category><category>memoir</category><category>non-fiction</category><guid>https://www.tartley.com/posts/permanent-record/</guid><pubDate>Sun, 10 Oct 2021 16:18:16 GMT</pubDate></item><item><title>Self-Calm</title><link>https://www.tartley.com/posts/self-calm/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Self Calm cover" src="https://www.tartley.com/files/2021/self-calm-cover.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Chris DeLeon (2018)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Roman Emperor Marcus Auralias' notes, traditionally titled &lt;em&gt;Meditations&lt;/em&gt;,
are a foundational text for practical Stoicism. They comprise a multitude of
observations and recommendations, grouped into sections such as "Keeping
thoughts tranquil", and "Cooperation, collaboration and contribution". They
offer advice for living a contented life, with less regret, sorrow, anger and
fear.&lt;/p&gt;
&lt;p&gt;Several translations exist, themselves dated from through the ages. This book
combines them, to synthesize a text which doesn't hew as precisely to the
original as a straight translation might, but is instead intended to have the
most relevance to modern ears.&lt;/p&gt;
&lt;p&gt;Confession: It's taken me &lt;em&gt;months&lt;/em&gt; to get through it. Partly this is because
I've allowed myself to be distracted by more gaudy and immediate books along
the way. Partly it's because I found the best way to read this was &lt;em&gt;slowly&lt;/em&gt;.
Practically every paragraph is worth reflecting upon, to consider how it
applies to my own life, and ponder what practical, specific next steps are
implied.&lt;/p&gt;
&lt;p&gt;If I had to criticize, it would only be the superficial wrinkle that there's
a lot of repetition, such as hundreds of suggestions to not fear death.
Apparently the original documents were accumulated over decades of Auralias'
life.&lt;/p&gt;
&lt;p&gt;Genuinely life changing.&lt;/p&gt;
&lt;p&gt;You can get the epub for free from
&lt;a href="https://gumroad.com/l/self-calm"&gt;the author's gumroad page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: left"&gt;&lt;/p&gt;</description><category>book</category><category>history</category><category>media</category><category>non-fiction</category><guid>https://www.tartley.com/posts/self-calm/</guid><pubDate>Thu, 03 Jun 2021 12:38:57 GMT</pubDate></item><item><title>Intelligence: A Very Short Introduction</title><link>https://www.tartley.com/posts/intelligence-a-very-short-introduction/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Intelligence cover" src="https://www.tartley.com/files/2021/intelligence-cover.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Ian J. Deary (1st Ed, 2001)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An expert's overview for the layman, describing how and why people differ in
their thinking powers, Very data driven, and by necessity, largely driven by
consideration of how to measure different aspects of intelligence, and
therefore what aspects intelligence can be teased apart into, such as working
memory, linguistic comprehension, perceptual organization, and speed of
operation.&lt;/p&gt;
&lt;p&gt;Each chapter tackles a key scientific question, describing the experiments
that were done to determine the answers, showing the actual
key experimental datasets.&lt;/p&gt;
&lt;p&gt;Such questions include: Is intelligence determined by genes or the environment?
The answer is 50/50, although surprisingly, little of the environmental
influence is due to the family raising the child. Also, the effect of genetics
increases with age.&lt;/p&gt;
&lt;p&gt;How does a person's intelligence change as they age? Some skills show a
straight decline from age 25 to 80, such as inductive reasoning, spatial
awareness, perceptual speed and verbal memory. Other skills show a peak in
middle-age, with only a small decline at high ages, such as verbal reasoning
and numerical ability. The amount of mental decline with age is highly variable
between different people. Those whose abilities decline the least have no
cardio issues or chronic disease, have high social class, live in complex and
stimulating environments, and are generally satisfied with life, and unstressed
through middle age.&lt;/p&gt;
&lt;p&gt;Does intelligence, especially as measured using existing tests, correlate with
life outoutcomes such doing well at a job? Depending on the job, yes, a great
deal. What sort of tests are good for predicting who will do well? Work
samples, structured interviews, and psychometric tests all give slightly over
0.5 correlations. Which isn't stellar, but it's the best we've got. At the
other end of the scale, graphology (handwriting) and age rankings had no
correlation.&lt;/p&gt;
&lt;p&gt;It's a short book, with a lively style, densely packed with important
conclusions, and descriptions of how the field has arrived at them. Edifying.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: left"&gt;&lt;/p&gt;</description><category>book</category><category>cognition</category><category>media</category><category>non-fiction</category><guid>https://www.tartley.com/posts/intelligence-a-very-short-introduction/</guid><pubDate>Mon, 18 Jan 2021 11:58:23 GMT</pubDate></item><item><title>The Structure of Scientific Revolutions</title><link>https://www.tartley.com/posts/the-structure-of-scientific-revolutions/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;This post rescues content from a series of tweets I wrote in 2018.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="The Structure of Scientific Revolutions cover" src="https://www.tartley.com/files/2020/the-structure-of-scientific-revolutions-cover.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Thomas S. Kuhn, 1962.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I loved &lt;em&gt;The Structure of Scientfic Revolutions&lt;/em&gt;.
It was recommended to me as having similar impact to undergraduate
classics like &lt;em&gt;Godel, Escher, Bach&lt;/em&gt;, or &lt;em&gt;The Blind Watchmaker.&lt;/em&gt; I'm going
to just summarize the content here, so: Spoilers.&lt;/p&gt;
&lt;p&gt;It begins by observing that discredited scientific theories, even those
which seem laughable today, such as phrenology, or the Ptolemaic model of the
heavens, were not crackpot theories with shaky evidence. Earnest, hardworking
practitioners refined them using sensible processes, which by the 17th century
were converging on the modern scientific method.&lt;/p&gt;
&lt;p&gt;This process of "normal" science excels at the incremental refinement of
established scientific theories. But in practice, is unable to perform the
revolutionary transitions required to overcome outmoded theories and replace
them with others, no matter how bizarre and wrongheaded the initial theory
looks to us now with hindsight.&lt;/p&gt;
&lt;p&gt;So what is the unarticulated process that is responsible for these
transitions, i.e. how do scientific revolutions happen? We have intuitive
visions of this occurring overnight. An individual experiment yields unexpected
results, contradicting conventional theory, while irrefutably supporting an
alternate theory to take its place. But in practice, this &lt;em&gt;never&lt;/em&gt; happens.&lt;/p&gt;
&lt;p&gt;At first, and often for years or centuries, no discrepancy between theory and
experiment is noticed, because the prevailing theories of the time have a
massive shaping effect on what questions it is valid to ask, what experiments
are deemed useful to do.&lt;/p&gt;
&lt;p&gt;For practitioners to turn their backs on an established theory in such a time
is never productive. They are shunned for turning their backs on science
itself.&lt;/p&gt;
&lt;p&gt;We see this vividly today with homeopaths (my own example, not the book's).
Often, and incorrectly, homeopathy is mocked because the theories sound
ridiculous to one steeped in a conventional understanding of chemistry.
People will jeer at how total dilution can 'obviously' have no effect,
or at the idea of water exhibiting some sort of 'memory'. But such jeering is
as scientifically illiterate as the quacks it contends with. The argument from
personal incredulity has no place in determining scientific truth. No newer
theory makes sense in the light of the more limited, and often contradictory,
paradigm that it eventually replaces. The only useful criteria is to try it
out. &lt;em&gt;Does it actually work?&lt;/em&gt; This is the axis upon which homeopathy should be
judged. (and upon which it has decisively been found wanting.)&lt;/p&gt;
&lt;p&gt;All contradictions to conventional science suffer a similar ignominious
treatment, regardless of how right they might later turn out to be. Before any
revolution of theory can overturn conventional understanding, the stage
must be set, the community prepared.&lt;/p&gt;
&lt;p&gt;The process begins as the incremental advances of "normal" science gradually
increase the scope and precision of accepted theories. Until this point,
measurements in which experiment does not conform to theory are either ignored
as erroneous artifacts, or are dismissed as indicative of some separate,
unknown phenomena. They are never interpreted to mean prevailing theory is
wrong.&lt;/p&gt;
&lt;p&gt;However the growing scope &amp;amp; precision of theory and measurement gradually
uncovers more of these discrepancies, or reveals them in finer detail.
Eventually they become too prominent to ignore, and a kind of phase transition
occurs.&lt;/p&gt;
&lt;p&gt;Eventually, the discrepancies become so prominent and concerning that they
are judged to be a valid area of study in themselves, rather than just annoying
aberrations. Leading practitioners devote themselves to the task. Foundations
of the specialisation that were once accepted without question now come under
scrutiny.&lt;/p&gt;
&lt;p&gt;To partially explain the discrepancies, people introduce many incompatible
variations on current theories. The once unified field divides into cliques,
supporting different theoretical variations. The field, formerly a united mass,
calves into fragments.&lt;/p&gt;
&lt;p&gt;If one of these variations on existing theory manages to explain all
observations, then this gradually gains mindshare, until the whole community
has migrated to this new, incrementally improved theory.&lt;/p&gt;
&lt;p&gt;However, in cases where a truly revolutionary change is required, such
incrementalism is insufficient, and none of the theoretical variations are
fully successful in explaining all observations. The factions' differing
underlying assumptions give them no common ground upon which to arbitrate their
differences, so their debates are irreconcilable. The fragments are melting,
into a churning liquid of disagreement.&lt;/p&gt;
&lt;p&gt;This state is notably similar to the state of a nascent field before any
established scientific theories have taken hold.&lt;/p&gt;
&lt;p&gt;All is chaos, with different groups supporting different ideas, agreeing on
nothing. The field is in turmoil, its practitioners in genuine emotional
distress. Their personal identities are undermined. What does it mean to be a
practitioner when nobody can agree on what the field even is? Is what we do
even &lt;em&gt;science&lt;/em&gt; at all? A crisis has arrived. We are at boiling point.&lt;/p&gt;
&lt;p&gt;Kuhn compares this to individuals in psychological experiments, given cunningly
contradictory sensual stimuli. At first they don't notice anything wrong about
a brief glimpse of a playing card showing a red king of clubs. As the length of
their glimpse expands, and the stimulation becomes more intrusive, the subject
starts to hesitate, and stumble on words. Suddenly it impinges on their
consciousness, and they cry out, distressed, uncertain of even basic facts. "My
God! What did I see? Are clubs always red? What's happening here?"&lt;/p&gt;
&lt;p&gt;Kuhn also compares scientific revolutions to their social and political
counterparts, in a chillingly familiar passage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Political revolutions aim to change political institutions in ways that
those institutions themselves prohibit. Their success therefore necessitates
the partial relinquishment of one set of institutions in favor of another, and
in the interim society is not fully governed by institutions at all.&lt;/p&gt;
&lt;p&gt;Initially it is crisis alone that attenuates the role of political
institutions [...] In increasing numbers, individuals become increasingly
estranged from political life, and behave more &amp;amp; more eccentrically within
it.&lt;/p&gt;
&lt;p&gt;Then, as the crisis deepens, many individuals commit themselves to [...] some
new institutional framework. At that point, society is divided into competing
camps or parties, one seeking to defend the old institutional constellation,
others seeking to institute some new one.&lt;/p&gt;
&lt;p&gt;Once that polarization has occurred, &lt;em&gt;political recourse fails&lt;/em&gt;. Because
they differ about the political matrix within which political change is to be
achieved and evaluated, and acknowledge no common supra-institutional framework
for adjudication of differences, the parties to a revolutionary conflict must
finally resort to the techniques of mass persuasion, often including force."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At any point, the &lt;em&gt;boldest&lt;/em&gt; practitioners, often those with least invested in
the previous status quo, such as the relatively young, or those entering from
adjacent fields, will introduce strikingly different sets of theories. But only
now that the stage is set, amongst such distressing chaos, is the community
ready to entertain truly revolutionary ideas.&lt;/p&gt;
&lt;p&gt;Occasionally, one of these new ideas will succeed in explaining all the
observations, but in order to do so, it requires incommensurable changes in the
underlying philosophy of the field, from the axiomatic definitions, to the set
of questions that are valid to ask. One can no longer ask, of a spherical
Earth, "What happens if you fall off?"&lt;/p&gt;
&lt;p&gt;Notably, many revolutionary changes are not an unalloyed good. Gains in
explicative power in one area are often balanced by losses elsewhere.&lt;/p&gt;
&lt;p&gt;As in evolution, the new theory is not necessarily more &lt;em&gt;correct&lt;/em&gt;, so much as
it is a better fit for the current circumstances, i.e. providing greater
predictive power in an area that is currently pertinent. Maybe scientific
progress is more obviously useful to society in that area, or instruments are
more capable of making measurements in that area. The two often coincide,
since influences are are unable to detect or manipulate are also unlikely to
be of much direct use to society. So as the social and technological context
evolves, so does the relative fitness of potential competing paradigms.&lt;/p&gt;
&lt;p&gt;Nobody understands this trade-off more deeply than the field's most
invested practitioners, who feel the losses of losing the old model most
keenly, and therefore may resist the new paradigm for the remainder of their
careers. The new paradigm will not achieve total dominance until the field is
populated by a whole new generation.&lt;/p&gt;
&lt;p&gt;I am reminded of the dark priesthood of command-line programmers, although
I note with no little joy that our merry band includes some of the best and
brightest of the next generation (as judged by my own paradigm's criteria.)&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: left"&gt;&lt;/p&gt;</description><category>book</category><category>media</category><category>non-fiction</category><category>politics</category><category>science</category><guid>https://www.tartley.com/posts/the-structure-of-scientific-revolutions/</guid><pubDate>Sun, 14 Jun 2020 14:02:22 GMT</pubDate></item><item><title>This Gaming Life: Travels in Three Cities</title><link>https://www.tartley.com/posts/this-gaming-life-travels-in-three-cities/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="gaminglife" src="https://www.tartley.com/files/2014/02/gaminglife.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Jim Rossignol&lt;/em&gt; (2009)&lt;/p&gt;
&lt;p&gt;A gorgeous insider's look at videogaming culture, by an author who,
after an unfulfilling stint as a financial journalist, has built his
life around games.&lt;/p&gt;
&lt;p&gt;Broken into sections corresponding with the author's experiences in
London, Seoul and Reykjavik, it's thoughtful and manages to sidestep the
patronising oversimplifications of mainstream media's gaming coverage.&lt;/p&gt;
&lt;p&gt;From &lt;em&gt;Tetris&lt;/em&gt; and &lt;em&gt;Elite&lt;/em&gt; to &lt;em&gt;Okami&lt;/em&gt; and &lt;em&gt;Shadow of the Collossus&lt;/em&gt;,
stopping along the way to examine the modding and indie scenes, the
massively multiplayer intricacies of &lt;em&gt;EVE Online&lt;/em&gt;, and the insane
heights of Korean real-time strategy matches. He knows the best &lt;em&gt;Prince
of&lt;/em&gt; &lt;em&gt;Persia&lt;/em&gt; was &lt;em&gt;Sands of Time&lt;/em&gt;, by a country mile. He's one of us. I
felt welcomed to his world. Join us - we'll be on the sofa.&lt;/p&gt;
&lt;p&gt;Rating:&lt;/p&gt;
&lt;p&gt;10/10 if you understand that games have the potential to become the
dominant art form of the 21st century.&lt;/p&gt;
&lt;p&gt;0/10 if it's just for kids, innit?&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: left"&gt;&lt;/p&gt;</description><category>book</category><category>geek</category><category>media</category><category>non-fiction</category><category>videogame</category><guid>https://www.tartley.com/posts/this-gaming-life-travels-in-three-cities/</guid><pubDate>Tue, 04 Feb 2014 02:31:29 GMT</pubDate></item><item><title>Object-Oriented Software Engineering : A Use Case Driven Approach</title><link>https://www.tartley.com/posts/object-oriented-software-engineering-a-use-case-driven-approach/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Object Oriented Software Engineering cover" src="https://www.tartley.com/files/2014/02/object-oriented-sofware-engineering.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Ivar Jacobsen&lt;/em&gt; (1992, 4th revision)&lt;/p&gt;
&lt;p&gt;You might wonder if there's anything left to say about
object-orientation that hasn't already been discussed to death. I was
led to this 1992 book by Uncle Bob's talk "&lt;a href="http://www.youtube.com/watch?v=WpkDN78P884"&gt;Architecture: The Lost
Years&lt;/a&gt;." In it Bob posits
that in the 1990s, just as people like Ivar were completing their
20-year journey of figuring out some fairly optimal ways to do
object-orientation, along came the disruptive influence of the web,
which turned everyone's priorities, methodologies and designs upside
down. In the resulting stampede, some highly practical ideas have been
lost, both in terms of design and process. This has substantially
watered down OO's ability to deliver on its promises of reuse and
maintainability. It has stranded a whole generation of applications with
distorted architectures, inside-out designs, and less maintainable code.&lt;/p&gt;
&lt;p&gt;Aspects of these historical approaches do survive, such as the
prominence Agile gives to use-cases as a way to concretely tie together
requirements, design, testing, and acceptance. But some equally powerful
ideas, such as appropriate ways to manage dependencies within an
application, have seen relatively little use, and are only now being
rediscovered in guises such as the clean and hexagonal architectures.&lt;/p&gt;
&lt;p&gt;Ivar's book can certainly lay claim to being one of the earliest
published sources to lay out these ideas, and he does so with a style
that is convincingly thoughtful. This is the work of an intelligent man,
honed and refined over many years of practice. The omission of modern
testing techniques are the only thing that substantially dates the
content. Otherwise I found it exciting, insightful and revolutionary. It
seems naive to claim that this book describes the One True Architecture
which is applicable to all systems. But it certainly seems very widely
applicable, and has deeply affected my thinking on all projects larger
than a couple of weeks' work.&lt;/p&gt;
&lt;p&gt;The book also discusses software development methodology in an
intriguingly meta way, constructing an object-oriented model of the
process itself. Each software development team or organisation
represents a particular implementation of this model. Parallels with the
execution of software are drawn, with the output of one part of the
process, e.g. design work, having to produce results that conform to the
expectations of the downstream process, such as implementation. In this
way, sections of the process can be removed and replaced by compatible
alternatives, to better suit the application domain and the organisation
within which the project is embedded. These ideas seem less immediately
applicable and actionable. Maybe that's just my personal circumstance.
Perhaps they are more applicable to larger projects, which I avoid these
days.&lt;/p&gt;
&lt;p&gt;Rating:&lt;/p&gt;
&lt;p&gt;10/10 if you're going to enjoy 500 pages of software design principles
and case studies.&lt;/p&gt;
&lt;p&gt;0/10 if you're not.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;&lt;/p&gt;</description><category>book</category><category>geek</category><category>media</category><category>non-fiction</category><category>software</category><guid>https://www.tartley.com/posts/object-oriented-software-engineering-a-use-case-driven-approach/</guid><pubDate>Sun, 02 Feb 2014 20:26:43 GMT</pubDate></item><item><title>Domain Driven Design: Tackling Complexity in the Heart of Software</title><link>https://www.tartley.com/posts/domain-driven-design-tackling-complexity-in-the-heart-of-software/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="Domain Driven Design cover" src="https://www.tartley.com/files/2014/01/domaindrivendesign.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Eric Evans (2004)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It's a big, dense book -- possibly the most important of the technical
books I've read in a flurry over the last few months, catching up after
recovering a modicum of sanity in our lives after our kid's first year.
I finish it feeling changed, invigorated, and given new direction.&lt;/p&gt;
&lt;p&gt;At its core is a simple idea, which sounds neither new nor revolutionary
on the surface. Software projects, Evans maintains, should work closely
with business experts to create and maintain a domain model. The model
might be expressed as a class diagram of core business concerns, and
should also correspond directly to a body of code modelling these
business entities. This forms a set of core business entities which are
clearly analogous to things like the core enterprise entities of the
hexagonal or clean architectures.&lt;/p&gt;
&lt;p&gt;However it's created, the terminology and notation used in the class
diagram (or it's equivalent) should be well understood by individuals on
both side of the tech/business divide. In the past I think I've made the
mistake of believing that only developers needed to understand it, and
therefore the model only needed to be expressed in code.&lt;/p&gt;
&lt;p&gt;This model should be displayed prominently, referred to continually, and
in a healthy project should very directly correspond to the specialised
language that evolves within the organisation. Where the team's language
doesn't match the model - for example, your business experts' use of
plurals betrays that the cardinality of relationships are modelled
wrongly, then the model - and the underlying code - should be
aggressively refactored to match reality.&lt;/p&gt;
&lt;p&gt;Evans makes a persuasive case that the appropriate management of this
complexity at the heart of your software will be a major influence on
the success of the project. To be fair, this is a viewpoint that I
already believed in, so I was a sucker for all of this. Without an
appropriate approach to these central design concerns, over time
developers will find they are no longer able to understand the code
thoroughly enough to be able to modify or extend it easily, unless they
deliberately or inadvertently use design-breaking hacks like redundancy
or mislocated chunks of code. This forms a vicious cycle of technical
debt accrual, and creates an upper limit on the size or complexity which
can be achieved by any project before productivity begins to slump.
Other metrics like reliability then also suffer.&lt;/p&gt;
&lt;p&gt;To counter this, conquering these central design issues requires a
pro-active and multi-pronged effort. Firstly, the existing design must
be understood by all parties. In order for this to remain true, the
design needs to be kept up to date and be easily understood by new team
members. The code must be kept directly in sync with the model, and kept
understandable - inappropriate dependencies must be ruthlessly pruned.
Simultaneously, the "correct" design must be discovered iteratively,
throughout the life of the project, and this can only be done by
encouraging continual conversations between developers and business
folks to discuss the potential inadequacies of the current design and
possible alternatives.&lt;/p&gt;
&lt;p&gt;When managed correctly, this lends an agility and suppleness to project.
Developers find it easy to integrate subsequent parts of code because
they 'fit naturally' into the existing design, and when the design is
found wanting, it's relatively easy to modify it to incorporate new
concerns.&lt;/p&gt;
&lt;p&gt;There are times when I've struggled to convey the message about how the
resulting trade off works between time spent refactoring versus time
saved over the long term. Evans describes this in an interesting way.
Instead of trying to model team productivity by applying a multiplier to
describe drag caused by technical debt, he simply contrasts the normal
way projects slow down as they become larger and more complex, with a
project that instead &lt;em&gt;speeds up&lt;/em&gt; over time, as developers, unhindered by
a cycle of technical debt, are instead empowered by the creation of
powerful and expressive abstractions, which can then be relatively
easily reconfigured into unanticipated configurations.&lt;/p&gt;
&lt;p&gt;To counter-balance this idealistic hand-waving, the next section dives
right into some specific design practices which embody these ideas.
These are valuable and insightful, stock-in-trade, such as
distinguishing between entity and value types. But many of the ideas
were completely new to me, such as the concept of &lt;em&gt;aggregates&lt;/em&gt;, which
define subsets of the domain model which are always atomically retrieved
from (or updated in) a data store.&lt;/p&gt;
&lt;p&gt;In short, I really loved this book. It stretched and inspired me. It's
in a very small set of books I've flagged to re-read in a couple of
years. It's top of my list for 'books to bring in and talk about at
work'.&lt;/p&gt;
&lt;p&gt;Rating:&lt;/p&gt;
&lt;p&gt;10/10 if you're a programmer, or work with programmers.&lt;/p&gt;
&lt;p&gt;0/10 if you're not, or don't.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;&lt;/p&gt;</description><category>book</category><category>geek</category><category>media</category><category>non-fiction</category><category>software</category><guid>https://www.tartley.com/posts/domain-driven-design-tackling-complexity-in-the-heart-of-software/</guid><pubDate>Mon, 27 Jan 2014 17:05:53 GMT</pubDate></item><item><title>IronPython in Action</title><link>https://www.tartley.com/posts/ironpython-in-action/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="IronPython in Action cover" src="https://www.tartley.com/files/2009/07/ironpython-in-action.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Michael Foord and Christian Muirhead (2009)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Disclaimer: I'm friends with both the authors and was sent a freebie
review copy by the publisher, so I'm bound to be breathlessly gushing in
this review. Fortunately, that's easy to do, because the book really is
great. (Except for Christian's chapters... &lt;em&gt;Joke!&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Having spent some years working with .NET, and with a series of
intriguing personal experiments in Python under my belt, I originally
approached IronPython some years ago with a modicum of trepidation. I
feared that the weld between the two would be intrusively visible,
forming distracting differences from regular Python. I feared for the
execution environment, the data types, and perhaps even the syntax
itself.&lt;/p&gt;
&lt;p&gt;Experience with IronPython showed these worries were needless. I have
found IronPython to be a remarkably pleasant marriage - the same elegant
language we know and love, given first-class status in the .NET runtime.
Gifted with seamless interoperability with other .NET languages, the
dowry from such an alliance turns out to be all the .NET libraries in
the world, including the substantial and highly capable .NET standard
libraries themselves.&lt;/p&gt;
&lt;p&gt;IronPython is, to some extent, a niche implementation of a niche
language. However, its position seems to potentially be one of
importance and strength. Not only does it allow Python programmers to
use .NET libraries - and does so admirably, but it also allows the
existing legions of .NET programmers to be introduced to the joys of
Python. They will fall in love with it, and will be able to introduce it
into their workplaces in a way that is politically acceptable. After
all, it is now simply another .NET language. Since .NET is orders of
magnitude more popular than Python, this could turn out to be an
important source of future Python adoption.&lt;/p&gt;
&lt;p&gt;This book is aimed to satisfy programmers coming from both the Python
and the .NET worlds, and in this it seems to succeed. It starts with
quick overviews of concepts from each: 30 pages about Python as a
language, and 17 pages about .NET as an environment (data types, events,
delegates, Windows Forms, etc) - just enough to get everyone up to speed
regardless of background, but without being so verbose as to turn anyone
off with a surfeit of material they are already familiar with. Despite
being brief, these sections are packed with detail and very pragmatic,
focusing on real-world use such as inheriting from existing .NET types,
and solving some common problems like creating Windows Forms
applications from IronPython.&lt;/p&gt;
&lt;p&gt;This style of practical and dense informative content is continued
throughout. Straight after the opening sections, we dive right in with
another rapid-fire chapter, demonstrating common IronPython techniques
by writing a non-trivial application. Woven around this ongoing example,
the chapter discusses many immediately important topics, including duck
typing, Python protocols, MVC, using Windows Forms to build a GUI, tab
pages, dialogs, menus, toolbars, images, saving text files, .NET
Streams, text file encodings, Python exceptions and lambda functions.
These diverse topics are covered rapidly but thoroughly, giving the
reader enough information about each to be able to use them together
from IronPython to create a useful project.&lt;/p&gt;
&lt;p&gt;Having covered these foundations, the book then moves on to address some
specific areas in more detail. The following chapter headings give you
some idea of the topics which are explored in depth:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;First-class functions in action with XML&lt;/em&gt; - demonstrates pragmatic
    use of functions as first-class objects, and higher-order functions
    (functions that take other functions as arguments and return
    modified versions.) and of course decorators. These are shown in
    use, appropriately paired up with the .NET XmlWriter and XmlReader
    classes, demonstrating event driven parsing of XML.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Properties, dialogs and Visual Studio&lt;/em&gt; - Python properties, .NET
    dialogs, and using IronPython in Visual Studio. This sounds like a
    straightforward chapter, but as you might guess, the book gets deep
    into the topics and is jammed full of information. By the end of the
    chapter you'll have added to the example application to create
    document observers, used BinaryFormatter to serialise objects, and
    touched on Python's pickle equivalent.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Agile Testing: where dynamic typing shines&lt;/em&gt; - From the unittest
    module and creating tests, through mock objects, listeners, monkey
    patching, dependency injection and functional testing. This is a
    dense chapter in a dense book, touching along the way on Python
    attribute lookup rules, bound and unbound methods, asynchronous
    execution for functional testing. My only criticism is that it's
    clearly hard for developers to 'get' testing until they have
    hands-on experience of it, so this single-chapter, while very
    thorough in explaining &lt;em&gt;how&lt;/em&gt; to test, has an ambitious remit, and
    doesn't have enough space to explain much of &lt;em&gt;why&lt;/em&gt; we test. I guess
    this is partially my own bias shining through here - I regard
    testing as quite literally the most important thing to happen in
    computer science since the invention of the compiler, and would
    encourage anyone interested to go and read as much as they can about
    it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Metaprogramming, protocols and more&lt;/em&gt; - More Python protocols,
    dynamic attribute access, and metaclasses. The sorts of things that
    in a static language would be deep black magic, or else completely
    impossible, but here they are just the &lt;em&gt;right&lt;/em&gt; sort of crazy. Read,
    enjoy, and &lt;em&gt;unlearn&lt;/em&gt;. We see how to create a profiling decorator,
    that modifies the functions you pass to it, wrapping them in
    stopwatch timing calls. We also learn about some of the more
    advanced integration of IronPython with the .NET CLR, including
    static compilation of IronPython code into assemblies, and one of
    the very few additions to Python syntax that IronPython has been
    obliged to provide - the typing of .NET arrays and generics. You'll
    never need to use generics yourself (in Python, everything is a
    generic), and you'll never want to go back to typed containers if
    you can avoid it. However, you may need to deal with some from an
    existing C# API, and this is how you do it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whew! We're only halfway through! The remaining chapters are equally
detailed, but I'm going to start skimming through them somewhat. They
cover the interactions of IronPython with more advanced .NET topics such
as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Windows Presentation Foundation (WPF) and IronPython&lt;/em&gt; - WPF is
    the DirectX user interface library that is a successor to Windows
    Forms. This includes XAML, an XML dialect for describing user
    interfaces, decoupling their implementation from application logic.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Windows System Administration with IronPython&lt;/em&gt; - using IronPython
    as a scripting language for sysadmin automation tasks, from the
    simple, such as copying files, to the complex, such as Windows
    Management Instrumentation (WMI), administration of remote machines,
    and a substantial discussion on the uses of PowerShell with
    IronPython.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IronPython and&lt;/em&gt; &lt;em&gt;ASP.NET&lt;/em&gt; - building a web-based front end to the
    sample application developed earlier. Reusable controls.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Databases and Web Services&lt;/em&gt; - using ADO.NET to work with databases,
    and using SOAP and REST.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Silverlight: IronPython in the browser&lt;/em&gt; - creating Silverlight
    applications, and accessing the browser DOM from them.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Extending IronPython with C#/.NET&lt;/em&gt; - all about creating C# class
    libraries for use in IronPython, calling unmanaged code from
    IronPython, and creating interfaces on your C# classes to provide
    dynamic, Pythonic behaviour. It also includes dynamic compilation of
    assemblies at runtime, which opens the door to advanced
    code-generation techniques.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Embedding the IronPython Engine&lt;/em&gt; - many developers might want to
    provide IronPython as a scripting language within their own
    application, and this chapter shows you how.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alright, that's it! There are appendices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A whirlwind tour of C#&lt;/em&gt; - in case anyone wants more guidance while
    looking at some of the C# code or concepts that are discussed
    throughout the book.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python magic methods&lt;/em&gt; - a description of &lt;em&gt;all&lt;/em&gt; the Python magic
    double-underscore methods, which is a fabulous resource, one which l
    haven't seen collected anywhere else, and have been referring back
    to ever since I read the book.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there you have it. If you haven't inferred already, I learned
absolutely &lt;em&gt;heaps&lt;/em&gt; from this book, even though it's about a language and
environment I've been using every day for years. I think I can say
without any equivocation that this is the best IronPython book &lt;em&gt;in the
world&lt;/em&gt;. If you're a .NET person who is curious about Python (and believe
me, &lt;a href="http://xkcd.com/353/"&gt;you&lt;/a&gt;
&lt;a href="http://www.paulgraham.com/avg.html"&gt;should&lt;/a&gt;
&lt;a href="http://www.python.org/about/success/esr/"&gt;be&lt;/a&gt;), or if you're a Python
person who fancies .NET - maybe for DirectX or Silverlight or any number
of other wonderful things, then you should absolutely go directly to the
&lt;a href="http://www.ironpythoninaction.com/"&gt;IronPython in Action book website&lt;/a&gt;
right this second and buy it.&lt;/p&gt;
&lt;p&gt;What are you still doing here?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Good catch Carl, I forgot the all-important rating!&lt;/p&gt;
&lt;p&gt;10/10 if you already use, or are curious about using, IronPython - then
you need this book.&lt;/p&gt;
&lt;p&gt;0/10 if dynamic languages make you break out in hives, or if .NET makes
you think of Darth Vader, then you shouldn't touch this book with a
barge pole.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;&lt;/p&gt;</description><category>book</category><category>geek</category><category>media</category><category>non-fiction</category><category>python</category><category>software</category><guid>https://www.tartley.com/posts/ironpython-in-action/</guid><pubDate>Sat, 18 Jul 2009 17:03:31 GMT</pubDate></item><item><title>Opengl Shading Language</title><link>https://www.tartley.com/posts/opengl-shading-language/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;span style="float: left"&gt;
&lt;img alt="OpenGL Shading Language cover" src="https://www.tartley.com/files/2009/05/opengl-shading-language.jpg"&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Randi J. Rost (2nd Edtion, 2006)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I've had a hobbyist interest in computer graphics for years, but had
avoided the technology of &lt;em&gt;shaders&lt;/em&gt; these last few years, thinking that
they were just another layer of complexity which I didn't need to embark
upon while I was still getting to grips with the standard OpenGL API.&lt;/p&gt;
&lt;p&gt;With hindsight, I was wrong. I was recently cajoled into getting on
board after talking to &lt;a href="http://blog.vrplumber.com/"&gt;Mike Fletcher&lt;/a&gt;
(creator of &lt;a href="http://pyopengl.sourceforge.net/"&gt;PyOpenGL&lt;/a&gt;) after his talk
at PyCon, and now I feel as if I should have read this book years ago.
Shaders solve many of the problems I've been happily messing with for
ages, in ways that are easier to implement, more powerful, and more
performant.&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://www.tartley.com/posts/opengl-programming-guide-6th-ed"&gt;whined about the Red Book&lt;/a&gt;, but this
"Orange" OpenGL Shading Language book is brill - just what I needed.
Incisive without being overly terse, practical, and once it got into the
chapters about applications of multidimensional Perlin noise it got me
all hot'n'bothered about computer graphics again. Yay my inner geek!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I started this book fascinated by using vertex shaders to
transform geometry on the fly, with little interest in the superficial
fragment shaders used to decorate the rendered surfaces with pretty
images or lighting effects. Since finishing it, this has reversed: I've
become obsessed with noise and Fourier transforms and all the
paraphernalia of fragment shaders, imagining relatively simple fragment
shader that could, I believe, provide a surface with infinite levels of
detail. I dreamed about my old university 'Signals &amp;amp; Systems' type
lectures. Uncanny.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update2:&lt;/strong&gt; Ohdear. Once I started trying to write anything more than
the most trivial of my own shaders, I ran into an unexpected problem. My
shaders just wouldn't link. I couldn't figure out why. The book was no
help. &lt;em&gt;Google&lt;/em&gt; was no help. The error messages &lt;em&gt;certainly&lt;/em&gt; weren't any
help (thanks ATI.) Eventually I realised that the 'built-in' noise
functions which are part of the OpenGL shader language are simply not
implemented by the vast majority of graphics card manufacturers - you
have to roll your own. Which is not a major deal-breaker, but what
&lt;em&gt;is&lt;/em&gt; disappointing is that the OpenGL Shader Language book makes
absolutely no mention of this in any of the chapters plural in which it
lovingly describes the built-in noise functions, along with their
characteristics and uses. Perhaps I spoke too soon when praising the
book. Maybe it is another case of idealistic OpenGL theory that has
something of a disconnect with real world development. Maybe the book
was written before this situation came to pass - regardless, it's no
bloody use to me.&lt;/p&gt;
&lt;p&gt;Rating (oh, how I love my new rating system. Check this one out:)&lt;/p&gt;
&lt;p&gt;10/10 if you want to learn &lt;em&gt;the theory of&lt;/em&gt; how to use the OpenGL shader
language.&lt;/p&gt;
&lt;p&gt;0/10 if you don't.&lt;/p&gt;
&lt;p&gt;&lt;br style="clear: both"&gt;&lt;/p&gt;</description><category>book</category><category>geek</category><category>graphics</category><category>media</category><category>non-fiction</category><category>software</category><guid>https://www.tartley.com/posts/opengl-shading-language/</guid><pubDate>Tue, 12 May 2009 03:19:26 GMT</pubDate></item></channel></rss>