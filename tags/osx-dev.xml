<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tartley.com (Posts about osx-dev)</title><link>https://www.tartley.com/</link><description></description><atom:link href="https://www.tartley.com/tags/osx-dev.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2025 &lt;a href="mailto:tartley @ tartley dot com"&gt;Jonathan Hartley&lt;/a&gt; </copyright><lastBuildDate>Mon, 26 May 2025 23:19:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Fully Operational</title><link>https://www.tartley.com/posts/fully-operational/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;Now witness the power of this fully armed and operational battle station.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My desk featuring too many computers" src="https://www.tartley.com/files/2023/desk-with-computers.webp"&gt;&lt;/p&gt;
&lt;p&gt;New job means new laptop means it's time to clean and re-org the desk.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Leftmost blue skies&lt;/dt&gt;
&lt;dd&gt;Linux laptop (a free hand-me-down from a job ten years ago). Acting as the
house Plex / streaming media server, usually tucked away more discreetly than
this.&lt;/dd&gt;
&lt;dt&gt;Left top green forest&lt;/dt&gt;
&lt;dd&gt;Heavy duty work / gaming Linux laptop ("hardware bonus" from my last
employer). Has been my primary work machine, but sounds like it's getting
replaced by...&lt;/dd&gt;
&lt;dt&gt;Left bottom spaceship drawing&lt;/dt&gt;
&lt;dd&gt;Macbook Pro (Brand new! Just unwrapped yesterday. Thank you new employer
&lt;a href="https://lambdalabs.com"&gt;Lambda&lt;/a&gt;!) Looks like this means I'm returning to
developing on a Mac and VMs, after a full decade on Ubuntu &amp;amp; derivatives.
I'm told Docker for Desktop now behaves better than it used to.&lt;/dd&gt;
&lt;dt&gt;Left bottom, under the Mac&lt;/dt&gt;
&lt;dd&gt;You can sort of see the 10" whiteboard I use to combat ADHD by writing a
sentence about what I'm &lt;em&gt;supposed&lt;/em&gt; to be working on, then I can spot it every
few minutes and drag my mind back to the task in hand. (a technique described
in the fabulous
&lt;a href="https://gamkedo.gumroad.com/l/self-command/"&gt;Self Command by Chris DeLeon&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;Center&lt;/dt&gt;
&lt;dd&gt;Main monitor and wireless tenkeyless mechanical keyboard &amp;amp; mouse combo, all
switchable to any of the laptops. Under the keyboard you can sort-of see the
&lt;a href="https://ultrapro.com/collections/gaming-accessories-magic-the-gathering/type_playmat"&gt;Magic the Gathering 13x24" gaming mat&lt;/a&gt;
(free from local gaming store's MtG lessons) pressed into duty as the world's
most gigantic, beautiful, and luxurious mouse mat.&lt;/dd&gt;
&lt;dt&gt;Right monitor, keyboard and mouse&lt;/dt&gt;
&lt;dd&gt;are wired to the Windows gaming PC under the desk (not visible). The kiddo's
current &lt;a href="https://store.steampowered.com/app/361420/ASTRONEER/"&gt;Astroneer&lt;/a&gt;
session is visible. The monitor is switchable to any of the laptops.&lt;/dd&gt;
&lt;dt&gt;Right tab&lt;/dt&gt;
&lt;dd&gt;Absolute workhorse 12.6" Android tablet on which I do most of my reading,
laid in the picture here just to be gratuitous.&lt;/dd&gt;
&lt;/dl&gt;</description><category>geek</category><category>hardware</category><category>journal</category><category>keyboard</category><category>osx-dev</category><guid>https://www.tartley.com/posts/fully-operational/</guid><pubDate>Thu, 21 Sep 2023 15:51:12 GMT</pubDate></item><item><title>Encrypted zip files on OSX</title><link>https://www.tartley.com/posts/encrypted-zip-files-on-osx/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I've since switched to KeePassXC, the community fork of KeePassX,
an open source, cross-platorm, local-first, encrypted password storage program.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;My passwords and other miscellany are in a plain text file within an
encrypted zip. Since starting to use OSX I've been looking for a way to
access my passwords such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I get prompted for the decryption password.&lt;/li&gt;
&lt;li&gt;The file gets unzipped, but not in the same directory, because
    that's synced to Dropbox, so would send my plaintext passwords to
    them every time I accessed them. Maybe to /tmp?&lt;/li&gt;
&lt;li&gt;The plaintext file within the zip is opened in \$EDITOR.&lt;/li&gt;
&lt;li&gt;Wait for me to close \$EDITOR, then remove my plaintext passwords
    from the filesystem.&lt;/li&gt;
&lt;li&gt;Before deleting the passwords, check if I've updated them. If so,
    put the new updated version back into the original zip file.&lt;/li&gt;
&lt;li&gt;Don't forget to keep the updated zip file encrypted, using the same
    password as before, without prompting for it again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I failed to find an existing app which would do all this (although I had
no trouble on Linux or even on Windows.) Hence, resorting to good old
Bash:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;ZIPDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/docs/org"&lt;/span&gt;

&lt;span class="nb"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Password:"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key

&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ZIPDIR&lt;/span&gt;
unzip&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;passwords.zip&lt;span class="w"&gt; &lt;/span&gt;passwords.txt&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$TMPDIR&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$TMPDIR&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
touch&lt;span class="w"&gt; &lt;/span&gt;passwords.datestamp
&lt;span class="nv"&gt;$EDITOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;passwords.txt
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;passwords.txt&lt;span class="w"&gt; &lt;/span&gt;-nt&lt;span class="w"&gt; &lt;/span&gt;passwords.datestamp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;zip&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ZIPDIR&lt;/span&gt;&lt;span class="s2"&gt;/passwords.zip"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;passwords.txt
&lt;span class="k"&gt;fi&lt;/span&gt;

rm&lt;span class="w"&gt; &lt;/span&gt;passwords.txt
rm&lt;span class="w"&gt; &lt;/span&gt;passwords.datestamp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don't expect this to be watertight, but seems good enough for today.
I'm happy to hear suggestions.&lt;/p&gt;</description><category>osx-dev</category><guid>https://www.tartley.com/posts/encrypted-zip-files-on-osx/</guid><pubDate>Tue, 09 Oct 2012 15:17:07 GMT</pubDate></item><item><title>Compiling MacVim with Python 2.7</title><link>https://www.tartley.com/posts/compiling-macvim-with-python-2-7/</link><dc:creator>Jonathan Hartley</dc:creator><description>&lt;p&gt;I love the brilliant Vim plugin
&lt;a href="http://www.vim.org/scripts/script.php?script_id=2441"&gt;pyflakes-vim&lt;/a&gt;,
which highlights errors &amp;amp; warnings, and since I got a MacBook for work,
I've been using MacVim a lot.&lt;/p&gt;
&lt;p&gt;This combination has a problem, that MacVim uses the OSX system default
Python 2.6, so pyflakes is unable to handle Python 2.7 syntax, such as
set literals. These are marked as a syntax errors, which prevents the
rest of the file from being parsed.&lt;/p&gt;
&lt;p&gt;The solution is to compile your own MacVim, using Python 2.7 instead of
the system Python. The following commands got MacVim compiled for me:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;git://github.com/b4winckler/macvim.git
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;macvim/src
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-L/usr/lib
./configure&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--with-features&lt;span class="o"&gt;=&lt;/span&gt;huge&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--enable-rubyinterp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--enable-perlinterp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--enable-cscope&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--enable-pythoninterp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--with-python-config-dir&lt;span class="o"&gt;=&lt;/span&gt;/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/config
make
open&lt;span class="w"&gt; &lt;/span&gt;MacVim/build/Release
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Drag&lt;span class="w"&gt; &lt;/span&gt;MacVim.app&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;Applications&lt;span class="w"&gt; &lt;/span&gt;directory
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without the LDFLAGS setting, I was missing some symbols at link. The
--with-python-config-dir entry came from typing 'which python' to find
where my Python 2.7 install lives, and modifying that result to find its
'config' directory (whatever that is) near to the binary.&lt;/p&gt;
&lt;p&gt;As indicated, install by dragging the resulting
macvim/src/MacVim/build/Release/MacVim.app into your Applications
directory.&lt;/p&gt;
&lt;p&gt;Open up MacVim, and check out the built-in Python version:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="mf"&gt;2.7.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r271&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;86882&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nov&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And files with set literals are now correctly parsed for errors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; This only works if the Python 2.7 is your default 'python'
executable. Otherwise, or if you get "ImportError: No module named
site"?, see Richard's comments below.&lt;/p&gt;</description><category>geek</category><category>osx-dev</category><category>python</category><category>software</category><category>terminal</category><category>vim</category><guid>https://www.tartley.com/posts/compiling-macvim-with-python-2-7/</guid><pubDate>Tue, 18 Oct 2011 17:25:03 GMT</pubDate></item></channel></rss>